<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazybones Kill PLAN</title>
  <subtitle>In me the tiger sniffs the rose</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vrast.cn/"/>
  <updated>2019-04-19T15:02:19.353Z</updated>
  <id>http://vrast.cn/</id>
  
  <author>
    <name>keyle xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用VisualStudio Code 预览.md文件</title>
    <link href="http://vrast.cn/posts/47642b6e/"/>
    <id>http://vrast.cn/posts/47642b6e/</id>
    <published>2019-04-19T14:44:21.000Z</published>
    <updated>2019-04-19T15:02:19.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇是给一个小朋友看的，原画是这样的：“用VisualStudio Code 看不了Markdown文件 。” 那么按照本篇操作，你将可以方便的在VsCode中预览Markdown文件。</p>
</blockquote>
 <a id="more"></a>
<h1 id="给VisualStudio-Code安装Markdown预览插件"><a href="#给VisualStudio-Code安装Markdown预览插件" class="headerlink" title="给VisualStudio Code安装Markdown预览插件"></a>给VisualStudio Code安装Markdown预览插件</h1><p><img src="/uploads/WX20190419-225136@2x.png" alt="安装插件的步骤"></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>安装完毕之后打开<code> .md </code>文件。就可以使用preview功能了。</p>
<p><img src="/uploads/WX20190419-225136@2x.png" alt="按一次Ctrl + Shift + v 就可以开启preview窗口了。"></p>
<p><img src="/uploads/WX20190419-225734@2x.png" alt="如果想要左右分屏 可以点一下这个小图标"></p>
<p><img src="/uploads/WX20190419-225904@2x.png" alt="分屏效果图"></p>
<p><img src="/uploads/WX20190419-225344@2x.png" alt="快捷键在插件内部也有介绍，非常的简单"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇是给一个小朋友看的，原画是这样的：“用VisualStudio Code 看不了Markdown文件 。” 那么按照本篇操作，你将可以方便的在VsCode中预览Markdown文件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://vrast.cn/categories/Markdown/"/>
    
    
      <category term="tools" scheme="http://vrast.cn/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac平台Debug lua提示缺少socket.http组件</title>
    <link href="http://vrast.cn/posts/d708212d/"/>
    <id>http://vrast.cn/posts/d708212d/</id>
    <published>2019-04-18T02:35:02.000Z</published>
    <updated>2019-04-18T03:19:56.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>起因是这样的我想在Mac上配一下Lua Debug环境，在debug的时候会用到socket链接到调试器。在intelliJ中Debug的时候它提示我“module ‘socket.http’ not found” 然后我就去了解了一下Lua环境的配置，这里着重要提到Lua的包管理工具 <a href="https://luarocks.org" target="_blank" rel="external">luarocks</a>,还真是很方便缺什么直接就装什么。</p>
</blockquote>
<a id="more"></a>
<h1 id="安装luarocks"><a href="#安装luarocks" class="headerlink" title="安装luarocks"></a>安装luarocks</h1><p>直接用Homebrew就能安装，当然可以下载源码编译。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>luarocks</div></pre></td></tr></table></figure></p>
<p>或者</p>
<ol>
<li>下载 <a href="https://luarocks.org/releases/luarocks-3.0.4.tar.gz" target="_blank" rel="external">https://luarocks.org/releases/luarocks-3.0.4.tar.gz</a></li>
<li>解压进入luarocks-3.0.4</li>
<li>编译 ./configure; sudo make bootstrap</li>
<li>安装luasocket sudo luarocks install luasocket</li>
</ol>
<p>这里需要注意如果你和我是使用Mac那么在第4步的时候需要切换到<code>/usr/local/share/lua/5.3</code>这个路径下。这是默认的lua文件存放位置。</p>
<h1 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">luarocks <span class="built_in">help</span></div></pre></td></tr></table></figure>
<h1 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h1><p>我看了下好用的lua扩展还真不少<br><img src="/uploads/WX20190418-104738.png" alt="比如关于Protobuf的库"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/16491242/module-socket-http-not-found-lua-on-imac" target="_blank" rel="external">“module ‘socket.http’ not found:” –Lua on iMac [closed]
</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;起因是这样的我想在Mac上配一下Lua Debug环境，在debug的时候会用到socket链接到调试器。在intelliJ中Debug的时候它提示我“module ‘socket.http’ not found” 然后我就去了解了一下Lua环境的配置，这里着重要提到Lua的包管理工具 &lt;a href=&quot;https://luarocks.org&quot;&gt;luarocks&lt;/a&gt;,还真是很方便缺什么直接就装什么。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="FAQ" scheme="http://vrast.cn/categories/FAQ/"/>
    
    
      <category term="Lua" scheme="http://vrast.cn/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>UNITY Unable to instantiate UnityPlayerActivity</title>
    <link href="http://vrast.cn/posts/80d969f4/"/>
    <id>http://vrast.cn/posts/80d969f4/</id>
    <published>2019-04-11T08:11:24.000Z</published>
    <updated>2019-04-11T10:56:40.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这段时间自从用了UNITY 2018.3.8F1 出现的bug很多，关于构建包的。不知道是不是 Unity 频繁更新导致的。截止到目前为止 我已经在UNITY HUB上看到了 UNITY2018.3.12.F1 这个版本了。我这边的遇到的问题主要体现在使用Gradle构建或者使用内置方式构建都会出现无法找到MainActivity。也就是Unity默认运行的那个Activity.即使我直接创建一个新的工程打包，亦是如此。<br><img src="/uploads/WX20190411-161531.png" alt="无法找到这个 unityplayer.UnityActivity 或者 xxx.xxx.xxx.UnityPlayerActivity"></p>
</blockquote>
<a id="more"></a>
<p><img src="/uploads/WX20190411-183559.png" alt="打开AndroidManifest.xml之后发现这边直接找不到。"></p>
<p><img src="/uploads/WX20190411-183859.png" alt="既然这样我直接用UNITY3D默认的"></p>
<p>好吧 解决了。</p>
<p>当然这并不是引发当前问题的根源，然而为什么会引发这个问题呢 ？ 于是我重新审视了一下代码</p>
<p><img src="/uploads/WX20190411-184808.png" alt="这段代码的继承类是 Activity"></p>
<h1 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h1><p><img src="/uploads/WX20190411-185258.png" alt="在老版本里是这样的，改成继承自UnityPlayerAcitivity问题解决。"></p>
<h1 id="所以-这又是Unity的BUG吗？"><a href="#所以-这又是Unity的BUG吗？" class="headerlink" title="所以 这又是Unity的BUG吗？"></a>所以 这又是Unity的BUG吗？</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这段时间自从用了UNITY 2018.3.8F1 出现的bug很多，关于构建包的。不知道是不是 Unity 频繁更新导致的。截止到目前为止 我已经在UNITY HUB上看到了 UNITY2018.3.12.F1 这个版本了。我这边的遇到的问题主要体现在使用Gradle构建或者使用内置方式构建都会出现无法找到MainActivity。也就是Unity默认运行的那个Activity.即使我直接创建一个新的工程打包，亦是如此。&lt;br&gt;&lt;img src=&quot;/uploads/WX20190411-161531.png&quot; alt=&quot;无法找到这个 unityplayer.UnityActivity 或者 xxx.xxx.xxx.UnityPlayerActivity&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="Android" scheme="http://vrast.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>优化IL2CPP打包速度</title>
    <link href="http://vrast.cn/posts/b5ee8b26/"/>
    <id>http://vrast.cn/posts/b5ee8b26/</id>
    <published>2019-04-10T06:54:16.000Z</published>
    <updated>2019-04-10T07:31:36.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天有同事找我聊了一下关于打包的问题，他说在UNITY IL2CPP下编译速度过慢，切换成 mono 会快三分之一。这个速度有没有办法优化。我倒是没有什么实际优化打包速度的操作经验，让我来做一般就是资源层优化，当然这是最难也最容易做到的。但是他倒是给我提了几个不错的建议。我看了下UNITY的官网确实如此。本篇记录之。</p>
</blockquote>
<ul>
<li>降低硬盘读写(各种方案:关闭杀毒软件/用两块ssd项目与unity分开/等)</li>
<li>增量包构建会加速进程</li>
</ul>
<p>下面是UNITY官方的实践经验：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Optimizing IL2CPP build times</div><div class="line">Project build times can be much longer when building a project with IL2CPP</div><div class="line">. However, there are several ways to reduce the build time significantly:</div><div class="line"></div><div class="line"><span class="keyword">Use</span> incremental building</div><div class="line"></div><div class="line"><span class="keyword">When</span> <span class="keyword">using</span> incremental building, the C++ compiler <span class="keyword">only</span> recompiles files that have <span class="keyword">changed</span> since the <span class="keyword">last</span> build. <span class="keyword">To</span> <span class="keyword">use</span> incremental building, <span class="keyword">build</span> your <span class="keyword">project</span> <span class="keyword">to</span> a previous <span class="keyword">build</span> location (<span class="keyword">without</span> deleting the target <span class="keyword">directory</span>).</div><div class="line"></div><div class="line"><span class="keyword">Exclude</span> <span class="keyword">project</span> <span class="keyword">and</span> target <span class="keyword">build</span> folders <span class="keyword">from</span> anti-malware software scans</div><div class="line"></div><div class="line">You can improve <span class="keyword">build</span> times <span class="keyword">by</span> disabling anti-malware software <span class="keyword">before</span> building your project. (Testing <span class="keyword">by</span> Unity Technologies <span class="keyword">found</span> that <span class="keyword">build</span> times decreased <span class="keyword">by</span> <span class="number">50</span> – <span class="number">66</span>% <span class="keyword">after</span> disabling Windows Defender <span class="keyword">on</span> a <span class="keyword">fresh</span> Windows <span class="number">10</span> installation.)</div><div class="line"></div><div class="line"><span class="keyword">Store</span> your <span class="keyword">project</span> <span class="keyword">and</span> target <span class="keyword">build</span> folder <span class="keyword">on</span> a Solid State Drive (SSD)</div><div class="line"></div><div class="line">Solid State Drives (SSDs) have faster <span class="keyword">read</span>/write speed, <span class="keyword">when</span> compared <span class="keyword">to</span> traditional Hard Disk Drives (HDD). Converting IL code <span class="keyword">to</span> C++ <span class="keyword">and</span> compiling it involves a <span class="keyword">large</span> <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">read</span>/write operations. A faster <span class="keyword">storage</span> device speeds up this process.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天有同事找我聊了一下关于打包的问题，他说在UNITY IL2CPP下编译速度过慢，切换成 mono 会快三分之一。这个速度有没有办法优化。我倒是没有什么实际优化打包速度的操作经验，让我来做一般就是资源层优化，当然这是最难也最容易做到的。但是他倒是
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="BuildTimes" scheme="http://vrast.cn/tags/BuildTimes/"/>
    
  </entry>
  
  <entry>
    <title>安装Unity导出APK显示失败</title>
    <link href="http://vrast.cn/posts/434d7425/"/>
    <id>http://vrast.cn/posts/434d7425/</id>
    <published>2019-04-05T09:45:02.000Z</published>
    <updated>2019-04-05T10:02:37.498Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>遇到一个非常皮的问题，我更新了Android Studio的SDK Build Tools，直接将 Build Tools 29 rc1 与 rc2 都下载了。<br><img src="/uploads/WX20190405-174643.png" alt="我当时是直接更新到了 29 rc2"><br>直接导出项目在Android Studio中会直接显示 <code>android studio ERROR: Failed to find Build Tools revision 29.0.0</code><br>另外如果直接出APK然后安装会显示一个<code>Installation error:INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</code> 这个报错信息是十分误导人的，网上的解决方案一般都是更改keystone或直接更改unity的项目导出模版。这样越改越偏。如果你也和我一样不妨试一下下面的方案。</p>
</blockquote>
<a id="more"></a>
<p>我在Stackoverflow上找到了一解决方案：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">For building a project, Unity3d uses a stable version of the Build Tools and not an rc (<span class="keyword">release</span> candidate).</div><div class="line"></div><div class="line">The Android SDK <span class="keyword">path</span> <span class="keyword">is</span> usually C:\<span class="keyword">Users</span>\&lt;username&gt;\AppData\<span class="keyword">Local</span>\Android\sdk\<span class="keyword">build</span>-tools\ <span class="keyword">delete</span> the <span class="number">29.0</span><span class="number">.0</span>-rc1 folder <span class="keyword">or</span> <span class="keyword">move</span> it <span class="keyword">out</span> <span class="keyword">to</span> anywhere. You could also remove the rc <span class="keyword">version</span> <span class="keyword">of</span> the SDK <span class="keyword">Build</span> Tools via Android Studio<span class="string">'s SDK manager.</span></div><div class="line"></div><div class="line">Doing that the project should build successfully.</div></pre></td></tr></table></figure>
<p>大意就是让我直接将下载的  Build Tools 29 rc1 与 rc2 先删除然后再打包。试了一下成功安装了。</p>
<p><img src="/uploads/WX20190405-175318.png" alt="安装成功了"></p>
<h1 id="UNITY的Build-Tools使用策略猜测"><a href="#UNITY的Build-Tools使用策略猜测" class="headerlink" title="UNITY的Build Tools使用策略猜测"></a>UNITY的Build Tools使用策略猜测</h1><p>经过上面的实力躺坑，可以推断如果你安装了更新的Build Tools，unity导出的时候就会使用最近更新的最新的那个，或许是路径拼接的问题，unity所引用的build tools只会引用前面的版本号 ，就像我遇到的一样 明明下载了 29 rc1 / 29 rc2 ，Unity偏偏不用执着的去找一个叫 29 的 Build Tools。</p>
<p>或许这是一个隐藏bug吧，希望Unity团队早日解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;遇到一个非常皮的问题，我更新了Android Studio的SDK Build Tools，直接将 Build Tools 29 rc1 与 rc2 都下载了。&lt;br&gt;&lt;img src=&quot;/uploads/WX20190405-174643.png&quot; alt=&quot;我当时是直接更新到了 29 rc2&quot;&gt;&lt;br&gt;直接导出项目在Android Studio中会直接显示 &lt;code&gt;android studio ERROR: Failed to find Build Tools revision 29.0.0&lt;/code&gt;&lt;br&gt;另外如果直接出APK然后安装会显示一个&lt;code&gt;Installation error:INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION&lt;/code&gt; 这个报错信息是十分误导人的，网上的解决方案一般都是更改keystone或直接更改unity的项目导出模版。这样越改越偏。如果你也和我一样不妨试一下下面的方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANDROID" scheme="http://vrast.cn/tags/ANDROID/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio进行APK Profile</title>
    <link href="http://vrast.cn/posts/98741dc2/"/>
    <id>http://vrast.cn/posts/98741dc2/</id>
    <published>2019-04-04T08:02:23.000Z</published>
    <updated>2019-04-05T02:37:51.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很多时候我们需要从Android端获取崩溃日志，但是手动adb比较麻烦。这时候就应该使用AndroidStudio了。</p>
</blockquote>
<a id="more"></a>
<h2 id="使用AndroidStudio进行Profile"><a href="#使用AndroidStudio进行Profile" class="headerlink" title="使用AndroidStudio进行Profile"></a>使用AndroidStudio进行Profile</h2><p><img src="/uploads/WX20190404-160013.png" alt="导入APK到IDE中"></p>
<p><img src="/uploads/WX20190405-100856.png" alt="选择需要启用调试的设备，也可以是真机(需要开启USB调试)"></p>
<p><img src="/uploads/WX20190405-101425.png" alt="使用logcat轻松获取当前Log，如果信息过多 你可以直接用Unity关键字过滤"></p>
<p>还有性能/内存等详细的分析这里有一份参考：<a href="https://blog.csdn.net/niubitianping/article/details/72617864" target="_blank" rel="external">Android studio中android profile（性能分析器）的使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多时候我们需要从Android端获取崩溃日志，但是手动adb比较麻烦。这时候就应该使用AndroidStudio了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android Profile" scheme="http://vrast.cn/categories/Android-Profile/"/>
    
    
      <category term="APK" scheme="http://vrast.cn/tags/APK/"/>
    
  </entry>
  
  <entry>
    <title>UNITY移动端路径的注意事项</title>
    <link href="http://vrast.cn/posts/d425b5d3/"/>
    <id>http://vrast.cn/posts/d425b5d3/</id>
    <published>2019-04-04T06:41:42.000Z</published>
    <updated>2019-04-05T07:12:28.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在移动端加载路径与Windwos或Mac上加载有一些区分,有时候资源文件找不到是在是查起来头疼。这里写一些推荐规范，从非开发角度就能避免这些问题。</p>
</blockquote>
<a id="more"></a>
<h2 id="路径大小写"><a href="#路径大小写" class="headerlink" title="路径大小写"></a>路径大小写</h2><p>在UNITY EDITOR下你不必关注路径大小写问题，⚠️ 注意：但是在移动端大小写是敏感的。</p>
<ul>
<li>建议所有AB包都保持小写的命名方式 </li>
<li>建议在加载文件的地方的留一个可以开关的宏定义用来查路径问题</li>
</ul>
<h2 id="StreamAssets目录的资源加载"><a href="#StreamAssets目录的资源加载" class="headerlink" title="StreamAssets目录的资源加载"></a>StreamAssets目录的资源加载</h2><p>StreamAsset目录中。在移动端File.IO不可用，⚠️ 注意：你需要使用www来加载当前目录下资源</p>
<p>你可以使用下面的代码块进行资源的同步加载，而不必非要放到携程里进行加载。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> (WWW www = <span class="keyword">new</span> WWW(path))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (!www.isDone)</div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream(www.bytes))</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="路径的隐含条件"><a href="#路径的隐含条件" class="headerlink" title="路径的隐含条件"></a>路径的隐含条件</h2><ul>
<li>建议统一使用www加载，避免大量的逻辑判断(比如是否需要拼接”file://“)</li>
<li>在StreamAsset目录下就不要使用 File.exsits 之类位于 System.IO命名空间下函数</li>
</ul>
<p>//在android下<br>Application.streamingAssetsPath = “jar:file://“ + Application.dataPath + “!/assets/“</p>
<p>//在pc &amp; mac端<br>Application.streamingAssetsPath = Application.dataPath + “/StreamingAssets”</p>
<p>//在iOS端<br>Application.streamingAssetsPath = Application.dataPath + “/Raw”</p>
<p><img src="/uploads/WX20190404-160429.png" alt="APK内StreamAsset目录结构"></p>
<p>当然你可以使用下面的代码块直接进行www加载路径的拼接</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">string</span> <span class="title">GetWWWLoadingPathAtStreamingAssetsFolder</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> path;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></div><div class="line">    path = <span class="string">"file:"</span> + Application.dataPath + <span class="string">"/StreamingAssets"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">elif</span> UNITY_ANDROID</span></div><div class="line">    path = <span class="string">"jar:file://"</span>+ Application.dataPath + <span class="string">"!/assets/"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">elif</span> UNITY_IOS</span></div><div class="line">    path = <span class="string">"file:"</span> + Application.dataPath + <span class="string">"/Raw"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">//Desktop (Mac OS or Windows)</span></div><div class="line">    path = <span class="string">"file:"</span>+ Application.dataPath + <span class="string">"/StreamingAssets"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> path;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在移动端加载路径与Windwos或Mac上加载有一些区分,有时候资源文件找不到是在是查起来头疼。这里写一些推荐规范，从非开发角度就能避免这些问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MOBILE" scheme="http://vrast.cn/tags/MOBILE/"/>
    
  </entry>
  
  <entry>
    <title>XLua Generate Code Log显示代码找不到</title>
    <link href="http://vrast.cn/posts/aee063b0/"/>
    <id>http://vrast.cn/posts/aee063b0/</id>
    <published>2019-04-04T06:27:25.000Z</published>
    <updated>2019-04-05T03:05:19.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>项目内引用了Xlua插件，在Generate代码的时候发现一些函数没有找到。遂发现这是XLua的黑名单需要添加相应的函数。现在这里记录一下。</p>
</blockquote>
<p><img src="/uploads/WX20190404-143356.png" alt="参考Xlua example中Editor目录下的配置文件"></p>
<p>像下面一样将报错的函数添加到黑名单，然后重新生成代码即可</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[BlackList]</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;<span class="keyword">string</span>&gt;&gt; BlackList = <span class="keyword">new</span> List&lt;List&lt;<span class="keyword">string</span>&gt;&gt;()  &#123;</div><div class="line">    <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;()&#123;<span class="string">"UnityEngine.Light"</span>, <span class="string">"shadowRadius"</span>&#125;,</div><div class="line">    <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;()&#123;<span class="string">"UnityEngine.Light"</span>, <span class="string">"shadowAngle"</span>&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目内引用了Xlua插件，在Generate代码的时候发现一些函数没有找到。遂发现这是XLua的黑名单需要添加相应的函数。现在这里记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/WX20190404-14
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="XLua" scheme="http://vrast.cn/tags/XLua/"/>
    
  </entry>
  
  <entry>
    <title>使用Rider为UNITY项目生成DLL</title>
    <link href="http://vrast.cn/posts/b10c71c2/"/>
    <id>http://vrast.cn/posts/b10c71c2/</id>
    <published>2019-03-16T05:23:04.000Z</published>
    <updated>2019-03-16T05:57:31.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>技术中心有同事问我怎么方便的将库文件编译到UNITY中，并且方便调试。今日有空写一下案例. 无论你使用的是否是rider或者是其他(VisualStudio/Mono)，基本上都是这样处理。</p>
</blockquote>
<a id="more"></a>
<h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p><img src="/uploads/WX20190316-132730@2x.png" alt="在与当前项目平行的目录建一个文件夹"></p>
<p><img src="/uploads/WeChat22cd6b5c46c3c16004d366949f7dbd96.png" alt="右键添加现有项目到解决方案，这里需要注意一下相对路径， 我的相对路径是这样的：&lt;code&gt;../../TEST2/Assets/Plugins&lt;/code&gt; "></p>
<p><img src="/uploads/WX20190316-134956@2x.png" alt="现在我们写一个测试函数 看 已经正常进入断点了"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要提前规范命名空间，并且划分好每块代码的职责范围。另外你需要确定当前所使用的.net framework 版本.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;技术中心有同事问我怎么方便的将库文件编译到UNITY中，并且方便调试。今日有空写一下案例. 无论你使用的是否是rider或者是其他(VisualStudio/Mono)，基本上都是这样处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="Plugin" scheme="http://vrast.cn/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>SpriteAtlas 使用FAQ</title>
    <link href="http://vrast.cn/posts/583e3cbd/"/>
    <id>http://vrast.cn/posts/583e3cbd/</id>
    <published>2019-03-12T07:43:31.000Z</published>
    <updated>2019-04-04T06:38:25.320Z</updated>
    
    <content type="html"><![CDATA[<p>这两天详细的看了下U3D的新图集系统 SpriteAtlas ，目前为止觉得这个新系统用起来问题不大。但是在理解上有一些问题，我会在这里做一些记录。<br>在操作上，这个没什么问题。有问题的是SpriteAtlasManager这块，需要去理解一下调用机制。</p>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>UNITY每次更新旧操作方式都会变得更加简单，这次亦是如此。</p>
<h3 id="启用图集打包方式"><a href="#启用图集打包方式" class="headerlink" title="启用图集打包方式"></a>启用图集打包方式</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E<span class="function"><span class="title">dit</span>-&gt;</span> P<span class="function"><span class="title">rojectSettings</span> -&gt;</span> E<span class="function"><span class="title">ditor</span> -&gt;</span> S<span class="function"><span class="title">prite</span> Packer -&gt;</span> Mode</div><div class="line"></div><div class="line"> -&gt;  Enable For Builds：在打包时使用图集</div><div class="line"></div><div class="line"> -&gt;  AlwaysEnabled：保持图集状态</div></pre></td></tr></table></figure>
<h3 id="制作图集"><a href="#制作图集" class="headerlink" title="制作图集"></a>制作图集</h3><p>新建SpriteAtlas文件，将Sprite或者Sprite所在文件夹拖入Objects for Packing，按Pack Preview预览。</p>
<h3 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h3><p><img src="/uploads/spriteatlasdemo.png" alt="使用变体方便的制作低清晰度图集给低性能设备使用"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>SpriteAtlas -&gt; Include in Build : 勾选的话作用于编辑器中。取消后需要在代码中监听SpriteAtlasManager.atlasRequested事件来在程序中加载贴图集。</p>
<p>如果你准备用AB加载图集 或者 直接从Resources加载图集 建议你将 Include in Build 的选中去掉。避免重复的资源出现在包体里。</p>
<h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><h3 id="先加载后取值"><a href="#先加载后取值" class="headerlink" title="先加载后取值"></a>先加载后取值</h3><p>如果现在要在运行时从资源目录或者AB里加载出Prefab,这个时候我们需要先加载这个Prefab的代码上<code>先进行SpriteAtlas的加载工作</code> – 也就是需要保证这个Sprite所属SpriteAtlas已经被Load到运行时。</p>
<p>下面的代码是可以正常工作的：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> UnityEngine.U2D;</div><div class="line"><span class="keyword">using</span> UnityEngine.UI;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestSA</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> GameObject[] objs;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> SpriteAtlas at;</div><div class="line"></div><div class="line">	<span class="comment">// Start is called before the first frame update</span></div><div class="line">	<span class="function">IEnumerator <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		at = Resources.Load&lt;SpriteAtlas&gt;(<span class="string">"NewSpriteAtlas2"</span>);</div><div class="line">		<span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">3</span></span>)</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objs.Length; i++)</div><div class="line">		&#123;</div><div class="line">			objs[i].SetActive(<span class="literal">true</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		objs[<span class="number">0</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">		objs[<span class="number">1</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">		objs[<span class="number">2</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为没有对 SpriteAtlasManager 中的回调函数进行监听，我们收获了一个Warning , 但是不影响编辑器中的正常显示 。</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⚠️ SpriteAtlasManager.atlasRequested wasn<span class="symbol">'t</span> listened <span class="keyword">to</span> <span class="keyword">while</span> NewSpriteAtlas2 requested.</div></pre></td></tr></table></figure>
<p>如果你考虑上面的做法务必小心你在每次代码调用Sprite加载都已经Load过SpriteAtlas。这应该是需要写一个相应的模块去管理 SpriteAtlas - Sprite 的从属关系。</p>
<h3 id="先注册后取值"><a href="#先注册后取值" class="headerlink" title="先注册后取值"></a>先注册后取值</h3><p>第二种就简单一些了，这也是UNTIY推荐的方法。你不必每次都在代码前检测是否调用过图集加载之类或者其他加载图集相关代码。 你只需要在 SpriteAtlasManager 中注册 atlasRegistered . 在第一次加载相应图集的时候会自动调一次，这时候在该函数的回调中内你可以轻松的写一段加载图集的代码。</p>
<h3 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h3><p>哦对了，这个图集什么时候被加载 ？ 如果你实例化物体关联到Sprite 就会执行 <code>atlasRequested</code> 回调，在UNITY内部做了一个检测，如果该关联到的图集是第一次被关联到，那么才会调用一次。</p>
<p>Trigger when any Sprite was bound to SpriteAtlas but couldn’t locate the atlas asset during runtime.<br>This usually means the sprite was packed to an atlas which is not included in build<br>This callback does not expect an immediate response from the user. Instead, it passes on a System.Action. The user can load the atlas object later and use this System.Action to pass back the loaded atlas.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> UnityEngine.U2D;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AtlasLoader</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        SpriteAtlasManager.atlasRequested += RequestAtlas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        SpriteAtlasManager.atlasRequested -= RequestAtlas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestAtlas</span>(<span class="params"><span class="keyword">string</span> tag, System.Action&lt;SpriteAtlas&gt; callback</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> sa = Resources.Load&lt;SpriteAtlas&gt;(tag);</div><div class="line">        callback(sa);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.litefeel.com/unity-2017-new-sprite-atlas/" target="_blank" rel="external">Unity2017的新spriteAtlas</a><br><a href="https://docs.unity3d.com/ScriptReference/U2D.SpriteAtlasManager.html" target="_blank" rel="external">SpriteAtlasManager</a><br><a href="https://forum.unity.com/threads/about-include-in-build-behaviour.481433/" target="_blank" rel="external">About “Include in Build” behaviour</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天详细的看了下U3D的新图集系统 SpriteAtlas ，目前为止觉得这个新系统用起来问题不大。但是在理解上有一些问题，我会在这里做一些记录。&lt;br&gt;在操作上，这个没什么问题。有问题的是SpriteAtlasManager这块，需要去理解一下调用机制。&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="UI" scheme="http://vrast.cn/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>UNITY新Prefab系统-2018</title>
    <link href="http://vrast.cn/posts/f258ca82/"/>
    <id>http://vrast.cn/posts/f258ca82/</id>
    <published>2019-03-01T01:44:01.000Z</published>
    <updated>2019-03-01T02:31:42.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近看了一下UNITY3D-2018的新Prefab系统，这里做一个记录。目前的情况看下来新Prefab系统还在不断的优化工作流，对于整体的概念应该是敲定下来了。未来应该是在编辑器层面上的优化和编辑细节上的调整。昨天看了UNITY的公开课。还是有点意思的，其中一个比较有趣的一个案例是某个客户由于场景层级太深，导致对某一个Prefab的递归修改卡了几十分钟最后官方出了一版优化到几分钟卡顿。这也从侧面说明了UNITY还是不断对编辑器进行改进的。对于我们来说应该也是一件很友好的事情。这东西需要总结的并不多，作为一个开箱即用的Prefab工作流，我认为UNITY官方处理的还是相当不错，作为美术或者非程序使用都是能很快上手的流程。<br>需要注意的是新Preafab的嵌套在Assetbundle中可不管你是不是嵌套或者变体，只要出现了多份Prefab就会出现多份资源。<br>第二个需要注意的是性能问题，你不能有太深的层级在你的prefab上。尽力告知美术让他多做prefab减少层级。<br>第三个就是尽量在非Assetbundle目录与Resource目录中使用新prefab系统，这样不会出现多份资源重复打包的问题。</p>
</blockquote>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我这边也就顺着之前公开课的PPT大概浏览一遍，从个人的角度写一些笔记。因为前有视频后有PPT我就在这里做一些概念上的总结了。<br>新prefb系统功能如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Nested</span> Prefabs（嵌套式预制件）</div><div class="line">Prefab Overrides（预制件覆盖/重载）</div><div class="line">Prefab Variants（预制件变体）</div></pre></td></tr></table></figure></p>
<h2 id="Nested-Prefabs（嵌套式预制件）"><a href="#Nested-Prefabs（嵌套式预制件）" class="headerlink" title="Nested Prefabs（嵌套式预制件）"></a>Nested Prefabs（嵌套式预制件）</h2><p>嵌套Prefab的做法，让我举例说的话，从程序的角度打个比方。 如果一个prefab看作是一个类的话。那么嵌套prefab就是在一个类里面使用其他的类作为局部变量类似下面:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">PrefabMain</span></div><div class="line">&#123;</div><div class="line">    PrefabA a;</div><div class="line">    PreafaB b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于a,b变量来说 进行的任何更改对于PrefabMain来说都是没有关系的。</p>
<h2 id="Prefab-Overrides（预制件覆盖-重载）"><a href="#Prefab-Overrides（预制件覆盖-重载）" class="headerlink" title="Prefab Overrides（预制件覆盖/重载）"></a>Prefab Overrides（预制件覆盖/重载）</h2><p>这个概念就不提了，记得我们之前使用UNITY3D在场景里修改实例吗？这就叫Override。</p>
<h2 id="Prefab-Variants（预制件变体）"><a href="#Prefab-Variants（预制件变体）" class="headerlink" title="Prefab Variants（预制件变体）"></a>Prefab Variants（预制件变体）</h2><p>对于这个概念程序应该更好理解了。就像下面写的，下面就是PrefabA变体了，他继承了PrefabMain，如果说现在对 PrefabMain 进行了更改，马上就会体现到所有的继承了 PrefabMain 的Prefab上面去。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">PrefabA</span> : <span class="title">PrefabMain</span></div><div class="line">&#123;</div><div class="line">    PreafaB b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看了一下UNITY3D-2018的新Prefab系统，这里做一个记录。目前的情况看下来新Prefab系统还在不断的优化工作流，对于整体的概念应该是敲定下来了。未来应该是在编辑器层面上的优化和编辑细节上的调整。昨天看了UNITY的公开课。还是有点意思的，其中一个比较有趣的一个案例是某个客户由于场景层级太深，导致对某一个Prefab的递归修改卡了几十分钟最后官方出了一版优化到几分钟卡顿。这也从侧面说明了UNITY还是不断对编辑器进行改进的。对于我们来说应该也是一件很友好的事情。这东西需要总结的并不多，作为一个开箱即用的Prefab工作流，我认为UNITY官方处理的还是相当不错，作为美术或者非程序使用都是能很快上手的流程。&lt;br&gt;需要注意的是新Preafab的嵌套在Assetbundle中可不管你是不是嵌套或者变体，只要出现了多份Prefab就会出现多份资源。&lt;br&gt;第二个需要注意的是性能问题，你不能有太深的层级在你的prefab上。尽力告知美术让他多做prefab减少层级。&lt;br&gt;第三个就是尽量在非Assetbundle目录与Resource目录中使用新prefab系统，这样不会出现多份资源重复打包的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="NewPrefabSystem" scheme="http://vrast.cn/tags/NewPrefabSystem/"/>
    
  </entry>
  
  <entry>
    <title>XCode 插件自动签名</title>
    <link href="http://vrast.cn/posts/2dde2a0b/"/>
    <id>http://vrast.cn/posts/2dde2a0b/</id>
    <published>2019-02-28T01:25:59.000Z</published>
    <updated>2019-02-28T01:45:32.401Z</updated>
    
    <content type="html"><![CDATA[<p>最近用XCode写一些C++的测试，遇到一个问题，我升级过XCode所以现在看不到所有的旧插件了，网上找了一圈，需要手动创建证书然后重新对之前的插件进行签名。最后我找到一个插件可以很方便的对之前插件进行恢复。<br><a id="more"></a></p>
<h2 id="关闭XCode"><a href="#关闭XCode" class="headerlink" title="关闭XCode"></a>关闭XCode</h2><p>别忘记关XCode，不然过程中还会提醒关闭。</p>
<h2 id="使用Gem下载"><a href="#使用Gem下载" class="headerlink" title="使用Gem下载"></a>使用Gem下载</h2><p>Gem 是Mac自带的Ruby内建的功能，所以Mac用户也不必纠结什么是Gem.就是一个插件下载器，使用下面的命令安装好工具<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">install</span> update_xcode_plugins</div></pre></td></tr></table></figure></p>
<p>当然你同样可以通过github下载 <a href="https://github.com/inket/update_xcode_plugins" target="_blank" rel="external">https://github.com/inket/update_xcode_plugins</a> </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">keyle@xiaonians-MacBook-Pro  ~  sudo gem install update_xcode_plugins</div><div class="line">Password:</div><div class="line">Fetching: colorize-<span class="number">0.8</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Fetching: tins-<span class="number">1.20</span>.<span class="number">2</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Fetching: term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Fetching: inquirer-<span class="number">0.2</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Fetching: update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Parsing documentation <span class="keyword">for</span> colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Parsing documentation <span class="keyword">for</span> term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Done installing documentation <span class="keyword">for</span> colorize, tins, term-ansicolor, inquirer, update_xcode_plugins after <span class="number">1</span> seconds</div><div class="line"><span class="number">5</span> gems installed</div></pre></td></tr></table></figure>
<h2 id="查看本机现有XCode插件"><a href="#查看本机现有XCode插件" class="headerlink" title="查看本机现有XCode插件"></a>查看本机现有XCode插件</h2><p>使用 <code>update_xcode_plugins</code> 命令可以直接更新旧签名插件。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">keyle@xiaonians-MacBook-Pro  ~  update_xcode_plugins</div><div class="line">Found:</div><div class="line">-<span class="ruby"> Xcode (<span class="number">10.1</span>) [D7881182-AD0<span class="number">0</span>-<span class="number">4</span>C36-A94D-F45FC9B0CF85]: <span class="regexp">/Applications/</span>Xcode.app</span></div><div class="line"></div><div class="line">Plugins:</div><div class="line">-<span class="ruby"> AutoIndentWithSave (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> XToDo (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> RSImageOptimPlugin (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> Alcatraz (<span class="number">1.2</span>.<span class="number">1</span>)</span></div><div class="line">-<span class="ruby"> BBUDebuggerTuckAway (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> Auto-Importer (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> VVDocumenter-Xcode (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> OMQuickHelp (<span class="number">1.0</span>.<span class="number">1</span>)</span></div><div class="line">-<span class="ruby"> AutoHighlightSymbol (<span class="number">1.1</span>)</span></div><div class="line">-<span class="ruby"> OMColorSense (<span class="number">1.0</span>.<span class="number">1</span>)</span></div><div class="line"></div><div class="line">Updating...</div><div class="line"></div><div class="line">Finished! 🎉</div><div class="line"></div><div class="line">It seems that you have Xcode 8+ installed!</div><div class="line">Some plugins might not work on recent versions of Xcode because of library validation.</div><div class="line">See https://github.com/alcatraz/Alcatraz/issues/475</div><div class="line"></div><div class="line">Run `update_xcode_plugins --unsign` to fix this.</div></pre></td></tr></table></figure></p>
<p>在上面他提升我的某些插件可能会有问题需要使用 <code>update_xcode_plugins –unsign</code> 解决一下。<br>执行这条命令之后我忘记关XCode，按照提示关闭XCode后继续。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> keyle@xiaonians-MacBook-Pro  ~  update_xcode_plugins <span class="comment">--unsign</span></div><div class="line">Looking <span class="keyword">for</span> Xcode...</div><div class="line"></div><div class="line">Unsigning Xcode will make <span class="keyword">it</span> skip library validation allowing <span class="keyword">it</span> <span class="keyword">to</span> load plugins.</div><div class="line">However, an unsigned Xcode presents security risks, <span class="keyword">and</span> will be untrusted <span class="keyword">by</span> both Apple <span class="keyword">and</span> your system.</div><div class="line">This tool will create a backup <span class="keyword">and</span> allow you <span class="keyword">to</span> restore Xcode's signature <span class="keyword">by</span> <span class="built_in">running</span></div><div class="line">$ update_xcode_plugins <span class="comment">--restore</span></div><div class="line"></div><div class="line">Choose which Xcode you would like <span class="keyword">to</span> unsign (use arrows): Xcode (<span class="number">10.1</span>) [Signed]: /Applications/Xcode.app</div><div class="line">Unsign xcodebuild too?: Yes</div><div class="line"></div><div class="line">Unsigning...</div><div class="line"></div><div class="line">* Changing ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/MacOS (will be restored <span class="keyword">after</span>)</div><div class="line">* Restored ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/MacOS</div><div class="line"></div><div class="line">* Changing ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/Developer/usr/bin (will be restored <span class="keyword">after</span>)</div><div class="line">* Restored ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/Developer/usr/bin</div><div class="line">Finish</div></pre></td></tr></table></figure></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这应该是我安装插件以来最轻松愉快的体验了。</p>
<p><img src="/uploads/QQ20190228-094023@2x.png" alt="看到Window菜单下的PackageManager了"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用XCode写一些C++的测试，遇到一个问题，我升级过XCode所以现在看不到所有的旧插件了，网上找了一圈，需要手动创建证书然后重新对之前的插件进行签名。最后我找到一个插件可以很方便的对之前插件进行恢复。&lt;br&gt;
    
    </summary>
    
      <category term="XCode" scheme="http://vrast.cn/categories/XCode/"/>
    
    
      <category term="Plugins" scheme="http://vrast.cn/tags/Plugins/"/>
    
  </entry>
  
  <entry>
    <title>C# 4.0 - 7.0 新语法特性小结</title>
    <link href="http://vrast.cn/posts/594d3124/"/>
    <id>http://vrast.cn/posts/594d3124/</id>
    <published>2019-02-20T09:53:59.000Z</published>
    <updated>2019-02-26T01:03:34.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇总结一些 C# 4.0 - 7.0的语法特性。 如今都是距离5.xUnity盛行的时代都过去两年多了，该看一看新语法不然要落伍啦。</p>
</blockquote>
<p>UNITY版本与C#版本关系<br>Unity 5.5.4  自带的Mono也可以支持C# 6，在mcs.rsp文件中添加一行：-langversion:6即可。<br>Unity 2017.1 C# 6.0 试验性地支持新脚本运行时。This includes Mono 4.8 and IL2CPP with support for C# 6 and .NET 4.6<br>Unity 2018.1 C# 7.2 </p>
<p>总的来说新特性还是在2018的运行环境下比较稳定，所以建议在2018下再去放开使用。下面列出的特性基本上都可以在2018中使用。不能使用的部分已经做了标注,下面是正文:</p>
<a id="more"></a>
<h1 id="比较重要的一些特性"><a href="#比较重要的一些特性" class="headerlink" title="比较重要的一些特性"></a>比较重要的一些特性</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="comment">//---------静态引用，下面用到此命名空间下的函数可以直接调用---------- </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Test1</span></div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> Random random;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Level &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1</span>_000_000;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Hp =&gt; ++Level;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Program();</div><div class="line">            </div><div class="line">            <span class="comment">//------------新属性赋值--------------</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">            &#123;</div><div class="line">                p.PrintLog(p.Hp);</div><div class="line"><span class="comment">//                运行结果:</span></div><div class="line"><span class="comment">//                1000001</span></div><div class="line"><span class="comment">//                1000002</span></div><div class="line"><span class="comment">//                1000003</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">//------------新异常条件与$字符串拼接--------------</span></div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Test Expection"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception e) when (p.Hp == <span class="number">1000004</span>) <span class="comment">//新增条件设置 可以制定捕捉异常的条件</span></div><div class="line">            &#123;</div><div class="line">                WriteLine</div><div class="line">                (</div><div class="line">                    <span class="keyword">string</span>.Format(<span class="string">$"当前信息<span class="subst">&#123;e.Message&#125;</span>,hp为<span class="subst">&#123;p.Hp&#125;</span>"</span>) <span class="comment">//使用$符号即可使用花括号自定义拼接</span></div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">//------------?.空指判断--------------</span></div><div class="line">            p.PrintLog(p.random?.Next(<span class="number">0</span>,<span class="number">10</span>));<span class="comment">//这行代码并不会执行 因为 random为null ,使用 ?. 来控制当前函数是否执行</span></div><div class="line"></div><div class="line">            </div><div class="line">            <span class="comment">//-------------下面两行是等价的，您可以使用下划线代替参数传入，相应也获取不到变更对象-----------------</span></div><div class="line">            <span class="comment">//p.PrintObject(out var test_p);  现在可以直接在括号内定义一个想要传入的参数</span></div><div class="line">            p.PrintObject(<span class="keyword">out</span> _); </div><div class="line">            </div><div class="line"></div><div class="line">            <span class="comment">//-------局部函数----------</span></div><div class="line">            PrintLog(<span class="string">"直接调用下面的局部函数，使用局部函数优于使用lambda"</span>); <span class="comment">//局部函数并未有代码行数上的优先级</span></div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">PrintLog</span>(<span class="params"><span class="keyword">string</span> content</span>) </span>=&gt; WriteLine(content);</div><div class="line">            </div><div class="line">            <span class="comment">//-------使用return ref 减小开销----------</span></div><div class="line"><span class="comment">//            PrintLog(p.Avg(1,2).ToString());</span></div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 使用 ref 减少值类型的复制   在 C#7.3中实现</span></div><div class="line"><span class="comment">//        public ref float Avg(int a, int b)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//             float _avg = (a + b) / 2.0f;</span></div><div class="line"><span class="comment">//             return ref _avg;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        </div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintObject</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">object</span> obj</span>)</span></div><div class="line">        &#123;</div><div class="line">            obj = <span class="keyword">new</span> Program();</div><div class="line">            WriteLine(<span class="keyword">nameof</span>(obj)); <span class="comment">// 使用 nameof 系统关键字来或者当前变量名</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//简略定义函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintLog</span>(<span class="params"><span class="keyword">int</span>? content</span>) </span>=&gt; WriteLine(content); <span class="comment">//静态引用 System.Console 命名空间，直接调用 Console.WriteLine 简写为 WriteLine</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#元组分开列一下<br>元组和Lua,python,swift里的元组几乎大同小异。但是作为C#的最最重要的新工具还是着重测试一下。主要代码您可以直接参考下面列出的类，其中有一点没有描述，就是关于元组<code>== 运算符 </code> 的计算，他是从左到右依次比对的。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Test1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//-----元组的默认定义与访问方式--------</span></div><div class="line">            <span class="keyword">var</span> tuple_2 = (<span class="string">"content1"</span>,<span class="string">"content2"</span>);</div><div class="line">            Console.WriteLine(tuple_2.Item1 + tuple_2.Item2);</div><div class="line">            </div><div class="line">            <span class="comment">//同样的也可以像给变量起名一般自己定一个"变量名"</span></div><div class="line">            <span class="keyword">var</span> tuple_1 = (str1 : <span class="string">"content1"</span>,str2 : <span class="string">"content2"</span>);</div><div class="line">            Console.WriteLine(tuple_1.str1 + tuple_1.str2);</div><div class="line"></div><div class="line">            <span class="comment">//元组可以直接由函数返回</span></div><div class="line">            <span class="keyword">var</span> method_1 = Program.MethodTest();</div><div class="line">            Console.WriteLine(method_1.a + method_1.b);</div><div class="line">            </div><div class="line">            <span class="comment">//-----元组的解构-------</span></div><div class="line">            <span class="keyword">var</span> testCls = <span class="keyword">new</span> MyClass&#123; A = <span class="number">1</span>,B = <span class="number">2</span>,C = <span class="number">3</span>&#125;;</div><div class="line">            <span class="keyword">var</span>(args1, args2, args3) = testCls;</div><div class="line">            Console.WriteLine(<span class="string">$"当前args1:<span class="subst">&#123;args1&#125;</span>,args2:<span class="subst">&#123;args2&#125;</span>,args3:<span class="subst">&#123;args3&#125;</span>"</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//元组解构的优先级默认如果本类中有实现则执行本类内部实现，如果没有则执行外部，如扩展函数</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b) MethodTest()</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> t = (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> A &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> B &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> C &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        </div><div class="line"><span class="comment">//        public void Deconstruct(out int a,out int b,out int c)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//            a = A;</span></div><div class="line"><span class="comment">//            b = B;</span></div><div class="line"><span class="comment">//            c = C;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extension4Tuple</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Deconstruct</span>(<span class="params"><span class="keyword">this</span> MyClass cls, <span class="keyword">out</span> <span class="keyword">int</span> a, <span class="keyword">out</span> <span class="keyword">int</span> b, <span class="keyword">out</span> <span class="keyword">int</span> c</span>)</span></div><div class="line">        &#123;</div><div class="line">            a = <span class="number">10</span>;</div><div class="line">            b = <span class="number">11</span>;</div><div class="line">            c = <span class="number">12</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tuples" target="_blank" rel="external">微软文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇总结一些 C# 4.0 - 7.0的语法特性。 如今都是距离5.xUnity盛行的时代都过去两年多了，该看一看新语法不然要落伍啦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UNITY版本与C#版本关系&lt;br&gt;Unity 5.5.4  自带的Mono也可以支持C# 6，在mcs.rsp文件中添加一行：-langversion:6即可。&lt;br&gt;Unity 2017.1 C# 6.0 试验性地支持新脚本运行时。This includes Mono 4.8 and IL2CPP with support for C# 6 and .NET 4.6&lt;br&gt;Unity 2018.1 C# 7.2 &lt;/p&gt;
&lt;p&gt;总的来说新特性还是在2018的运行环境下比较稳定，所以建议在2018下再去放开使用。下面列出的特性基本上都可以在2018中使用。不能使用的部分已经做了标注,下面是正文:&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Dispose接口的正确使用方法</title>
    <link href="http://vrast.cn/posts/6de8b164/"/>
    <id>http://vrast.cn/posts/6de8b164/</id>
    <published>2019-02-20T07:27:25.000Z</published>
    <updated>2019-02-21T13:14:24.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们知道在代码里自己写 Dispose 来释放一些资源。但是你真的用对了吗 ？ 本篇介绍一些不容易注意到的 GC 相关知识 。</p>
</blockquote>
<a id="more"></a>
<h1 id="到底什么时候需要使用到-IDispose-？"><a href="#到底什么时候需要使用到-IDispose-？" class="headerlink" title="到底什么时候需要使用到 IDispose ？"></a>到底什么时候需要使用到 IDispose ？</h1><p>当前类中出现 IO 操作。或者其他 跨语言调用,窗口和网络连接 之的非托管资源调用，这时才需要自己是实现一个IDispose 接口。其他的时候你并不需要去实现这样一个接口。我的做法是一般的类继承一个 IReset 接口，这个接口内只包含一个 Reset 函数 .<br>Dispose 接口是一个显示的调用，如果我们没有写这个接口，运行时他会在执行析构函数的时候清理资源。</p>
<h1 id="了解析构函数-终结器"><a href="#了解析构函数-终结器" class="headerlink" title="了解析构函数(终结器)"></a>了解析构函数(终结器)</h1><p>在使用Dispose 接口的同时 你或许同时会用到一个终结器。打个比方 如果你忘记显示调用 Dispose 函数的时候，程序还是会帮你清除非托管资源。</p>
<p>先观察以下析构函数<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Car</span> </div><div class="line">&#123;</div><div class="line">    ~Car()  <span class="comment">// finalizer</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// cleanup statements...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很简单，他等价于下面的代码</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finalize</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">try</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// Cleanup statements...  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">finally</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">base</span>.Finalize();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你应该已经观察到这一行代码被隐式调用了,这行代码的意义是将当前运行时 Finalize 队列中创建一个条目，等待回收器来处理该队列。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">base</span>.Finalize();</div></pre></td></tr></table></figure>
<h1 id="正确的-“Dispose”"><a href="#正确的-“Dispose”" class="headerlink" title="正确的 “Dispose”"></a>正确的 “Dispose”</h1><p>我们再观察下面的代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 这里实现了IDispose中的 Dispose方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//执行资源释放 xxxxxxxx</span></div><div class="line"></div><div class="line">        <span class="comment">//告诉GC此对象的Finalize方法不再需要调用</span></div><div class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~MyClass()</div><div class="line">    &#123;</div><div class="line">        Dispose();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面我们使用using使用这个类</span></div><div class="line"><span class="keyword">using</span>(MyClass s = <span class="keyword">new</span> MyClass())&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>上面我们使用了 <code>GC.SuppressFinalize(this);</code> 函数，他会告诉GC的Finalize队列中移除当前，不必在执行 <code>Finalize()</code></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>在非托管资源操作中才去重写dispose接口，否则使用其他自定义接口去实现 Reset 操作</li>
<li>在非托管资源操作中才去重写析构函数，否则空析构函数也会造成不必要的性能损失</li>
<li>重写dispose接口的同时别忘了重写析构函数</li>
</ol>
<h1 id="文外话"><a href="#文外话" class="headerlink" title="文外话"></a>文外话</h1><p>在 C# 语言里对析构函数与终结器的描述似乎是同一个东西，这让我有一点困惑。我查询了一些论文他们是这样说的。如果你感兴趣也可以看一下</p>
<p>In the C# world the terms “destructor” and “finalizer” seem to be used pretty much interchangeably, which I suspect is because the C# specification describes the non-deterministic cleanup functionality using the word “destructor”, whereas the CLR documentation always uses the word “finalizer”, so within the realms of C# they mean the same thing.</p>
<p>However, in the C++/CLI specification there is a distinction made between the two. It allows both deterministic and non-deterministic cleanup, and uses the term “destructor” for the deterministic functionality and “finalizer” for the non-deterministic functionality:</p>
<p>在C＃世界术语“析构函数”和“终结”似乎要使用pretty多互换，我怀疑是因为C＃规范用字“析构函数”，描述了非确定性的清理功能，而CLR的文档始终使用单词“终结”，所以C＃的领域内，他们的意思是一样的。</p>
<p>然而，在C / CLI规范有两者之间作出区分。它同时允许确定性和非确定性的清理，并使用该确定的功能的非确定性的功能的术语“析构”和“终结”：</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/destructors" target="_blank" rel="external">Microsoft 编程指南</a></p>
<p><a href="http://www.it1352.com/382928.html" target="_blank" rel="external">析构函数和终结器的区别？(The difference between a destructor and a finalizer?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们知道在代码里自己写 Dispose 来释放一些资源。但是你真的用对了吗 ？ 本篇介绍一些不容易注意到的 GC 相关知识 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# language version history</title>
    <link href="http://vrast.cn/posts/d763b1b/"/>
    <id>http://vrast.cn/posts/d763b1b/</id>
    <published>2018-10-08T07:01:13.000Z</published>
    <updated>2018-10-08T06:45:48.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>These are the versions of C# known about at the time of this writing:</p>
</blockquote>
<ul>
<li>C# 1.0 released with .NET 1.0 and VS2002 (January 2002)</li>
<li>C# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call Dispose on IEnumerators which implemented IDisposable. A few other small features.</li>
<li>C# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, iterator blocks</li>
<li>C# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (var), query expressions</li>
<li>C# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (dynamic), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters</li>
<li>C# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, caller info attributes. Breaking change: loop variable closure.</li>
<li>C# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, await in catch and finally, extension Add methods in collection initializers.</li>
<li>C# 7.0 released with .NET 4.7 and VS2017 (March 2017) Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline out parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.</li>
<li>C# 7.1 released with VS2017 v15.3 (August 2017) New features: async main, tuple member name inference, default expression, pattern matching with generics.</li>
<li>C# 7.2 released with VS2017 v15.5 (November 2017) New features: private protected access modifier, Span<t>, aka interior pointer, aka stackonly struct, everything else.</t></li>
<li>C# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and unmanaged generic type constraints. ref reassignment. Unsafe improvements: stackalloc initialization, unpinned indexed fixed buffers, custom fixed statements. Improved overloading resolution. Expression variables in initializers and queries. == and != defined for tuples. Auto-properties’ backing fields can now be targeted by attributes.</li>
<li>C# 8.0 currently in preview. Expected new features: Non-nullable reference-types, IAsyncEnumerable<t> support, Ranges, and default interface methods.</t></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;These are the versions of C# known about at the time of this writing:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;C# 1.0 released with .NET 1
    
    </summary>
    
      <category term="SCRIPT" scheme="http://vrast.cn/categories/SCRIPT/"/>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Timeline实践</title>
    <link href="http://vrast.cn/posts/cdaabbe3/"/>
    <id>http://vrast.cn/posts/cdaabbe3/</id>
    <published>2018-09-25T08:52:13.000Z</published>
    <updated>2018-10-25T01:22:47.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>如果您想动手尝试可以在AssetStore中获取到<a href="https://assetstore.unity.com/packages/essentials/default-playables-95266" target="_blank" rel="external">🔗 示例源码</a>，在 Default Playables 包中展示了大量的<strong>Playable API</strong>案例。在这里我们会挑比较有代表性的进行讲解。在案例中全部都是结合 <strong>Timeline</strong> 使用，由此可窥 “Playables API” 真是香饽饽，堪称万金油的存在。既能单独作为树型动画播放器使用又能够被 <strong>Timeline</strong> 所结合，不写代码也能做出复杂的游戏逻辑。当然 <strong>Timeline</strong> 同样适合处理各种动画需求等 如过场剧情，封面动画，甚至可以制作电影。本篇将会带大家从零开始使用Timeline进行剧情的编写，并且对相关 概念 以及 api 进行讲解。</p>
<a id="more"></a>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>Timeline</strong> 编辑器是一个什么样的存在 ？ 可以看作是强化版的 Animation 编辑器。他支持同时操控 N 个属性，就像是制作 flash 电影一样。在使用上策划编辑的时候不需要考虑脚本的实现只需要调用就行，程序这边不需要考虑调用时序只需要实现API并提供给策划即可。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>.. 未完成 待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;如果您想动手尝试可以在AssetStore中获取到&lt;a href=&quot;https://assetstore.unity.com/packages/essentials/default-playables-95266&quot;&gt;🔗 示例源码&lt;/a&gt;，在 Default Playables 包中展示了大量的&lt;strong&gt;Playable API&lt;/strong&gt;案例。在这里我们会挑比较有代表性的进行讲解。在案例中全部都是结合 &lt;strong&gt;Timeline&lt;/strong&gt; 使用，由此可窥 “Playables API” 真是香饽饽，堪称万金油的存在。既能单独作为树型动画播放器使用又能够被 &lt;strong&gt;Timeline&lt;/strong&gt; 所结合，不写代码也能做出复杂的游戏逻辑。当然 &lt;strong&gt;Timeline&lt;/strong&gt; 同样适合处理各种动画需求等 如过场剧情，封面动画，甚至可以制作电影。本篇将会带大家从零开始使用Timeline进行剧情的编写，并且对相关 概念 以及 api 进行讲解。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Math Symbols in Markdown</title>
    <link href="http://vrast.cn/posts/183fa821/"/>
    <id>http://vrast.cn/posts/183fa821/</id>
    <published>2018-09-20T06:29:47.000Z</published>
    <updated>2018-09-20T07:20:39.128Z</updated>
    
    <content type="html"><![CDATA[<p>之前输入数学公式的一直用截图 自觉用户体验很差，最近发现用的这个主题带了好用的数学函数辅助，便一发不可收拾。顺便推荐一下我用的主题是<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant-hexo github</a> ,这里记录一下数学符的用法。</p>
<a id="more"></a>
<h1 id="maupassant-hexo的数学函数开启方式"><a href="#maupassant-hexo的数学函数开启方式" class="headerlink" title="maupassant-hexo的数学函数开启方式"></a>maupassant-hexo的数学函数开启方式</h1><p>其他的主题可能方式不一样 具体需要对照文档</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Math Equation</div><div class="line"></div><div class="line">Add</div><div class="line"></div><div class="line">mathjax: true</div><div class="line">in Hexo's _config.yml.</div><div class="line"></div><div class="line">In the post which you would like to use math equation, add mathjax: true in the front-matter. For example:</div><div class="line"></div><div class="line">title: Test Math</div><div class="line">date: 2016-04-05 14:16:00</div><div class="line">categories: math</div><div class="line">mathjax: true</div><div class="line">---</div><div class="line">The default math delimiters are $$...$$ and \\[...\\] for displayed mathematics, and $...$ and \\(...\\) for in-line mathematics.</div><div class="line"></div><div class="line">However, if your post contains dollar signs ($), and they appear often in non-mathematical parts, in other words, you want to use $ as dollar sign not inline math delimiter, please add</div><div class="line"></div><div class="line">mathjax2: true</div><div class="line">in Hexo's _config.yml instead of mathjax: true. Correspondingly, add mathjax2: true to the front-matter of the post in which you would like to use math equation.</div><div class="line"></div><div class="line">See the example.</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180920-143741.png" alt="添加标签则可用"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$</div><div class="line">    \\beta</div><div class="line">    \\alpha</div><div class="line">$</div></pre></td></tr></table></figure>
<p>效果如下：<br>$<br>    \beta<br>    \alpha<br>$ </p>
<p>或者这样以居中显示：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\[\\beta \\alpha\\]</div></pre></td></tr></table></figure></p>
<p>\[\beta \alpha\]</p>
<h1 id="数学符"><a href="#数学符" class="headerlink" title="数学符"></a>数学符</h1><p>上面演示的 $\beta$ 之类的数学符号列表如下：</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\cos$</td>
<td>\cos</td>
</tr>
<tr>
<td>$\sin$</td>
<td>\sin</td>
</tr>
<tr>
<td>$\lim$</td>
<td>\lim</td>
</tr>
<tr>
<td>$\exp$</td>
<td>\exp</td>
</tr>
<tr>
<td>$\to$</td>
<td>\to</td>
</tr>
<tr>
<td>$\infty$</td>
<td>\infty</td>
</tr>
<tr>
<td>$\equiv$</td>
<td>\equiv</td>
</tr>
<tr>
<td>$\bmod$</td>
<td>\bmod</td>
</tr>
<tr>
<td>$\times$</td>
<td>\times</td>
</tr>
</tbody>
</table>
<h2 id="幂与指数"><a href="#幂与指数" class="headerlink" title="幂与指数"></a>幂与指数</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$k_{n+1}$</td>
<td>k_{n+1}</td>
</tr>
<tr>
<td>$n^2$</td>
<td>n^2</td>
</tr>
<tr>
<td>$k_n^2$</td>
<td>k_n^2</td>
</tr>
</tbody>
</table>
<h2 id="分数与二项式"><a href="#分数与二项式" class="headerlink" title="分数与二项式"></a>分数与二项式</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\frac{n!}{k!(n-k)!}$</td>
<td>\frac{n!}{k!(n-k)!}</td>
</tr>
<tr>
<td>$\binom{n}{k}$</td>
<td>\binom{n}{k}</td>
</tr>
<tr>
<td>$\frac{\frac{x}{1}}{x - y}$</td>
<td>\frac{\frac{x}{1}}{x - y}</td>
</tr>
<tr>
<td>$^3/_7$</td>
<td>^3/_7</td>
</tr>
</tbody>
</table>
<h2 id="根"><a href="#根" class="headerlink" title="根"></a>根</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sqrt{k}$</td>
<td>\sqrt{k}</td>
</tr>
<tr>
<td>$\sqrt[n]{k}$</td>
<td>\sqrt[n]{k}</td>
</tr>
</tbody>
</table>
<h2 id="运算必须符"><a href="#运算必须符" class="headerlink" title="运算必须符"></a>运算必须符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sum_{i=1}^{10} t_i$</td>
<td>\sum_{i=1}^{10} t_i</td>
</tr>
<tr>
<td>$\int_0^\infty \mathrm{e}^{-x}\,\mathrm{d}x$</td>
<td>\int_0^\infty \mathrm{e}^{-x}\,\mathrm{d}x</td>
</tr>
<tr>
<td>$\sum$</td>
<td>\sum</td>
</tr>
<tr>
<td>$\prod$</td>
<td>\prod</td>
</tr>
<tr>
<td>$\coprod$</td>
<td>\coprod</td>
</tr>
<tr>
<td>$\bigoplus$</td>
<td>\bigoplus</td>
</tr>
<tr>
<td>$\bigotimes$</td>
<td>\bigotimes</td>
</tr>
<tr>
<td>$\bigodot$</td>
<td>\bigodot</td>
</tr>
<tr>
<td>$\bigcup$</td>
<td>\bigcup</td>
</tr>
<tr>
<td>$\bigcap$</td>
<td>\bigcap</td>
</tr>
<tr>
<td>$\biguplus$</td>
<td>\biguplus</td>
</tr>
<tr>
<td>$\bigsqcup$</td>
<td>\bigsqcup</td>
</tr>
<tr>
<td>$\bigvee$</td>
<td>\bigvee</td>
</tr>
<tr>
<td>$\bigwedge$</td>
<td>\bigwedge</td>
</tr>
<tr>
<td>$\int$</td>
<td>\int</td>
</tr>
<tr>
<td>$\oint$</td>
<td>\oint</td>
</tr>
<tr>
<td>$\iint$</td>
<td>\iint</td>
</tr>
<tr>
<td>$\iiint$</td>
<td>\iiint</td>
</tr>
<tr>
<td>$\idotsint$</td>
<td>\idotsint</td>
</tr>
<tr>
<td>$\sum_{\substack{0&lt;i&lt;m\0&lt;j&lt;n}} P(i, j)$</td>
<td>\sum_{\substack{0&lt;i&lt;m\0&lt;j&lt;n}} P(i, j)</td>
</tr>
<tr>
<td>$\int\limits_a^b$</td>
<td>\int\limits_a^b</td>
</tr>
<tr>
<td>$a’$ $a^{\prime}$</td>
<td>a` a^{\prime}</td>
</tr>
<tr>
<td>$a’’$</td>
<td>a’’</td>
</tr>
<tr>
<td>$\hat{a}$</td>
<td>hat{a}</td>
</tr>
<tr>
<td>$\bar{a}$</td>
<td>\bar{a}</td>
</tr>
<tr>
<td>$\grave{a}$</td>
<td>\grave{a}</td>
</tr>
<tr>
<td>$\acute{a}$</td>
<td>\acute{a}</td>
</tr>
<tr>
<td>$\dot{a}$</td>
<td>\dot{a}</td>
</tr>
<tr>
<td>$\ddot{a}$</td>
<td>\ddot{a}</td>
</tr>
<tr>
<td>$\not{a}$</td>
<td>\not{a}</td>
</tr>
<tr>
<td>$\mathring{a}$</td>
<td>\mathring{a}</td>
</tr>
<tr>
<td>$\overrightarrow{AB}$</td>
<td>\overrightarrow{AB}</td>
</tr>
<tr>
<td>$\overleftarrow{AB}$</td>
<td>\overleftarrow{AB}</td>
</tr>
<tr>
<td>$a’’’$</td>
<td>a’’’</td>
</tr>
<tr>
<td>$\overline{aaa}$</td>
<td>\overline{aaa}</td>
</tr>
<tr>
<td>$\check{a}$</td>
<td>\check{a}</td>
</tr>
<tr>
<td>$\vec{a}$</td>
<td>\vec{a}</td>
</tr>
<tr>
<td>$\underline{a}$</td>
<td>\underline{a}</td>
</tr>
<tr>
<td>$\color{red}x$</td>
<td>\color{red}x</td>
</tr>
<tr>
<td>$\pm$</td>
<td>\pm</td>
</tr>
<tr>
<td>$\mp$</td>
<td>\mp</td>
</tr>
<tr>
<td>$\int y \mathrm{d}x$</td>
<td>\int y \mathrm{d}x</td>
</tr>
<tr>
<td>$\,$</td>
<td>\,</td>
</tr>
<tr>
<td>$\:$</td>
<td>\:</td>
</tr>
<tr>
<td>$\;$</td>
<td>\;</td>
</tr>
<tr>
<td>$!$</td>
<td>!</td>
</tr>
<tr>
<td>$\int y\, \mathrm{d}x$</td>
<td>\int y\, \mathrm{d}x</td>
</tr>
<tr>
<td>$\dots$</td>
<td>\dots</td>
</tr>
<tr>
<td>$\ldots$</td>
<td>\ldots</td>
</tr>
<tr>
<td>$\cdots$</td>
<td>\cdots</td>
</tr>
<tr>
<td>$\vdots$</td>
<td>\vdots</td>
</tr>
<tr>
<td>$\ddots$</td>
<td>\ddots</td>
</tr>
</tbody>
</table>
<h2 id="括弧"><a href="#括弧" class="headerlink" title="括弧"></a>括弧</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(a) $</td>
<td>(a)</td>
</tr>
<tr>
<td>$[a]  $</td>
<td>[a]</td>
</tr>
<tr>
<td>$a  $</td>
<td>{a}</td>
</tr>
<tr>
<td>$\langle f \rangle  $</td>
<td>\langle f \rangle</td>
</tr>
<tr>
<td>$\lfloor f \rfloor $</td>
<td>\lfloor f \rfloor</td>
</tr>
<tr>
<td>$\lceil f \rceil$</td>
<td>\lceil f \rceil</td>
</tr>
<tr>
<td>$\ulcorner f \urcorner$</td>
<td>\ulcorner f \urcorner</td>
</tr>
</tbody>
</table>
<p><a href="http://csrgxtu.github.io/2015/03/20/Writing-Mathematic-Fomulars-in-Markdown/" target="_blank" rel="external">🔗 Writing Mathematic Fomulars in Markdown – Archer Reilly</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=fcrespo82.markdown-table-formatter#overview" target="_blank" rel="external">🔗 Markdown Table Formatter</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前输入数学公式的一直用截图 自觉用户体验很差，最近发现用的这个主题带了好用的数学函数辅助，便一发不可收拾。顺便推荐一下我用的主题是&lt;a href=&quot;https://github.com/tufu9441/maupassant-hexo&quot;&gt;maupassant-hexo github&lt;/a&gt; ,这里记录一下数学符的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://vrast.cn/categories/Markdown/"/>
    
    
      <category term="Math" scheme="http://vrast.cn/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Playables API实践(下)</title>
    <link href="http://vrast.cn/posts/323c9fde/"/>
    <id>http://vrast.cn/posts/323c9fde/</id>
    <published>2018-09-19T09:33:28.000Z</published>
    <updated>2018-09-28T02:34:40.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上篇给大家介绍了 “Playables API” 的使用方法与背后的意义，本篇将会进一步带大家深入其中。 本篇重点还是会放到  “Playables API” 上，不会对 <strong>Timeline</strong> 进行集中讲解，但是搞明白了 “Playables API” 也就意味着理解了 <strong>Timeline</strong> 最复杂的部分，到时候学起来也会非常的快。</p>
</blockquote>
<a id="more"></a>
<h1 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h1><p>在本篇开始前我们先快速的回顾一下上篇的内容：</p>
<ol>
<li><p>“Playables API” 的意义 ？<br>答：替换Legacy动画系统，并兼容Timeline 。</p>
</li>
<li><p>如何创建 “Playables 树 ？</p>
</li>
</ol>
<p>答：五行代码就可以快速创建！</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable = AnimationClipPlayable.Create(playableGraph, clip);</div><div class="line">playableOutput.SetSourcePlayable(clipPlayable);</div><div class="line"></div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<ol>
<li>没有图形化界面时我们该如何记忆节点链接方式 ？<br>答：右输入(数量) 左输出(数量)，根节点有左边口，普通节点两边有 。</li>
</ol>
<h1 id="正文：更复杂的API运用方式"><a href="#正文：更复杂的API运用方式" class="headerlink" title="正文：更复杂的API运用方式"></a>正文：更复杂的API运用方式</h1><h2 id="使用-Animation-Layer"><a href="#使用-Animation-Layer" class="headerlink" title="使用 Animation Layer"></a>使用 Animation Layer</h2><p>上一篇我们提到使用 XXXMixerPlayable 可以用来融合多个动画/音频等。那么想在一个角色的身上同时播两个或多个互不干扰的动画该如何处理呢？ </p>
<p>想必大家都想到了，没错，就是使用 Animation Layer (动画层) 的技术。在 Animator 中常使用 Avatar Mask 来设置不同部位的遮罩，让其他部分的动画各司其职。</p>
<p>现在我们来看一看 Animation Layer 技术如何在 “Playerable API” 中使用吧。</p>
<p><img src="/uploads/bodylowermask.png" alt="第一步先制作遮罩，关闭身体上半的动画控制"></p>
<p>代码案例如下，您可以看见这里与上一篇我们讲到的 <strong>AnimationMixerPlayable</strong> 是不是保持了高度一致 ？ 这可不是架构的功劳，而是得益于代码风格的统一。无论是在 <strong>AnimationMixerPlayable</strong> 或 <strong>AnimationLayerMixerPlayable</strong> 其中都有统一的静态函数 <code>Create</code> ,良好的代码风格能让阅读者轻松掌握代码规律，从而减少阅读时间 。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> AnimationClip clip1;</div><div class="line"><span class="keyword">public</span> AnimationClip clip2;</div><div class="line"><span class="keyword">private</span> Animator _animator;</div><div class="line"><span class="keyword">private</span> AnimationLayerMixerPlayable mixerPlayable;</div><div class="line"><span class="keyword">public</span>  <span class="keyword">float</span> weight = <span class="number">.5</span>f;</div><div class="line"></div><div class="line"><span class="keyword">public</span> AvatarMask LowerMask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> PlayableGraph playableGraph;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line">    <span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line">    mixerPlayable = AnimationLayerMixerPlayable.Create(playableGraph, <span class="number">2</span>);</div><div class="line">    mixerPlayable.SetLayerMaskFromAvatarMask(<span class="number">1</span>,LowerMask);<span class="comment">//设置遮罩到1层</span></div><div class="line">    </div><div class="line">    playableOutput.SetSourcePlayable(mixerPlayable);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line">    <span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line">    </div><div class="line">    mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置权重1</span></div><div class="line">    mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置权重1</span></div><div class="line">    </div><div class="line">    playableGraph.Play();</div><div class="line">    </div><div class="line">    GraphVisualizerClient.Show(playableGraph);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意上面有一些不同与之前的看到的 <strong>AnimationMixerPlayable</strong> ，这里连接的两个动画权重均为1.为什么不是 0.5 与 0.5 ?<br>因为现在是同时播放不同于融合。融合需要两种动画过渡权重，而分层则是将模型分为两个区间，0区间播放Clip1，1区间播放Clip2，这是完全同步又独立的。</p>
<p><img src="/uploads/QQ20180927-105649-HD.gif" alt="效果图：上身播放跳跃，下身播放跑动"></p>
<h2 id="动态添加动画"><a href="#动态添加动画" class="headerlink" title="动态添加动画"></a>动态添加动画</h2><p>之前我们使用<strong>Animator</strong>的时候需要将所有使用到的动画都加入其中。现在我们使用 <strong>ConnectInput &amp; DisconnectInput</strong> API 就能轻易的切换动画。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</div><div class="line">    &#123;</div><div class="line">        mixerPlayable.DisconnectInput(<span class="number">0</span>);</div><div class="line">        <span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip3);</div><div class="line">        mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180927-120130-HD.gif" alt="效果图：上身切换到胜利动画，下身播放跑动"></p>
<h3 id="动态切换的优化"><a href="#动态切换的优化" class="headerlink" title="动态切换的优化"></a>动态切换的优化</h3><p>刚才我们实现了动态的切换动画。效果是达到了，可是动画是硬过渡。如果现在只有<code>Connect  &amp; Disconnect</code>接口那么API真的无法帮我们达到动画的融合过渡！<br>现在我们现在来优化一下这段动画硬切的过程，使其达到融合过渡的效果(淡入淡出)。</p>
<h4 id="方式一-使用AnimationMixerPlayable-API"><a href="#方式一-使用AnimationMixerPlayable-API" class="headerlink" title="方式一 使用AnimationMixerPlayable API"></a>方式一 使用AnimationMixerPlayable API</h4><p>使用动画融合节点控制权重实现动画融合，使用这种方式需要实现一个自定义Playable，以list作为容器才能实现复用，否则就是hardcode了 。下面代码展示了最简方式使用融合节点。<br><img src="/uploads/QQ20180927-163146-HD.gif" alt="效果图：上身融合跳跃与胜利动画"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mixerPlayable = AnimationMixerPlayable.Create(layerMixerPlayable.GetGraph(),<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"><span class="keyword">var</span> clipPlayable3 = AnimationClipPlayable.Create(playableGraph, clip3);</div><div class="line"></div><div class="line">mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable3,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">0</span>,mixerPlayable,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<h4 id="方式二-使用Animator"><a href="#方式二-使用Animator" class="headerlink" title="方式二 使用Animator"></a>方式二 使用Animator</h4><p><img src="/uploads/QQ20180927-170717.png" alt="效果图：创建融合状态机"><br>同样的我们使用融合状态机实现这个过渡效果。这种方式(Animator+PlayableAPI))让策划或者美术配置也是一种不错的选择。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">animatorController = AnimatorControllerPlayable.Create(layerMixerPlayable.GetGraph(), animationController);</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"></div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">0</span>,animatorController,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180927-170915-HD.gif" alt="效果图：上身融合跳跃与胜利动画"></p>
<h4 id="方式三-纯Playable-API"><a href="#方式三-纯Playable-API" class="headerlink" title="方式三 纯Playable API"></a>方式三 纯Playable API</h4><p>下面我们要介绍的这种过渡模式是纯代码实现，类似与lengcy api里的Animation CrossFade. 原理就是利用<code>Connect  &amp; Disconnect</code> 动态开关节点实现过渡，完毕后重新连接回来。具体实现方式可参考 <strong>方式一</strong></p>
<h2 id="使用Bone-IK"><a href="#使用Bone-IK" class="headerlink" title="使用Bone IK"></a>使用Bone IK</h2><p><del> 现在我们再来看看更高级的用法 骨骼IK动画。如果我们需要做一些更逼真的效果IK技术是少不了的。为了方便展示 我们在这边Clone一下代码。</del></p>
<p>在我写本篇的时候我发现官方在 2018.8.29日 发过关于Playable API 调用IK动画的范例，这里就再重复的赘述。下面是原文链接 <a href="http://forum.china.unity3d.com/thread-32814-1-1.html" target="_blank" rel="external">🔗 [技术] 详解Animation C# Jobs</a></p>
<p>您可以直接克隆下面的代码范例中检验效果。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clone https:<span class="comment">//github.com/KeyleXiao/animation-jobs-samples.git</span></div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总体而言Playable API提供了更低层的操作方式，对于使用者的要求更高。如果您现在想要在项目中实践建议先不要用高级特性(ik部分)，因为这部分的功能目前还是实验性功能，API的相关文档并不完善。使用动画的控制API进行 Lengacy Animation的替换工作还是很有意义，不仅在与效率，与Timeline结合使用更能发挥出事半功倍的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上篇给大家介绍了 “Playables API” 的使用方法与背后的意义，本篇将会进一步带大家深入其中。 本篇重点还是会放到  “Playables API” 上，不会对 &lt;strong&gt;Timeline&lt;/strong&gt; 进行集中讲解，但是搞明白了 “Playables API” 也就意味着理解了 &lt;strong&gt;Timeline&lt;/strong&gt; 最复杂的部分，到时候学起来也会非常的快。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANIMATION" scheme="http://vrast.cn/tags/ANIMATION/"/>
    
  </entry>
  
  <entry>
    <title>GPUSkinning</title>
    <link href="http://vrast.cn/posts/fa938638/"/>
    <id>http://vrast.cn/posts/fa938638/</id>
    <published>2018-09-17T08:04:05.000Z</published>
    <updated>2018-09-21T07:32:22.331Z</updated>
    
    <content type="html"><![CDATA[<p>GPUSkinning 教程大纲(UNITY3D)<br>节一. 原理</p>
<ol>
<li>动画：理解骨骼动画的运作方式</li>
<li>模型：理解美术的制作流程</li>
<li>骨骼：理解骨骼动画以及背后的数学意义</li>
</ol>
<p>节二. 实践</p>
<ol>
<li>技术背景</li>
<li>使用GPUSkinning</li>
<li>工作原理(重点)</li>
<li>实际效果</li>
<li>其他可以同时进行的优化方案</li>
</ol>
<a id="more"></a>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="动画：骨骼动画的运作方式"><a href="#动画：骨骼动画的运作方式" class="headerlink" title="动画：骨骼动画的运作方式"></a>动画：骨骼动画的运作方式</h2><p>让们从轻松一点的内容开始本篇教程吧。</p>
<p>　　在的游戏中，骨骼动画的基础是关键帧技术，们先重温一下关键帧技术。</p>
<p>比较有代表性的是<strong>帧动画</strong>：们将一段较长的动作分解成几个关键帧，然后基于此进行动画的制作。即使现在们使用的工具更新换代，制作动画的思路还是大致如此，拆分与过渡。所有的工具都是帮们自动完善其中的细节。</p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNjg4NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<p><strong>Skinned Mesh</strong>：中文一般称作骨骼蒙皮动画，正如其名，这种动画中包含骨骼（ Bone ）和蒙皮 (Skinned Mesh) 两个部分， Bone 的层次结构和关节动画类似， Mesh 则和关节动画不同：关节动画中是使用多个分散的 Mesh, 而 Skinned Mesh 中 Mesh 是一个整体，也就是说只有一个 Mesh, 实际上如果没有骨骼让 Mesh 运动变形， Mesh 就和静态模型一样了。 Skinned Mesh 技术的精华在于蒙皮，所谓的皮并不是模型的贴图（也许会有人这么想过吧），而是 Mesh 本身，蒙皮是指将 Mesh 中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。 Skinned Mesh 这个词从字面上理解似乎是有皮的模型，哦，如果贴图是皮，那么普通静态模型不也都有吗？所以觉得应该理解为具有蒙皮信息的 Mesh 或可当做皮肤用的 Mesh ，这个皮肤就是 Mesh 。而为了有皮肤功能， Mesh 还需要蒙皮信息，即 Skin 数据，没有 Skin 数据就是一个普通的静态 Mesh 了。Skin 数据决定顶点如何绑定到骨骼上。顶点的 Skin 数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重(weight) ，另外</p>
<p><strong>Bone</strong>:对于每块骨骼还需要骨骼偏移矩阵 (BoneOffsetMatrix) 用来将顶点从 Mesh 空间变换到骨骼空间。骨骼控制蒙皮运动，而骨骼本身的运动呢？当然是动画数据了。每个关键帧中包含时间和骨骼运动信息，运动信息可以用一个矩阵直接表示骨骼新的变换，也可用四元数表示骨骼的旋转，也可以随便自己定义什么只要能让骨骼动就行。除了使用编辑设定好的动画帧数据，也可以使用物理计算对骨骼进行实时控制。</p>
<p><strong>UNITY3D中的Skinned Mesh Renderer组件</strong>:UNITY3D在导入模型的时候自动会给模型附加<strong>蒙皮网格(Skinned Mesh Renderer)</strong>，使用Unity骨骼人物的主要优势是可以使骨骼受到物理影响，譬如使用角色布娃娃。如下图所示<strong>Skinned Mesh Renderer</strong>会自动关联其对应的骨骼。</p>
<p><img src="/uploads/WX20180918-155553.png" alt=""></p>
<h2 id="模型：理解美术的制作流程"><a href="#模型：理解美术的制作流程" class="headerlink" title="模型：理解美术的制作流程"></a>模型：理解美术的制作流程</h2><p>　们在本文中主要讨论在UNITY3D内的实现方式。在UNITY中常用T-Pose居多。 T-Pose方便们对应骨骼与蒙皮方便校验表现与骨骼位置不一致的地方。对于每个骨骼，美术在建模的时候就进行了绑定，对于们程序只需要进行动画的播放，一般在骨骼上有一些额外的挂点。这些挂点是模拟出来的额外的点，通常提供给们挂一些武器或其他装备物体的节点。在完成建模后，在进行骨骼绑定的时候，通常美术会选择模型的盆骨做为模型的根骨骼。那么基于根骨骼，可以递推出各个骨骼相对于根骨的父子关系。通过骨骼所在的空间，其原点们会选择两个脚之间的中点作为原点，这时候就会发现根骨骼并没有和原点重合，这时美术会构建一个Scene_Root做为额外的骨骼，其位置就为世界原点，而真正的根骨骼Bip01会作为Scene_Root的唯一子骨骼。</p>
<p><img src="/uploads/unitychan.png" alt=""></p>
<h2 id="骨骼：理解骨骼动画以及背后的数学意义"><a href="#骨骼：理解骨骼动画以及背后的数学意义" class="headerlink" title="骨骼：理解骨骼动画以及背后的数学意义"></a>骨骼：理解骨骼动画以及背后的数学意义</h2><p>首先要明确一个观念：<strong>骨骼决定了模型整体在世界坐标系中的位置和朝向。</strong><br>静态模型没有骨骼，们在世界坐标系中放置静态模型时，只要指定模型自身坐标系在世界坐标系中的位置和朝向。在骨骼动画中，不是把 Mesh 直接放到世界坐标系中， Mesh 只是作为 Skin 使用的，是依附于骨骼的，真正决定模型在世界坐标系中的位置和朝向的是骨骼。在渲染静态模型时，由于模型的顶点都是定义在模型坐标系中的，所以各顶点只要经过模型坐标系到世界坐标系的变换后就可进行渲染。而对于骨骼动画，们设置模型的位置和朝向，实际是在设置根骨骼的位置和朝向，然后根据骨骼层次结构中父子骨骼之间的变换关系计算出各个骨骼的位置和朝向，然后根据骨骼对 Mesh 中顶点的绑定计算出顶点在世界坐标系中的坐标，从而对顶点进行渲染。要记住，在骨骼动画中，骨骼才是模型主体， Mesh 不过是一层皮，一件衣服。</p>
<p><img src="/uploads/bonejoint.png" alt=""><br>骨骼只是一个形象的说法，实际上<strong>骨骼可理解为一个坐标空间，关节可理解为骨骼坐标空间的原点</strong>。关节的位置由它在父骨骼坐标空间中的位置描述。上图中有三块骨骼，分别是上臂，前臂和两个手指。 Clavicle( 锁骨 ) 是一个关节，它是上臂的原点，同样肘关节 (elbow joint) 是前臂的原点，腕关节 (wrist) 是手指骨骼的原点。关节既决定了骨骼空间的位置，又是骨骼空间的旋转和缩放中心。为什么用一个 4X4 矩阵就可以表达一个骨骼，因为 4X4 矩阵中含有的平移分量决定了关节的位置，旋转和缩放分量决定了骨骼空间的旋转和缩放。们来看前臂这个骨骼，其原点位置是位于上臂上某处的，对于上臂来说，它知道自己的坐标空间某处（即肘关节所在的位置）有一个子空间，那就是前臂，至于前臂里面是啥就不考虑了。当前臂绕肘关节旋转时，实际是前臂坐标空间在旋转，从而其中包含的子空间也在绕肘关节旋转，在这个例子中是 finger 骨骼。和实际生物骨骼不同的是，们这里的骨骼并没有实质的骨头，所以前臂旋转时，他自己没啥可转的，改变的只是坐标空间的朝向。你可以说上图的蓝线在转，但实际蓝线并不存在，蓝线只是画上去表示骨骼之间关系的，真正转的是骨骼空间，们能看到在转的是 wrist joint ，也就是两个 finger 骨骼的坐标空间，因为他们是子空间，会跟随父空间运动，就好比人跟着地球转一样。</p>
<p><strong>骨骼就是坐标空间，骨骼层次就是嵌套的坐标空间。</strong>关节只是描述骨骼的位置即骨骼自己的坐标空间原点在其父空间中的位置，绕关节旋转是指骨骼坐标空间（包括所有子空间）自身的旋转，如此理解足矣。但还有两个可能的疑问，一是骨骼的长度问题，由于骨骼是坐标空间，没有所谓的长度和宽度的限制，们看到的长度一方面是蒙皮后的结果，另一方面子骨骼的原点（也就是关节）的位置往往决定了视觉上父骨骼的长度，比如这里 upper arm 线段的长度实际是由elbow joint 的位置决定的。第二个问题，手指的那个端点是啥啊？实际上在们的例子中手指没有子骨骼，所以那个端点并不存在：）那是为了方便演示画上去的。实际问题中总有最下层的骨骼，他们不能决定其他骨骼了，他们的作用只剩下控制 Mesh 顶点。对了，那么手指的长度如何确定？们看到的长度应该是由手指部分的顶点和蒙皮决定的，也就是由 Mesh 中属于手指的那些点离腕关节的距离决定。</p>
<p>为什么要将骨骼组织成层次结构呢？答案是为了做动画方便，设想如果只有一块骨骼，那么让他动起来就太简单了，动画每一帧直接指定他的位置即可。如果是n块呢？通过组成一个层次结构，就可以通过父骨骼控制子骨骼的运动，牵一发而动全身，改变某骨骼时并不需要设置其下子骨骼的位置，子骨骼的位置会通过计算自动得到。上文已经说过，父子骨骼之间的关系可以理解为，<strong>子骨骼位于父骨骼的坐标系中</strong>。们知道物体在坐标系中可以做平移变换，以及自身的旋转和缩放变换。子骨骼在父骨骼的坐标系中也可以做这些变换来改变自己在其父骨骼坐标系中的位置和朝向等。那么如何表示呢？由于4X4矩阵可以同时表示上述三种变换，所以一般描述骨骼在其父骨骼坐标系中的变换时使用一个矩阵，<strong>也就是DirectX SkinnedMesh中的FrameTransformMatrix</strong>。实际上这不是唯一的方法，但应该是公认的方法，因为矩阵不光可以同时表示多种变换还可以方便的通过连乘进行变换的组合，这在层次结构中非常方便。</p>
<p><strong>Vertex blending公式</strong><br>现在让们用一个公式总结一下Vertex blending的整个过程(使用矩阵变换)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vworld = Vmesh * BoneOffsetMatrix1 * CombindMatrix1 * Weight1</div><div class="line">+ Vmesh* BoneOffsetMatrix2 * CombinedMatrix2 * Weight2</div><div class="line">+ …</div><div class="line">+ Vmesh * BoneOffsetMatrixN * CombindMatrixN * WeightN</div></pre></td></tr></table></figure></p>
<p>（这个公式使用的是行向量左乘矩阵）</p>
<p>由于BoneOffsetMatrix和Combined Matrix都是矩阵，可以先相乘这样就减少很多计算了。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>UNITY3D默认的骨骼动画组件[SKinnedMeshRender]使用的是CPU蒙皮，屏幕内模型较多的时候会造成CPU负担过大，导致卡顿，手机发热等。新版本UNITY3D可以开启GPU Skinning，但其使用的 Transfrom feedback 会将大量顶点从GPU传到CPU再计算，以此来完成动画融合或IK等功能。因此需要高效的GPU蒙皮方案。</p>
<h2 id="使用GPUSkinning"><a href="#使用GPUSkinning" class="headerlink" title="使用GPUSkinning"></a>使用GPUSkinning</h2><ol>
<li>使用Unity Animation/Animator和SkinnedMeshRenderer制作角色prefab， 保证Animation/Animator组件子构件有SkinnedMeshRenderer（可以参考Example目录中的例子）</li>
<li>添加GPUSkinningSampler脚本到Animation/Animator绑定的GameObject上</li>
</ol>
<p><img src="/uploads/QQ20180919-151122@2x.png" alt=""></p>
<p>更详细的资料您可参考  <a href="http://gsdn.sdo.com/help/GRender/GpuSkinning/GpuSkinning.html" target="_blank" rel="external">GpuSkinning使用手册 – GSDN</a></p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>当场景中有很多人物动画模型的时候会产生大量开销，这些开销除了 DrawCall 外，很大一部分来自于骨骼动画。Unity 内置提供了 GPU Skinning 的功能，但测试下来并没有对整体性能有任何提升，反而整体的开销增加了不少。有很多种方法来减小骨骼动画的开销，每一种方法都有其利弊，都不是万金油，这里介绍的方法同样如此。其实本质还是 GPU Skinning，由们自己来实现，但是和 Unity 内置的 GPU Skinning 有所区别。<br><img src="/uploads/QQ20180919-155831@2x.png" alt=""></p>
<p>从上图中可以看到，Unity 调用到了 Opengl ES 的 Transform Feedback 接口，这个接口至少要到 OpenGL ES 3.0 才有。</p>
<p>在开启 GPUSkinning 的时候，Unity 确实已经在 CPU 中进行了骨骼变换，而后将矩阵数组传递给 Shader，通过 Transform Feedback 后，将结果存储到 Buffer Object 中，这时 Buffer Object 中存储的顶点数据已经是蒙皮完成了，最后渲染模型的时候直接拿来用即可。下面这段 glsl 既是输出 Transform Feedback 的，也证明了这点。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#version 300 es</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_bone_count = <span class="number">32</span>;</div><div class="line"><span class="keyword">const</span> highp <span class="keyword">float</span> max_bone_count_inv = <span class="number">1.0</span> / <span class="keyword">float</span>(max_bone_count); </div><div class="line"><span class="keyword">const</span> highp <span class="keyword">float</span> half_texel = <span class="number">0.5</span> * max_bone_count_inv; </div><div class="line"><span class="keyword">in</span> vec3 in_vertex;</div><div class="line"><span class="keyword">in</span> vec3 in_normal;</div><div class="line"><span class="keyword">in</span> vec4 in_tangent;</div><div class="line"><span class="keyword">in</span> ivec2 in_boneIndices;</div><div class="line"><span class="keyword">in</span> vec2  in_boneWeights;</div><div class="line"><span class="keyword">out</span> vec3 out_pos;</div><div class="line"><span class="keyword">out</span> vec3 out_normal;</div><div class="line"><span class="keyword">out</span> vec4 out_tangent;</div><div class="line"></div><div class="line">uniform vec4 bones[max_bone_count*<span class="number">3</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_MATRIX(idx) mat4( bones[int(idx)*3 + 0], bones[int(idx)*3 + 1], bones[int(idx)*3 + 2], vec4(0.0, 0.0, 0.0, 1.0))</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span></div><div class="line">&#123;</div><div class="line">    vec4 inpos = vec4(in_vertex.xyz, <span class="number">1.0</span>);</div><div class="line">    mat4 localToWorldMatrix = GET_MATRIX(in_boneIndices.x) * in_boneWeights[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(in_boneWeights[<span class="number">1</span>] &gt; <span class="number">0.0</span>)</div><div class="line">        localToWorldMatrix += GET_MATRIX(in_boneIndices.y) * in_boneWeights[<span class="number">1</span>] ;</div><div class="line">    out_pos = (inpos * localToWorldMatrix).xyz;</div><div class="line">    gl_Position = vec4(out_pos.xyz, <span class="number">1.0</span>);</div><div class="line">    out_normal = normalize( ( vec4(in_normal.xyz, <span class="number">0.0</span>) * localToWorldMatrix)).xyz;</div><div class="line">    out_tangent = vec4( normalize( ( vec4(in_tangent.xyz, <span class="number">0.0</span>) * localToWorldMatrix)).xyz, in_tangent.w);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次们要动手实现的就是这个过程，但是不使用 Transform Feedback，因为要保证在 OpenGL ES 2.0 上也能良好运行，况且引擎也没有提供这么底层的接口。</p>
<p>大致的步骤是这样的：</p>
<p>将骨骼动画数据序列化到自定义的数据结构中。这么做是因为这样能完全摆脱 Animation 的束缚，并且可以做到 Optimize Game Objects（Unity 中一个功能，将骨骼的层级结构 GameObjects 完全去掉，减少开销），同时不丢失绑点。<br>在 CPU 中进行骨骼变换。<br>将骨骼变换的结果传递给 GPU，进行蒙皮。<br>很简单的三大步，对于传统的骨骼动画来说没有任何特殊的步骤，下面会对其中的每一步展开说明，并将其中的细节说清楚。</p>
<h3 id="提取骨骼动画数据"><a href="#提取骨骼动画数据" class="headerlink" title="提取骨骼动画数据"></a>提取骨骼动画数据</h3><p><img src="/uploads/QQ20180919-160038@2x.png" alt=""><br>目的就是将这些数据提取出来，存储到自定义的数据结构中。代码大致是这样的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">EditorCurveBinding[] curvesBinding = AnimationUtility.GetCurveBindings(animClip);</div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> curveBinding <span class="keyword">in</span> curvesBinding)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 旋转</span></div><div class="line">    AnimationCurve curveRX = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.x"</span>);</div><div class="line">    AnimationCurve curveRY = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.y"</span>);</div><div class="line">    AnimationCurve curveRZ = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.z"</span>);</div><div class="line">    AnimationCurve curveRW = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.w"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 位移</span></div><div class="line">    AnimationCurve curvePX = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.x"</span>);</div><div class="line">    AnimationCurve curvePY = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.y"</span>);</div><div class="line">    AnimationCurve curvePZ = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.z"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 不考虑缩放，假定所有骨骼的缩放都是 1</span></div><div class="line"></div><div class="line">    <span class="keyword">float</span> curveRX_v = curveRX.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRY_v = curveRY.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRZ_v = curveRZ.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRW_v = curveRW.Evaluate(second);</div><div class="line"></div><div class="line">    <span class="keyword">float</span> curvePX_v = curvePX.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curvePY_v = curvePY.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curvePZ_v = curvePZ.Evaluate(second);</div><div class="line"></div><div class="line">    Vector3 translation = <span class="keyword">new</span> Vector3(curvePX_v, curvePY_v, curvePZ_v);</div><div class="line">    Quaternion rotation = <span class="keyword">new</span> Quaternion(curveRX_v, curveRY_v, curveRZ_v, curveRW_v);</div><div class="line">    NormalizeQuaternion(<span class="keyword">ref</span> rotation);</div><div class="line">    matrices.Add(</div><div class="line">        Matrix4x4.TRS(translation, rotation, Vector3.one)</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有两个注意点。第一，要清楚 AnimationCurve 中提取出来的旋转量是欧拉角还是四元数，这里一开始就弄错了，想当然认为是欧拉角，所以随后计算得到的结果也就错了。第二，用来旋转的四元数，必须是单位四元数（模是1），否则你会得到 Unity 的一个报错信息。</p>
<p>以上的代码中，将每一帧的数据以 30fps 的频率直接采样了出来，其实也可以不采样出来，而是等需要的时候再从 AnimationCurve 中采样，这样会更平滑但是运行时的计算量也更多了。</p>
<h3 id="骨骼变换"><a href="#骨骼变换" class="headerlink" title="骨骼变换"></a>骨骼变换</h3><p>骨骼变换是所有代码的核心部分了，看似挺复杂，其实想清楚后代码量是最少的:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 更新 Walk 动作的所有骨骼变换</span></div><div class="line">    UpdateBoneAnimationMatrix(<span class="string">"Walk"</span>, second);</div><div class="line">    second += Time.deltaTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateBoneAnimationMatrix</span>(<span class="params"><span class="keyword">string</span> animName, <span class="keyword">float</span> time</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// boneAnimation 是我们自定义的数据结构</span></div><div class="line">    <span class="comment">// 其中存储了刚才从 AnimationCurve 中采样到的动画数据</span></div><div class="line">    GPUSkinning_BoneAnimation boneAnimation = GetBoneAnimation(animName);</div><div class="line">    <span class="keyword">int</span> frameIndex = (<span class="keyword">int</span>)(time * boneAnimation.fps) % (<span class="keyword">int</span>)(boneAnimation.length * boneAnimation.fps);</div><div class="line">    <span class="comment">// 获取当前播放的是哪一帧的动画数据</span></div><div class="line">    GPUSkinning_BoneAnimationFrame frame = boneAnimation.frames[frameIndex];</div><div class="line"></div><div class="line">    <span class="comment">// 刷新所有的骨架动画矩阵</span></div><div class="line">    UpdateBoneTransformMatrix(bones[rootBoneIndex], Matrix4x4.identity, frame);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateBoneTransformMatrix</span>(<span class="params">GPUSkinning_Bone bone, Matrix4x4 parentMatrix, GPUSkinning_BoneAnimationFrame frame</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> index = BoneAnimationFrameIndexOf(frame, bone);</div><div class="line">    Matrix4x4 mat = parentMatrix * frame.matrices[index];</div><div class="line">    <span class="comment">// 当前骨骼</span></div><div class="line">    bone.animationMatrix = mat * bone.bindpose;</div><div class="line"></div><div class="line">    <span class="comment">// 继续递归子骨骼</span></div><div class="line">    GPUSkinning_Bone[] children = bone.children;</div><div class="line">    <span class="keyword">int</span> numChildren = children.Length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numChildren; ++i)</div><div class="line">    &#123;</div><div class="line">        UpdateBoneTransformMatrix(children[i], mat, frame);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单来说骨骼变换就是一个矩阵乘法，比如 bone0（简写为b0） 是 bone1（简写为b1） 的父骨骼：<br><img src="/uploads/QQ20180919-160341@2x.png" alt=""></p>
<p>注意这里是矩阵左乘（从右往左读），trs 是 Matrix4x4.TRS，也就是从 AnmationCurve 采样到的数据。<br>Bindpose 的作用是将模型空间中的顶点坐标变换到骨骼空间中（是骨骼矩阵的逆矩阵），然后应用当前骨骼的变换，沿着层级关系一层层的变换下去。</p>
<h3 id="蒙皮"><a href="#蒙皮" class="headerlink" title="蒙皮"></a>蒙皮</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    UpdateBoneAnimationMatrix(<span class="string">"Walk"</span>, second);</div><div class="line">    Play();</div><div class="line">    second += Time.deltaTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Matrix4x4[] matricesUniformBlock = <span class="literal">null</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Play</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> numBones = bones.Length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numBones; ++i)</div><div class="line">    &#123;</div><div class="line">        matricesUniformBlock[i] = bones[i].animationMatrix;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将骨骼变换的结果传递到 Shader 中</span></div><div class="line">    <span class="comment">// SetMatrixArray这是 Unity5.4 之后提供的新的 API</span></div><div class="line">    <span class="comment">// 以前是不能直接传一个数组的，只能一个个元素单独传，效率很低</span></div><div class="line">    <span class="comment">// 新的 API 减小了开销（看下图）</span></div><div class="line">    newMtrl.SetMatrixArray(shaderPropID_Matrices<span class="comment">/*_Matrices*/</span>, matricesUniformBlock);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180919-160501@2x.png" alt=""><br>由于骨骼数量固定为 24，所以图中的 96 = 24 x 4</p>
<p>使用 SetMatrixArray 其实有点浪费了，因为对于一个 4x4 的矩阵（四个float4）来说，最后一维永远是 （0, 0, 0, 1），所以可以使用 3x4的矩阵（三个float4）代替，这样就减少了数据传递的压力。</p>
<p>现在所有的骨骼变换矩阵已经传递到 Shader 中了，就可以使用这些数据来蒙皮（变换顶点坐标）</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模型确定为 24 个骨骼</span></div><div class="line"><span class="comment">// 不同的设备对常量寄存器存储的最大数据量都是有差别的，这一点需要注意</span></div><div class="line">uniform float4x4 _Matrices[<span class="number">24</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> appdata</div><div class="line">&#123;</div><div class="line">    float4 vertex : POSITION;</div><div class="line">    float2 uv : TEXCOORD0;</div><div class="line">    <span class="comment">// tangent 存储了骨骼索引和权重</span></div><div class="line">    <span class="comment">// tangent.x 第一根骨骼索引</span></div><div class="line">    <span class="comment">// tangent.y 第一根骨骼权重</span></div><div class="line">    <span class="comment">// tangent.z 第二根骨骼索引</span></div><div class="line">    <span class="comment">// tangent.w 第二根骨骼权重</span></div><div class="line">    float4 tangent : TANGENT;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">v2f <span class="title">vert</span> (<span class="params">appdata v</span>)</span></div><div class="line">&#123;</div><div class="line">    v2f o;</div><div class="line"></div><div class="line">    <span class="comment">// 蒙皮</span></div><div class="line">    float4 pos = </div><div class="line">        mul(_Matrices[v.tangent.x], v.vertex) * v.tangent.y + </div><div class="line">        mul(_Matrices[v.tangent.z], v.vertex) * v.tangent.w;</div><div class="line"></div><div class="line">    <span class="comment">// 注意，如果用到了 normal，也要像顶点一样经过蒙皮处理哦</span></div><div class="line"></div><div class="line">    o.vertex = mul(UNITY_MATRIX_MVP, pos);</div><div class="line">    o.uv = TRANSFORM_TEX(v.uv, _MainTex);</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Mesh.tangents 里预先存储了骨骼索引和权重</span></div><div class="line"><span class="comment">// tangent 里只容得下两个骨骼融合</span></div><div class="line">Vector4[] tangents = <span class="keyword">new</span> Vector4[mesh.vertexCount];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mesh.vertexCount; ++i)</div><div class="line">&#123;</div><div class="line">    BoneWeight boneWeight = mesh.boneWeights[i];</div><div class="line">    tangents[i].x = boneWeight.boneIndex0;</div><div class="line">    tangents[i].y = boneWeight.weight0;</div><div class="line">    tangents[i].z = boneWeight.boneIndex1;</div><div class="line">    tangents[i].w = boneWeight.weight1;</div><div class="line">&#125;</div><div class="line">newMesh.tangents = tangents;</div></pre></td></tr></table></figure>
<h2 id="其他可以同时进行的优化方案"><a href="#其他可以同时进行的优化方案" class="headerlink" title="其他可以同时进行的优化方案"></a>其他可以同时进行的优化方案</h2><ol>
<li>除了使用GPUSkinning之外们还可以选择使用层次细节（LOD），它是根据物体在游戏画面中所占视图的百分比来调用不同复杂度的模型的。简单而言，就是当一个物体距离摄像机比较远的时候使用低模，当物体距离摄像机比较近的时候使用高模。这是一种优化游戏渲染效率的常用方法，缺点是占用大量内存。使用这个技术，一般是在解决运行时流畅度的问题，采用的是空间换时间的方式。<br><strong>结合GPUSkinning与LOD将会大大提高同屏数量，同时相应的画面会有所降低。可根据实际情况进行处理。</strong></li>
</ol>
<ol>
<li>启用多线程渲染(Multithreading render) ，启用多线程渲染之后渲染效率高出一半左右。原理是将Mesh渲染任务交给另外的渲染进程以此降低当前进程的渲染耗时。<br><img src="/uploads/QQ20180919-145406.png" alt=""><br><img src="/uploads/multithreaded_rendering_0.png" alt=""></li>
</ol>
<ol>
<li>在模型上启用Optmize GameObject降低CPU耗时<br>启用Optmize GameObject之前<br><img src="/uploads/QQ20180919-150059.png" alt=""><br>启用Optmize GameObject之后<br><img src="/uploads/QQ20180919-150223.png" alt=""><br>Optmize GameObject会极大降低骨骼数目对多线程的影响，从而达到降低主线程的CPU耗时。</li>
</ol>
<p>本文部分内容参考如下链接:<br><a href="http://chengkehan.github.io/GPUSkinning.html" target="_blank" rel="external">🔗 GPU Skinning -Jim’s GameDev Blog</a><br><a href="https://v.qq.com/x/page/s05175xbjvd.html" target="_blank" rel="external">🔗 Unity中动画系统的性能优化方案-uwa</a><br><a href="https://www.youtube.com/watch?v=uDqjIdI4bF4&amp;t=660s" target="_blank" rel="external">🔗 YouTube 12 Principles of Animation</a><br><a href="https://blog.csdn.net/n5/article/details/3105872" target="_blank" rel="external">🔗 Skinned Mesh原理解析和一个最简单的实现示例</a><br><a href="hhttps://docs.unity3d.com/Manual/class-SkinnedMeshRenderer.html" target="_blank" rel="external">🔗 Unity官方文档 Skinned Mesh Renderer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GPUSkinning 教程大纲(UNITY3D)&lt;br&gt;节一. 原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动画：理解骨骼动画的运作方式&lt;/li&gt;
&lt;li&gt;模型：理解美术的制作流程&lt;/li&gt;
&lt;li&gt;骨骼：理解骨骼动画以及背后的数学意义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;节二. 实践&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术背景&lt;/li&gt;
&lt;li&gt;使用GPUSkinning&lt;/li&gt;
&lt;li&gt;工作原理(重点)&lt;/li&gt;
&lt;li&gt;实际效果&lt;/li&gt;
&lt;li&gt;其他可以同时进行的优化方案&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="教程" scheme="http://vrast.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="GPUSkinning" scheme="http://vrast.cn/tags/GPUSkinning/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Playables API 实践(上)</title>
    <link href="http://vrast.cn/posts/5df16bd2/"/>
    <id>http://vrast.cn/posts/5df16bd2/</id>
    <published>2018-09-07T07:01:13.000Z</published>
    <updated>2018-09-21T07:31:55.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Playables API 推出已经一年有余(2017–07–04 New in Unity 2017.1)。即使你没时间其他的新功能， 也应该看看这个 <code>Playable API</code> .做过大型游戏的同学无论你是做过 2D或3D 只要使用过 Animaiton Controller,或多或少体会过被 蜘蛛网(复杂状态机过渡) 支配的恐惧。当下有了 <code>Playable API</code> 可供使用，我们能轻易的向 Legacy animation API 的使用习惯靠拢 — 高效及易于定制。</p>
<p><img src="/uploads/WX20180907-152657.png" alt="一个简单的状态机，当然这不是我们想要的。"></p>
<font color="#185FB4">在我看来 Playable API 的目的就是为了替换掉Legacy动画系统，并且兼容Timeline（本篇不介绍timeline 感兴趣的可以自己去看看）。总的一个词概括就是 【dynamically】，如同使用组件一般的灵活。</font>

<blockquote>
<p>目前我在测试中使用了 UNITY2018.1+ 编辑器。如果不使用该可视化插件您在 UNITY5.x 版本就能使用<code>Playable API</code>。 使用5.x版本的Playable API 时请注意后续的代码API变更，某些函数名或调用方式可能已经更改，如果从未使用过 建议从 UNITY2017+ 开始入手。</p>
</blockquote>
<a id="more"></a>
<h1 id="准备工作-可跳过"><a href="#准备工作-可跳过" class="headerlink" title="准备工作(可跳过)"></a>准备工作(可跳过)</h1><h2 id="调试工具-graph-visualizer"><a href="#调试工具-graph-visualizer" class="headerlink" title="调试工具 graph-visualizer"></a>调试工具 graph-visualizer</h2><p>我们先Clone UNITY TECHNOLOGIES 提供的 <code>Playable</code> 可视化工具，便于后续的理解与调试。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Unity-Technologies/graph-visualizer</div></pre></td></tr></table></figure></p>
<p>我在这里直接克隆到测试工程中，目前此工具支持的UNITY版本如下：</p>
<table>
<thead>
<tr>
<th>Unity version</th>
<th>Release</th>
</tr>
</thead>
<tbody>
<tr>
<td> 2018.1+</td>
<td>v2.2 (master)</td>
</tr>
<tr>
<td> 2017.1+</td>
<td>v1.1</td>
</tr>
</tbody>
</table>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p><img src="/uploads/WX20180911-144337@2x.png" alt="Clone成功后 打开 Window/graph-visualizer ,在创建PlayGraph的地方调用 GraphVisualizerClient.Show(graph) 即可，在运行时可看到动态创建的树形结构"></p>
<p><img src="/uploads/WX20180911-144513@2x.png" alt="您将会得到这样的画面 右侧为示范图例，可手动关闭。"></p>
<h1 id="Playable基础结构"><a href="#Playable基础结构" class="headerlink" title="Playable基础结构"></a>Playable基础结构</h1><p><img src="/uploads/QQ20180910-164716@2x.png" alt=""><br>这两个结构体是我们最需要关注的部分，我们可以结合上文的 PlayableGraph 例图来总结一下规律。 AnimationOutput 是根节点，Playable 是可以通过 后为XXXXXMixerPlayable 来进行组合 或 单独使用，并且至少有一个才能构成最简单的 PlayableGraph。</p>
<p><img src="/uploads/WX20180911-150945@2x.png" alt="&lt;font color=#3976C3&gt;小技巧：编辑器中输入MixerPlayable 可以看到所有可用的Mixer(结构体)，通过这些类 我们可以轻易的将一个个不同种类的节点连接在一起从而形成新的树形结构。&lt;/font&gt;"></p>
<h1 id="快速上手案例-动画的播放"><a href="#快速上手案例-动画的播放" class="headerlink" title="快速上手案例 动画的播放"></a>快速上手案例 动画的播放</h1><h2 id="创建一个最基础的-PlayableGraph"><a href="#创建一个最基础的-PlayableGraph" class="headerlink" title="创建一个最基础的 PlayableGraph"></a>创建一个最基础的 PlayableGraph</h2><p><img src="/uploads/WX20180911-163559@2x.png" alt="我们使用五行代码就创建了一个最基础的 PlayableGraph。"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable = AnimationClipPlayable.Create(playableGraph, clip);</div><div class="line">playableOutput.SetSourcePlayable(clipPlayable);</div><div class="line"></div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<p>⚠️ 您同样可以使用一行代码就能调用此动画，这里需要注意的是<strong>Animator</strong>不能为空，否则编辑器会直接crash而不报异常。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AnimationPlayableUtilities.PlayClip(GetComponent&lt;Animator&gt;(), clip, <span class="keyword">out</span> playableGraph);</div></pre></td></tr></table></figure></p>
<h2 id="创建最基础的两动画融合"><a href="#创建最基础的两动画融合" class="headerlink" title="创建最基础的两动画融合"></a>创建最基础的两动画融合</h2><p><img src="/uploads/WX20180911-171707@2x.png" alt="这里我们新增了几行代码，值得注意的是截图所示mixer节点中有两个重要的属性 inputcount 与 outputcount ，顾名思义。我们既可以从 PlayableGraph 的级别指定两个AnimationClip连接到mixer上，可以使用mixer 直接去进行链接点设置。"><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line">mixerPlayable = AnimationMixerPlayable.Create(playableGraph, <span class="number">2</span>);</div><div class="line">playableOutput.SetSourcePlayable(mixerPlayable);</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"></div><div class="line"><span class="comment">//playableGraph.Connect(clipPlayable1,0,mixerPlayable,0);</span></div><div class="line"><span class="comment">//playableGraph.Connect(clipPlayable2, 0, mixerPlayable, 1);</span></div><div class="line"><span class="comment">//上面的两行与下面的两行代码是等价的</span></div><div class="line">mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>);</div><div class="line">mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>);</div><div class="line"></div><div class="line">weight = Mathf.Clamp01(weight);</div><div class="line">mixerPlayable.SetInputWeight(<span class="number">0</span>, <span class="number">1.0</span>f-weight);<span class="comment">//分别设置两个数据端口的权重</span></div><div class="line">mixerPlayable.SetInputWeight(<span class="number">1</span>, weight);</div><div class="line"></div><div class="line">playableGraph.Play();</div><div class="line">GraphVisualizerClient.Show(playableGraph);</div></pre></td></tr></table></figure></p>
<h2 id="混合使用-AnimationClip-与-AnimatorController"><a href="#混合使用-AnimationClip-与-AnimatorController" class="headerlink" title="混合使用 AnimationClip 与 AnimatorController"></a>混合使用 AnimationClip 与 AnimatorController</h2><p>修改上文【创建最基础的两动画融合】所提供的代码块 即可。AnimatorController 可以看作是一颗子树，它可以轻易的使用<strong>mixerPlayable</strong>与其他的clip进行融合，这一切的便利归功于UNITY重写的通用动画调用层。</p>
<p>在视频中您可以观察最左侧在融合权重的变化下两颗树的融合情况：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimatorControllerPlayable.Create(playableGraph, controller);</div></pre></td></tr></table></figure></p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNTM4NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<h2 id="增加-PlayableGraph-的输出口-类型"><a href="#增加-PlayableGraph-的输出口-类型" class="headerlink" title="增加 PlayableGraph 的输出口(类型)"></a>增加 PlayableGraph 的输出口(类型)</h2><p>看到这里我们应该慢慢的有一些概念了</p>
<blockquote>
<p>记忆技巧：右输入口(数量) 左输出口(数量)。 这两个东西贯穿整体的设计中。即使最基础的 playable 组件都有这两个属性。这两个属性也是我们设计一棵树的常规操作。PlayableGraph 就是这颗树，额外需要理解的是： 它允许(限制了) 我们需要用不同 类型的主分支 然后才扩展出其他分支。</p>
</blockquote>
<p>⚠️ 所有子节点初始化的时候都没有设置输出输入端口数量 您需要手动指派。否则会报错:<font color="e70000">Connecting invalid input</font></p>
<p><img src="/uploads/ScreenShot2018-09-12at4.19.37PM.png" alt="&lt;font color=#3976C3&gt;小技巧：编辑器中输入playableoutput 可以看到所有可用的类型(结构体)，通过这些类 我们可以轻易的给PlayableGraph添加不同类型的子分支。&lt;/font&gt;"></p>
<p>目前我们已经用过了<code>AnimationPlayableOutput</code> 下面演示一些 <code>AudioPlayableOutput</code> 的案例。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create();</div><div class="line"><span class="keyword">var</span> audioOutput = AudioPlayableOutput.Create(playableGraph, <span class="string">"Audio"</span>, GetComponent&lt;AudioSource&gt;());</div><div class="line"><span class="keyword">var</span> audioClipPlayable = AudioClipPlayable.Create(playableGraph, audioClip, <span class="literal">true</span>);</div><div class="line">audioOutput.SetSourcePlayable(audioClipPlayable);</div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180912-163420.png" alt="借此代码抛砖引玉，另外几种类型(主分支)也是同样的使用方法"></p>
<h2 id="控制PlayableGraph-树-中的状态切换"><a href="#控制PlayableGraph-树-中的状态切换" class="headerlink" title="控制PlayableGraph(树)中的状态切换"></a>控制PlayableGraph(树)中的状态切换</h2><p>因为 XXXPlayable 都是继承自同接口，以下函数同样适用于其他类型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">audioClipPlayable.Pause();     <span class="comment">//暂停</span></div><div class="line">audioClipPlayable.Play();      <span class="comment">//播放</span></div><div class="line">audioClipPlayable.SetDelay(<span class="number">1</span>); <span class="comment">//设置延迟</span></div></pre></td></tr></table></figure>
<p>参考代码片段 </p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> i = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    i += Time.deltaTime;</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (audioClipPlayable.GetPlayState() == PlayState.Paused)</div><div class="line">            audioClipPlayable.Play();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            audioClipPlayable.Pause();</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制树的时间"><a href="#控制树的时间" class="headerlink" title="控制树的时间"></a>控制树的时间</h2><p>因为 XXXPlayable 都是继承自同接口，以下函数同样适用于其他类型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">float</span> time;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    playableGraph = PlayableGraph.Create();</div><div class="line"></div><div class="line">    clipPlayable = AnimationPlayableUtilities.PlayClip(GetComponent&lt;Animator&gt;(), clip, <span class="keyword">out</span> playableGraph);</div><div class="line">    clipPlayable.Pause();</div><div class="line"></div><div class="line">    playableGraph.Play();</div><div class="line">    GraphVisualizerClient.Show(playableGraph);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    weight = Mathf.Clamp01(weight);</div><div class="line">    clipPlayable.SetTime(time);    <span class="comment">//控制播放进度,无上限超出部分自动循环动画</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在视频中您可以观察时间的前进与后退直接作用于当前动画节点：</p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNzQwMA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<h2 id="使用-PlayableBehaviour"><a href="#使用-PlayableBehaviour" class="headerlink" title="使用 PlayableBehaviour"></a>使用 PlayableBehaviour</h2><p>顾名思义 <strong>PlayableBehaviour</strong> 就是自己定义的Playable行为，我们实现了一个 <strong>PlayQueuePlayable</strong> 并且制定一些特殊的逻辑在其中（循环播放clip）。</p>
<ol>
<li>我们先看下它是如何初始化的：<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> playQueuePlayable = ScriptPlayable&lt;PlayQueuePlayable&gt;.Create(playableGraph);<span class="comment">//泛型工厂</span></div><div class="line"><span class="keyword">var</span> playQueue = playQueuePlayable.GetBehaviour();<span class="comment">//容器函数 获取饮用</span></div><div class="line">playQueue.Initialize(clipsToPlay, playQueuePlayable, playableGraph);<span class="comment">//用户自定义初始化函数</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>从第二行代码中使用了泛型工厂来创建 <strong>playablebehavior</strong> 我们可以看出它是一个通用的容器，而并是开箱即用的树节点。</p>
<ol>
<li>容器初始化完毕，将它设置为主动画分支的下一级节点，操作完毕。<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"Animation"</span>, GetComponent&lt;Animator&gt;());</div><div class="line">playableOutput.SetSourcePlayable(playQueuePlayable,<span class="number">0</span>);</div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么现在我们已经了解了如何使用这个容器。现在开始探究容器的内部实现：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnGraphStart</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnGraphStop</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPlayableCreate</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPlayableDestroy</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourDelay</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourPlay</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourPause</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PrepareData</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PrepareFrame</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessFrame</span>(<span class="params">Playable playable, FrameData info, <span class="keyword">object</span> playerData</span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，动画周期内的大部分检测与判断我们都能在这里进行.</p>
<p>最后我们再看一下自定义类 <strong>PlayQueuePlayable</strong> 的行为逻辑。</p>
<ol>
<li><p>上文提到的 <strong>Initialize</strong> 函数，这里动态创建了 <em>AnimationClipPlayable</em> 并且指派端口链接到了 <em>PlayQueuePlayable</em> </p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnimationClip[] clipsToPlay, Playable owner, PlayableGraph graph</span>)</span></div><div class="line">&#123;</div><div class="line">    owner.SetInputCount(<span class="number">1</span>);</div><div class="line">    mixer = AnimationMixerPlayable.Create(graph, clipsToPlay.Length);</div><div class="line">    graph.Connect(mixer, <span class="number">0</span>, owner, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> clipIndex = <span class="number">0</span> ; clipIndex &lt; mixer.GetInputCount() ; ++clipIndex)</div><div class="line">    &#123;</div><div class="line">        graph.Connect(AnimationClipPlayable.Create(graph, clipsToPlay[clipIndex]), <span class="number">0</span>, mixer, clipIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重写 <strong>PrepareFrame</strong> 函数，用来检测动画帧在播放前的逻辑(一帧调一次) 这里需要避免复杂的检测逻辑，我们实现了简单的轮播逻辑：让动画一个接一个的切换。</p>
</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> m_CurrentClipIndex = <span class="number">-1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> m_TimeToNextClip;</div><div class="line"><span class="keyword">private</span> Playable mixer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrepareFrame</span>(<span class="params">Playable owner, FrameData info</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (mixer.GetInputCount() == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Advance to next clip if necessary</span></div><div class="line">    m_TimeToNextClip -= (<span class="keyword">float</span>)info.deltaTime;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (m_TimeToNextClip &lt;= <span class="number">0.0</span>f)</div><div class="line">    &#123;</div><div class="line">        m_CurrentClipIndex++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (m_CurrentClipIndex &gt;= mixer.GetInputCount())</div><div class="line">            m_CurrentClipIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> currentClip = (AnimationClipPlayable)mixer.GetInput(m_CurrentClipIndex);</div><div class="line"></div><div class="line">        currentClip.SetTime(<span class="number">0</span>);</div><div class="line">        m_TimeToNextClip = currentClip.GetAnimationClip().length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> clipIndex = <span class="number">0</span> ; clipIndex &lt; mixer.GetInputCount(); ++clipIndex)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (clipIndex == m_CurrentClipIndex)</div><div class="line">            mixer.SetInputWeight(clipIndex, <span class="number">1.0</span>f);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mixer.SetInputWeight(clipIndex, <span class="number">0.0</span>f);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章节带大家过了一遍Playables API的基本使用，并且抛砖引玉的进行了一些技巧讲解，相信经过本章节的学习大家一定对 Playables API 充满了兴趣，在下一章我们讲讲更详细的 手部IK 与 分层动画 的运用。我们可以借此实现人物的攀爬/射击/复杂运动等。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&amp;mid=2247493316&amp;idx=1&amp;sn=7e4fef834a8066faca3d2f1f1a090bb4&amp;chksm=fe1dd26fc96a5b79856840f556cf65026facb83520ac1891605e42d5e777d30a0d5219060e21&amp;mpshare=1&amp;scene=1&amp;srcid=0606YJLYnfprk9UjpPQCnre1#rd" target="_blank" rel="external">🔗  UNITY官方微信号相关</a></p>
<p><a href="https://docs.unity3d.com/2018.1/Documentation/Manual/Playables.html" target="_blank" rel="external">🔗  UNITY官方文档相关</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Playables API 推出已经一年有余(2017–07–04 New in Unity 2017.1)。即使你没时间其他的新功能， 也应该看看这个 &lt;code&gt;Playable API&lt;/code&gt; .做过大型游戏的同学无论你是做过 2D或3D 只要使用过 Animaiton Controller,或多或少体会过被 蜘蛛网(复杂状态机过渡) 支配的恐惧。当下有了 &lt;code&gt;Playable API&lt;/code&gt; 可供使用，我们能轻易的向 Legacy animation API 的使用习惯靠拢 — 高效及易于定制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/WX20180907-152657.png&quot; alt=&quot;一个简单的状态机，当然这不是我们想要的。&quot;&gt;&lt;/p&gt;
&lt;font color=#185FB4  &gt;在我看来 Playable API 的目的就是为了替换掉Legacy动画系统，并且兼容Timeline（本篇不介绍timeline 感兴趣的可以自己去看看）。总的一个词概括就是 【dynamically】，如同使用组件一般的灵活。&lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;目前我在测试中使用了 UNITY2018.1+ 编辑器。如果不使用该可视化插件您在 UNITY5.x 版本就能使用&lt;code&gt;Playable API&lt;/code&gt;。 使用5.x版本的Playable API 时请注意后续的代码API变更，某些函数名或调用方式可能已经更改，如果从未使用过 建议从 UNITY2017+ 开始入手。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANIMATION" scheme="http://vrast.cn/tags/ANIMATION/"/>
    
  </entry>
  
</feed>
