<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazybones Kill PLAN</title>
  <subtitle>In me the tiger sniffs the rose</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vrast.cn/"/>
  <updated>2018-10-08T06:45:48.709Z</updated>
  <id>http://vrast.cn/</id>
  
  <author>
    <name>keyle xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# language version history</title>
    <link href="http://vrast.cn/posts/d763b1b/"/>
    <id>http://vrast.cn/posts/d763b1b/</id>
    <published>2018-10-08T07:01:13.000Z</published>
    <updated>2018-10-08T06:45:48.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>These are the versions of C# known about at the time of this writing:</p>
</blockquote>
<ul>
<li>C# 1.0 released with .NET 1.0 and VS2002 (January 2002)</li>
<li>C# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call Dispose on IEnumerators which implemented IDisposable. A few other small features.</li>
<li>C# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, iterator blocks</li>
<li>C# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (var), query expressions</li>
<li>C# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (dynamic), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters</li>
<li>C# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, caller info attributes. Breaking change: loop variable closure.</li>
<li>C# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, await in catch and finally, extension Add methods in collection initializers.</li>
<li>C# 7.0 released with .NET 4.7 and VS2017 (March 2017) Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline out parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.</li>
<li>C# 7.1 released with VS2017 v15.3 (August 2017) New features: async main, tuple member name inference, default expression, pattern matching with generics.</li>
<li>C# 7.2 released with VS2017 v15.5 (November 2017) New features: private protected access modifier, Span<t>, aka interior pointer, aka stackonly struct, everything else.</t></li>
<li>C# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and unmanaged generic type constraints. ref reassignment. Unsafe improvements: stackalloc initialization, unpinned indexed fixed buffers, custom fixed statements. Improved overloading resolution. Expression variables in initializers and queries. == and != defined for tuples. Auto-properties’ backing fields can now be targeted by attributes.</li>
<li>C# 8.0 currently in preview. Expected new features: Non-nullable reference-types, IAsyncEnumerable<t> support, Ranges, and default interface methods.</t></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;These are the versions of C# known about at the time of this writing:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;C# 1.0 released with .NET 1
    
    </summary>
    
      <category term="SCRIPT" scheme="http://vrast.cn/categories/SCRIPT/"/>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Timeline实践</title>
    <link href="http://vrast.cn/posts/cdaabbe3/"/>
    <id>http://vrast.cn/posts/cdaabbe3/</id>
    <published>2018-09-25T08:52:13.000Z</published>
    <updated>2018-10-12T03:18:55.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>如果您想动手尝试可以在AssetStore中获取到<a href="https://assetstore.unity.com/packages/essentials/default-playables-95266" target="_blank" rel="external">🔗 示例源码</a>，在 Default Playables 包中展示了大量的<strong>Playable API</strong>案例。在这里我们会挑比较有代表性的进行讲解。在案例中全部都是结合 <strong>Timeline</strong> 使用，由此可窥 “Playables API” 真是香饽饽，堪称万金油的存在。既能单独作为树型动画播放器使用又能够被 <strong>Timeline</strong> 所结合，不写代码也能做出复杂的游戏逻辑。当然 <strong>Timeline</strong> 同样适合处理各种动画需求等 如过场剧情，封面动画，甚至可以制作电影。本篇将会带大家从零开始使用Timeline进行剧情的编写，并且对相关 概念 以及 api 进行讲解。</p>
<a id="more"></a>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>Timeline</strong> 编辑器是一个什么样的存在 ？ 可以看作是强化版的 Animation 编辑器。他支持同时操控 N 个属性，就像是制作 flash 电影一样。在使用上策划编辑的时候不需要考虑脚本的实现只需要调用就行，程序这边不需要考虑调用时序只需要实现API并提供给策划即可。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;如果您想动手尝试可以在AssetStore中获取到&lt;a href=&quot;https://assetstore.unity.com/packages/essentials/default-playables-95266&quot;&gt;🔗 示例源码&lt;/a&gt;，在 Default Playables 包中展示了大量的&lt;strong&gt;Playable API&lt;/strong&gt;案例。在这里我们会挑比较有代表性的进行讲解。在案例中全部都是结合 &lt;strong&gt;Timeline&lt;/strong&gt; 使用，由此可窥 “Playables API” 真是香饽饽，堪称万金油的存在。既能单独作为树型动画播放器使用又能够被 &lt;strong&gt;Timeline&lt;/strong&gt; 所结合，不写代码也能做出复杂的游戏逻辑。当然 &lt;strong&gt;Timeline&lt;/strong&gt; 同样适合处理各种动画需求等 如过场剧情，封面动画，甚至可以制作电影。本篇将会带大家从零开始使用Timeline进行剧情的编写，并且对相关 概念 以及 api 进行讲解。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Math Symbols in Markdown</title>
    <link href="http://vrast.cn/posts/183fa821/"/>
    <id>http://vrast.cn/posts/183fa821/</id>
    <published>2018-09-20T06:29:47.000Z</published>
    <updated>2018-09-20T07:20:39.128Z</updated>
    
    <content type="html"><![CDATA[<p>之前输入数学公式的一直用截图 自觉用户体验很差，最近发现用的这个主题带了好用的数学函数辅助，便一发不可收拾。顺便推荐一下我用的主题是<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant-hexo github</a> ,这里记录一下数学符的用法。</p>
<a id="more"></a>
<h1 id="maupassant-hexo的数学函数开启方式"><a href="#maupassant-hexo的数学函数开启方式" class="headerlink" title="maupassant-hexo的数学函数开启方式"></a>maupassant-hexo的数学函数开启方式</h1><p>其他的主题可能方式不一样 具体需要对照文档</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Math Equation</div><div class="line"></div><div class="line">Add</div><div class="line"></div><div class="line">mathjax: true</div><div class="line">in Hexo's _config.yml.</div><div class="line"></div><div class="line">In the post which you would like to use math equation, add mathjax: true in the front-matter. For example:</div><div class="line"></div><div class="line">title: Test Math</div><div class="line">date: 2016-04-05 14:16:00</div><div class="line">categories: math</div><div class="line">mathjax: true</div><div class="line">---</div><div class="line">The default math delimiters are $$...$$ and \\[...\\] for displayed mathematics, and $...$ and \\(...\\) for in-line mathematics.</div><div class="line"></div><div class="line">However, if your post contains dollar signs ($), and they appear often in non-mathematical parts, in other words, you want to use $ as dollar sign not inline math delimiter, please add</div><div class="line"></div><div class="line">mathjax2: true</div><div class="line">in Hexo's _config.yml instead of mathjax: true. Correspondingly, add mathjax2: true to the front-matter of the post in which you would like to use math equation.</div><div class="line"></div><div class="line">See the example.</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180920-143741.png" alt="添加标签则可用"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$</div><div class="line">    \\beta</div><div class="line">    \\alpha</div><div class="line">$</div></pre></td></tr></table></figure>
<p>效果如下：<br>$<br>    \beta<br>    \alpha<br>$ </p>
<p>或者这样以居中显示：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\[\\beta \\alpha\\]</div></pre></td></tr></table></figure></p>
<p>\[\beta \alpha\]</p>
<h1 id="数学符"><a href="#数学符" class="headerlink" title="数学符"></a>数学符</h1><p>上面演示的 $\beta$ 之类的数学符号列表如下：</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\cos$</td>
<td>\cos</td>
</tr>
<tr>
<td>$\sin$</td>
<td>\sin</td>
</tr>
<tr>
<td>$\lim$</td>
<td>\lim</td>
</tr>
<tr>
<td>$\exp$</td>
<td>\exp</td>
</tr>
<tr>
<td>$\to$</td>
<td>\to</td>
</tr>
<tr>
<td>$\infty$</td>
<td>\infty</td>
</tr>
<tr>
<td>$\equiv$</td>
<td>\equiv</td>
</tr>
<tr>
<td>$\bmod$</td>
<td>\bmod</td>
</tr>
<tr>
<td>$\times$</td>
<td>\times</td>
</tr>
</tbody>
</table>
<h2 id="幂与指数"><a href="#幂与指数" class="headerlink" title="幂与指数"></a>幂与指数</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$k_{n+1}$</td>
<td>k_{n+1}</td>
</tr>
<tr>
<td>$n^2$</td>
<td>n^2</td>
</tr>
<tr>
<td>$k_n^2$</td>
<td>k_n^2</td>
</tr>
</tbody>
</table>
<h2 id="分数与二项式"><a href="#分数与二项式" class="headerlink" title="分数与二项式"></a>分数与二项式</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\frac{n!}{k!(n-k)!}$</td>
<td>\frac{n!}{k!(n-k)!}</td>
</tr>
<tr>
<td>$\binom{n}{k}$</td>
<td>\binom{n}{k}</td>
</tr>
<tr>
<td>$\frac{\frac{x}{1}}{x - y}$</td>
<td>\frac{\frac{x}{1}}{x - y}</td>
</tr>
<tr>
<td>$^3/_7$</td>
<td>^3/_7</td>
</tr>
</tbody>
</table>
<h2 id="根"><a href="#根" class="headerlink" title="根"></a>根</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sqrt{k}$</td>
<td>\sqrt{k}</td>
</tr>
<tr>
<td>$\sqrt[n]{k}$</td>
<td>\sqrt[n]{k}</td>
</tr>
</tbody>
</table>
<h2 id="运算必须符"><a href="#运算必须符" class="headerlink" title="运算必须符"></a>运算必须符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sum_{i=1}^{10} t_i$</td>
<td>\sum_{i=1}^{10} t_i</td>
</tr>
<tr>
<td>$\int_0^\infty \mathrm{e}^{-x}\,\mathrm{d}x$</td>
<td>\int_0^\infty \mathrm{e}^{-x}\,\mathrm{d}x</td>
</tr>
<tr>
<td>$\sum$</td>
<td>\sum</td>
</tr>
<tr>
<td>$\prod$</td>
<td>\prod</td>
</tr>
<tr>
<td>$\coprod$</td>
<td>\coprod</td>
</tr>
<tr>
<td>$\bigoplus$</td>
<td>\bigoplus</td>
</tr>
<tr>
<td>$\bigotimes$</td>
<td>\bigotimes</td>
</tr>
<tr>
<td>$\bigodot$</td>
<td>\bigodot</td>
</tr>
<tr>
<td>$\bigcup$</td>
<td>\bigcup</td>
</tr>
<tr>
<td>$\bigcap$</td>
<td>\bigcap</td>
</tr>
<tr>
<td>$\biguplus$</td>
<td>\biguplus</td>
</tr>
<tr>
<td>$\bigsqcup$</td>
<td>\bigsqcup</td>
</tr>
<tr>
<td>$\bigvee$</td>
<td>\bigvee</td>
</tr>
<tr>
<td>$\bigwedge$</td>
<td>\bigwedge</td>
</tr>
<tr>
<td>$\int$</td>
<td>\int</td>
</tr>
<tr>
<td>$\oint$</td>
<td>\oint</td>
</tr>
<tr>
<td>$\iint$</td>
<td>\iint</td>
</tr>
<tr>
<td>$\iiint$</td>
<td>\iiint</td>
</tr>
<tr>
<td>$\idotsint$</td>
<td>\idotsint</td>
</tr>
<tr>
<td>$\sum_{\substack{0&lt;i&lt;m\0&lt;j&lt;n}} P(i, j)$</td>
<td>\sum_{\substack{0&lt;i&lt;m\0&lt;j&lt;n}} P(i, j)</td>
</tr>
<tr>
<td>$\int\limits_a^b$</td>
<td>\int\limits_a^b</td>
</tr>
<tr>
<td>$a’$ $a^{\prime}$</td>
<td>a` a^{\prime}</td>
</tr>
<tr>
<td>$a’’$</td>
<td>a’’</td>
</tr>
<tr>
<td>$\hat{a}$</td>
<td>hat{a}</td>
</tr>
<tr>
<td>$\bar{a}$</td>
<td>\bar{a}</td>
</tr>
<tr>
<td>$\grave{a}$</td>
<td>\grave{a}</td>
</tr>
<tr>
<td>$\acute{a}$</td>
<td>\acute{a}</td>
</tr>
<tr>
<td>$\dot{a}$</td>
<td>\dot{a}</td>
</tr>
<tr>
<td>$\ddot{a}$</td>
<td>\ddot{a}</td>
</tr>
<tr>
<td>$\not{a}$</td>
<td>\not{a}</td>
</tr>
<tr>
<td>$\mathring{a}$</td>
<td>\mathring{a}</td>
</tr>
<tr>
<td>$\overrightarrow{AB}$</td>
<td>\overrightarrow{AB}</td>
</tr>
<tr>
<td>$\overleftarrow{AB}$</td>
<td>\overleftarrow{AB}</td>
</tr>
<tr>
<td>$a’’’$</td>
<td>a’’’</td>
</tr>
<tr>
<td>$\overline{aaa}$</td>
<td>\overline{aaa}</td>
</tr>
<tr>
<td>$\check{a}$</td>
<td>\check{a}</td>
</tr>
<tr>
<td>$\vec{a}$</td>
<td>\vec{a}</td>
</tr>
<tr>
<td>$\underline{a}$</td>
<td>\underline{a}</td>
</tr>
<tr>
<td>$\color{red}x$</td>
<td>\color{red}x</td>
</tr>
<tr>
<td>$\pm$</td>
<td>\pm</td>
</tr>
<tr>
<td>$\mp$</td>
<td>\mp</td>
</tr>
<tr>
<td>$\int y \mathrm{d}x$</td>
<td>\int y \mathrm{d}x</td>
</tr>
<tr>
<td>$\,$</td>
<td>\,</td>
</tr>
<tr>
<td>$\:$</td>
<td>\:</td>
</tr>
<tr>
<td>$\;$</td>
<td>\;</td>
</tr>
<tr>
<td>$!$</td>
<td>!</td>
</tr>
<tr>
<td>$\int y\, \mathrm{d}x$</td>
<td>\int y\, \mathrm{d}x</td>
</tr>
<tr>
<td>$\dots$</td>
<td>\dots</td>
</tr>
<tr>
<td>$\ldots$</td>
<td>\ldots</td>
</tr>
<tr>
<td>$\cdots$</td>
<td>\cdots</td>
</tr>
<tr>
<td>$\vdots$</td>
<td>\vdots</td>
</tr>
<tr>
<td>$\ddots$</td>
<td>\ddots</td>
</tr>
</tbody>
</table>
<h2 id="括弧"><a href="#括弧" class="headerlink" title="括弧"></a>括弧</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Script</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(a) $</td>
<td>(a)</td>
</tr>
<tr>
<td>$[a]  $</td>
<td>[a]</td>
</tr>
<tr>
<td>$a  $</td>
<td>{a}</td>
</tr>
<tr>
<td>$\langle f \rangle  $</td>
<td>\langle f \rangle</td>
</tr>
<tr>
<td>$\lfloor f \rfloor $</td>
<td>\lfloor f \rfloor</td>
</tr>
<tr>
<td>$\lceil f \rceil$</td>
<td>\lceil f \rceil</td>
</tr>
<tr>
<td>$\ulcorner f \urcorner$</td>
<td>\ulcorner f \urcorner</td>
</tr>
</tbody>
</table>
<p><a href="http://csrgxtu.github.io/2015/03/20/Writing-Mathematic-Fomulars-in-Markdown/" target="_blank" rel="external">🔗 Writing Mathematic Fomulars in Markdown – Archer Reilly</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=fcrespo82.markdown-table-formatter#overview" target="_blank" rel="external">🔗 Markdown Table Formatter</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前输入数学公式的一直用截图 自觉用户体验很差，最近发现用的这个主题带了好用的数学函数辅助，便一发不可收拾。顺便推荐一下我用的主题是&lt;a href=&quot;https://github.com/tufu9441/maupassant-hexo&quot;&gt;maupassant-hexo github&lt;/a&gt; ,这里记录一下数学符的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://vrast.cn/categories/Markdown/"/>
    
    
      <category term="Math" scheme="http://vrast.cn/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Playables API实践(下)</title>
    <link href="http://vrast.cn/posts/323c9fde/"/>
    <id>http://vrast.cn/posts/323c9fde/</id>
    <published>2018-09-19T09:33:28.000Z</published>
    <updated>2018-09-28T02:34:40.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上篇给大家介绍了 “Playables API” 的使用方法与背后的意义，本篇将会进一步带大家深入其中。 本篇重点还是会放到  “Playables API” 上，不会对 <strong>Timeline</strong> 进行集中讲解，但是搞明白了 “Playables API” 也就意味着理解了 <strong>Timeline</strong> 最复杂的部分，到时候学起来也会非常的快。</p>
</blockquote>
<a id="more"></a>
<h1 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h1><p>在本篇开始前我们先快速的回顾一下上篇的内容：</p>
<ol>
<li><p>“Playables API” 的意义 ？<br>答：替换Legacy动画系统，并兼容Timeline 。</p>
</li>
<li><p>如何创建 “Playables 树 ？</p>
</li>
</ol>
<p>答：五行代码就可以快速创建！</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable = AnimationClipPlayable.Create(playableGraph, clip);</div><div class="line">playableOutput.SetSourcePlayable(clipPlayable);</div><div class="line"></div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<ol>
<li>没有图形化界面时我们该如何记忆节点链接方式 ？<br>答：右输入(数量) 左输出(数量)，根节点有左边口，普通节点两边有 。</li>
</ol>
<h1 id="正文：更复杂的API运用方式"><a href="#正文：更复杂的API运用方式" class="headerlink" title="正文：更复杂的API运用方式"></a>正文：更复杂的API运用方式</h1><h2 id="使用-Animation-Layer"><a href="#使用-Animation-Layer" class="headerlink" title="使用 Animation Layer"></a>使用 Animation Layer</h2><p>上一篇我们提到使用 XXXMixerPlayable 可以用来融合多个动画/音频等。那么想在一个角色的身上同时播两个或多个互不干扰的动画该如何处理呢？ </p>
<p>想必大家都想到了，没错，就是使用 Animation Layer (动画层) 的技术。在 Animator 中常使用 Avatar Mask 来设置不同部位的遮罩，让其他部分的动画各司其职。</p>
<p>现在我们来看一看 Animation Layer 技术如何在 “Playerable API” 中使用吧。</p>
<p><img src="/uploads/bodylowermask.png" alt="第一步先制作遮罩，关闭身体上半的动画控制"></p>
<p>代码案例如下，您可以看见这里与上一篇我们讲到的 <strong>AnimationMixerPlayable</strong> 是不是保持了高度一致 ？ 这可不是架构的功劳，而是得益于代码风格的统一。无论是在 <strong>AnimationMixerPlayable</strong> 或 <strong>AnimationLayerMixerPlayable</strong> 其中都有统一的静态函数 <code>Create</code> ,良好的代码风格能让阅读者轻松掌握代码规律，从而减少阅读时间 。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> AnimationClip clip1;</div><div class="line"><span class="keyword">public</span> AnimationClip clip2;</div><div class="line"><span class="keyword">private</span> Animator _animator;</div><div class="line"><span class="keyword">private</span> AnimationLayerMixerPlayable mixerPlayable;</div><div class="line"><span class="keyword">public</span>  <span class="keyword">float</span> weight = <span class="number">.5</span>f;</div><div class="line"></div><div class="line"><span class="keyword">public</span> AvatarMask LowerMask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> PlayableGraph playableGraph;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line">    <span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line">    mixerPlayable = AnimationLayerMixerPlayable.Create(playableGraph, <span class="number">2</span>);</div><div class="line">    mixerPlayable.SetLayerMaskFromAvatarMask(<span class="number">1</span>,LowerMask);<span class="comment">//设置遮罩到1层</span></div><div class="line">    </div><div class="line">    playableOutput.SetSourcePlayable(mixerPlayable);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line">    <span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line">    </div><div class="line">    mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置权重1</span></div><div class="line">    mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置权重1</span></div><div class="line">    </div><div class="line">    playableGraph.Play();</div><div class="line">    </div><div class="line">    GraphVisualizerClient.Show(playableGraph);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意上面有一些不同与之前的看到的 <strong>AnimationMixerPlayable</strong> ，这里连接的两个动画权重均为1.为什么不是 0.5 与 0.5 ?<br>因为现在是同时播放不同于融合。融合需要两种动画过渡权重，而分层则是将模型分为两个区间，0区间播放Clip1，1区间播放Clip2，这是完全同步又独立的。</p>
<p><img src="/uploads/QQ20180927-105649-HD.gif" alt="效果图：上身播放跳跃，下身播放跑动"></p>
<h2 id="动态添加动画"><a href="#动态添加动画" class="headerlink" title="动态添加动画"></a>动态添加动画</h2><p>之前我们使用<strong>Animator</strong>的时候需要将所有使用到的动画都加入其中。现在我们使用 <strong>ConnectInput &amp; DisconnectInput</strong> API 就能轻易的切换动画。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</div><div class="line">    &#123;</div><div class="line">        mixerPlayable.DisconnectInput(<span class="number">0</span>);</div><div class="line">        <span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip3);</div><div class="line">        mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180927-120130-HD.gif" alt="效果图：上身切换到胜利动画，下身播放跑动"></p>
<h3 id="动态切换的优化"><a href="#动态切换的优化" class="headerlink" title="动态切换的优化"></a>动态切换的优化</h3><p>刚才我们实现了动态的切换动画。效果是达到了，可是动画是硬过渡。如果现在只有<code>Connect  &amp; Disconnect</code>接口那么API真的无法帮我们达到动画的融合过渡！<br>现在我们现在来优化一下这段动画硬切的过程，使其达到融合过渡的效果(淡入淡出)。</p>
<h4 id="方式一-使用AnimationMixerPlayable-API"><a href="#方式一-使用AnimationMixerPlayable-API" class="headerlink" title="方式一 使用AnimationMixerPlayable API"></a>方式一 使用AnimationMixerPlayable API</h4><p>使用动画融合节点控制权重实现动画融合，使用这种方式需要实现一个自定义Playable，以list作为容器才能实现复用，否则就是hardcode了 。下面代码展示了最简方式使用融合节点。<br><img src="/uploads/QQ20180927-163146-HD.gif" alt="效果图：上身融合跳跃与胜利动画"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mixerPlayable = AnimationMixerPlayable.Create(layerMixerPlayable.GetGraph(),<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"><span class="keyword">var</span> clipPlayable3 = AnimationClipPlayable.Create(playableGraph, clip3);</div><div class="line"></div><div class="line">mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable3,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">0</span>,mixerPlayable,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<h4 id="方式二-使用Animator"><a href="#方式二-使用Animator" class="headerlink" title="方式二 使用Animator"></a>方式二 使用Animator</h4><p><img src="/uploads/QQ20180927-170717.png" alt="效果图：创建融合状态机"><br>同样的我们使用融合状态机实现这个过渡效果。这种方式(Animator+PlayableAPI))让策划或者美术配置也是一种不错的选择。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">animatorController = AnimatorControllerPlayable.Create(layerMixerPlayable.GetGraph(), animationController);</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"></div><div class="line">layerMixerPlayable.ConnectInput(<span class="number">0</span>,animatorController,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180927-170915-HD.gif" alt="效果图：上身融合跳跃与胜利动画"></p>
<h4 id="方式三-纯Playable-API"><a href="#方式三-纯Playable-API" class="headerlink" title="方式三 纯Playable API"></a>方式三 纯Playable API</h4><p>下面我们要介绍的这种过渡模式是纯代码实现，类似与lengcy api里的Animation CrossFade. 原理就是利用<code>Connect  &amp; Disconnect</code> 动态开关节点实现过渡，完毕后重新连接回来。具体实现方式可参考 <strong>方式一</strong></p>
<h2 id="使用Bone-IK"><a href="#使用Bone-IK" class="headerlink" title="使用Bone IK"></a>使用Bone IK</h2><p><del> 现在我们再来看看更高级的用法 骨骼IK动画。如果我们需要做一些更逼真的效果IK技术是少不了的。为了方便展示 我们在这边Clone一下代码。</del></p>
<p>在我写本篇的时候我发现官方在 2018.8.29日 发过关于Playable API 调用IK动画的范例，这里就再重复的赘述。下面是原文链接 <a href="http://forum.china.unity3d.com/thread-32814-1-1.html" target="_blank" rel="external">🔗 [技术] 详解Animation C# Jobs</a></p>
<p>您可以直接克隆下面的代码范例中检验效果。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clone https:<span class="comment">//github.com/KeyleXiao/animation-jobs-samples.git</span></div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总体而言Playable API提供了更低层的操作方式，对于使用者的要求更高。如果您现在想要在项目中实践建议先不要用高级特性(ik部分)，因为这部分的功能目前还是实验性功能，API的相关文档并不完善。使用动画的控制API进行 Lengacy Animation的替换工作还是很有意义，不仅在与效率，与Timeline结合使用更能发挥出事半功倍的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上篇给大家介绍了 “Playables API” 的使用方法与背后的意义，本篇将会进一步带大家深入其中。 本篇重点还是会放到  “Playables API” 上，不会对 &lt;strong&gt;Timeline&lt;/strong&gt; 进行集中讲解，但是搞明白了 “Playables API” 也就意味着理解了 &lt;strong&gt;Timeline&lt;/strong&gt; 最复杂的部分，到时候学起来也会非常的快。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANIMATION" scheme="http://vrast.cn/tags/ANIMATION/"/>
    
  </entry>
  
  <entry>
    <title>GPUSkinning</title>
    <link href="http://vrast.cn/posts/fa938638/"/>
    <id>http://vrast.cn/posts/fa938638/</id>
    <published>2018-09-17T08:04:05.000Z</published>
    <updated>2018-09-21T07:32:22.331Z</updated>
    
    <content type="html"><![CDATA[<p>GPUSkinning 教程大纲(UNITY3D)<br>节一. 原理</p>
<ol>
<li>动画：理解骨骼动画的运作方式</li>
<li>模型：理解美术的制作流程</li>
<li>骨骼：理解骨骼动画以及背后的数学意义</li>
</ol>
<p>节二. 实践</p>
<ol>
<li>技术背景</li>
<li>使用GPUSkinning</li>
<li>工作原理(重点)</li>
<li>实际效果</li>
<li>其他可以同时进行的优化方案</li>
</ol>
<a id="more"></a>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="动画：骨骼动画的运作方式"><a href="#动画：骨骼动画的运作方式" class="headerlink" title="动画：骨骼动画的运作方式"></a>动画：骨骼动画的运作方式</h2><p>让们从轻松一点的内容开始本篇教程吧。</p>
<p>　　在的游戏中，骨骼动画的基础是关键帧技术，们先重温一下关键帧技术。</p>
<p>比较有代表性的是<strong>帧动画</strong>：们将一段较长的动作分解成几个关键帧，然后基于此进行动画的制作。即使现在们使用的工具更新换代，制作动画的思路还是大致如此，拆分与过渡。所有的工具都是帮们自动完善其中的细节。</p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNjg4NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<p><strong>Skinned Mesh</strong>：中文一般称作骨骼蒙皮动画，正如其名，这种动画中包含骨骼（ Bone ）和蒙皮 (Skinned Mesh) 两个部分， Bone 的层次结构和关节动画类似， Mesh 则和关节动画不同：关节动画中是使用多个分散的 Mesh, 而 Skinned Mesh 中 Mesh 是一个整体，也就是说只有一个 Mesh, 实际上如果没有骨骼让 Mesh 运动变形， Mesh 就和静态模型一样了。 Skinned Mesh 技术的精华在于蒙皮，所谓的皮并不是模型的贴图（也许会有人这么想过吧），而是 Mesh 本身，蒙皮是指将 Mesh 中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。 Skinned Mesh 这个词从字面上理解似乎是有皮的模型，哦，如果贴图是皮，那么普通静态模型不也都有吗？所以觉得应该理解为具有蒙皮信息的 Mesh 或可当做皮肤用的 Mesh ，这个皮肤就是 Mesh 。而为了有皮肤功能， Mesh 还需要蒙皮信息，即 Skin 数据，没有 Skin 数据就是一个普通的静态 Mesh 了。Skin 数据决定顶点如何绑定到骨骼上。顶点的 Skin 数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重(weight) ，另外</p>
<p><strong>Bone</strong>:对于每块骨骼还需要骨骼偏移矩阵 (BoneOffsetMatrix) 用来将顶点从 Mesh 空间变换到骨骼空间。骨骼控制蒙皮运动，而骨骼本身的运动呢？当然是动画数据了。每个关键帧中包含时间和骨骼运动信息，运动信息可以用一个矩阵直接表示骨骼新的变换，也可用四元数表示骨骼的旋转，也可以随便自己定义什么只要能让骨骼动就行。除了使用编辑设定好的动画帧数据，也可以使用物理计算对骨骼进行实时控制。</p>
<p><strong>UNITY3D中的Skinned Mesh Renderer组件</strong>:UNITY3D在导入模型的时候自动会给模型附加<strong>蒙皮网格(Skinned Mesh Renderer)</strong>，使用Unity骨骼人物的主要优势是可以使骨骼受到物理影响，譬如使用角色布娃娃。如下图所示<strong>Skinned Mesh Renderer</strong>会自动关联其对应的骨骼。</p>
<p><img src="/uploads/WX20180918-155553.png" alt=""></p>
<h2 id="模型：理解美术的制作流程"><a href="#模型：理解美术的制作流程" class="headerlink" title="模型：理解美术的制作流程"></a>模型：理解美术的制作流程</h2><p>　们在本文中主要讨论在UNITY3D内的实现方式。在UNITY中常用T-Pose居多。 T-Pose方便们对应骨骼与蒙皮方便校验表现与骨骼位置不一致的地方。对于每个骨骼，美术在建模的时候就进行了绑定，对于们程序只需要进行动画的播放，一般在骨骼上有一些额外的挂点。这些挂点是模拟出来的额外的点，通常提供给们挂一些武器或其他装备物体的节点。在完成建模后，在进行骨骼绑定的时候，通常美术会选择模型的盆骨做为模型的根骨骼。那么基于根骨骼，可以递推出各个骨骼相对于根骨的父子关系。通过骨骼所在的空间，其原点们会选择两个脚之间的中点作为原点，这时候就会发现根骨骼并没有和原点重合，这时美术会构建一个Scene_Root做为额外的骨骼，其位置就为世界原点，而真正的根骨骼Bip01会作为Scene_Root的唯一子骨骼。</p>
<p><img src="/uploads/unitychan.png" alt=""></p>
<h2 id="骨骼：理解骨骼动画以及背后的数学意义"><a href="#骨骼：理解骨骼动画以及背后的数学意义" class="headerlink" title="骨骼：理解骨骼动画以及背后的数学意义"></a>骨骼：理解骨骼动画以及背后的数学意义</h2><p>首先要明确一个观念：<strong>骨骼决定了模型整体在世界坐标系中的位置和朝向。</strong><br>静态模型没有骨骼，们在世界坐标系中放置静态模型时，只要指定模型自身坐标系在世界坐标系中的位置和朝向。在骨骼动画中，不是把 Mesh 直接放到世界坐标系中， Mesh 只是作为 Skin 使用的，是依附于骨骼的，真正决定模型在世界坐标系中的位置和朝向的是骨骼。在渲染静态模型时，由于模型的顶点都是定义在模型坐标系中的，所以各顶点只要经过模型坐标系到世界坐标系的变换后就可进行渲染。而对于骨骼动画，们设置模型的位置和朝向，实际是在设置根骨骼的位置和朝向，然后根据骨骼层次结构中父子骨骼之间的变换关系计算出各个骨骼的位置和朝向，然后根据骨骼对 Mesh 中顶点的绑定计算出顶点在世界坐标系中的坐标，从而对顶点进行渲染。要记住，在骨骼动画中，骨骼才是模型主体， Mesh 不过是一层皮，一件衣服。</p>
<p><img src="/uploads/bonejoint.png" alt=""><br>骨骼只是一个形象的说法，实际上<strong>骨骼可理解为一个坐标空间，关节可理解为骨骼坐标空间的原点</strong>。关节的位置由它在父骨骼坐标空间中的位置描述。上图中有三块骨骼，分别是上臂，前臂和两个手指。 Clavicle( 锁骨 ) 是一个关节，它是上臂的原点，同样肘关节 (elbow joint) 是前臂的原点，腕关节 (wrist) 是手指骨骼的原点。关节既决定了骨骼空间的位置，又是骨骼空间的旋转和缩放中心。为什么用一个 4X4 矩阵就可以表达一个骨骼，因为 4X4 矩阵中含有的平移分量决定了关节的位置，旋转和缩放分量决定了骨骼空间的旋转和缩放。们来看前臂这个骨骼，其原点位置是位于上臂上某处的，对于上臂来说，它知道自己的坐标空间某处（即肘关节所在的位置）有一个子空间，那就是前臂，至于前臂里面是啥就不考虑了。当前臂绕肘关节旋转时，实际是前臂坐标空间在旋转，从而其中包含的子空间也在绕肘关节旋转，在这个例子中是 finger 骨骼。和实际生物骨骼不同的是，们这里的骨骼并没有实质的骨头，所以前臂旋转时，他自己没啥可转的，改变的只是坐标空间的朝向。你可以说上图的蓝线在转，但实际蓝线并不存在，蓝线只是画上去表示骨骼之间关系的，真正转的是骨骼空间，们能看到在转的是 wrist joint ，也就是两个 finger 骨骼的坐标空间，因为他们是子空间，会跟随父空间运动，就好比人跟着地球转一样。</p>
<p><strong>骨骼就是坐标空间，骨骼层次就是嵌套的坐标空间。</strong>关节只是描述骨骼的位置即骨骼自己的坐标空间原点在其父空间中的位置，绕关节旋转是指骨骼坐标空间（包括所有子空间）自身的旋转，如此理解足矣。但还有两个可能的疑问，一是骨骼的长度问题，由于骨骼是坐标空间，没有所谓的长度和宽度的限制，们看到的长度一方面是蒙皮后的结果，另一方面子骨骼的原点（也就是关节）的位置往往决定了视觉上父骨骼的长度，比如这里 upper arm 线段的长度实际是由elbow joint 的位置决定的。第二个问题，手指的那个端点是啥啊？实际上在们的例子中手指没有子骨骼，所以那个端点并不存在：）那是为了方便演示画上去的。实际问题中总有最下层的骨骼，他们不能决定其他骨骼了，他们的作用只剩下控制 Mesh 顶点。对了，那么手指的长度如何确定？们看到的长度应该是由手指部分的顶点和蒙皮决定的，也就是由 Mesh 中属于手指的那些点离腕关节的距离决定。</p>
<p>为什么要将骨骼组织成层次结构呢？答案是为了做动画方便，设想如果只有一块骨骼，那么让他动起来就太简单了，动画每一帧直接指定他的位置即可。如果是n块呢？通过组成一个层次结构，就可以通过父骨骼控制子骨骼的运动，牵一发而动全身，改变某骨骼时并不需要设置其下子骨骼的位置，子骨骼的位置会通过计算自动得到。上文已经说过，父子骨骼之间的关系可以理解为，<strong>子骨骼位于父骨骼的坐标系中</strong>。们知道物体在坐标系中可以做平移变换，以及自身的旋转和缩放变换。子骨骼在父骨骼的坐标系中也可以做这些变换来改变自己在其父骨骼坐标系中的位置和朝向等。那么如何表示呢？由于4X4矩阵可以同时表示上述三种变换，所以一般描述骨骼在其父骨骼坐标系中的变换时使用一个矩阵，<strong>也就是DirectX SkinnedMesh中的FrameTransformMatrix</strong>。实际上这不是唯一的方法，但应该是公认的方法，因为矩阵不光可以同时表示多种变换还可以方便的通过连乘进行变换的组合，这在层次结构中非常方便。</p>
<p><strong>Vertex blending公式</strong><br>现在让们用一个公式总结一下Vertex blending的整个过程(使用矩阵变换)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vworld = Vmesh * BoneOffsetMatrix1 * CombindMatrix1 * Weight1</div><div class="line">+ Vmesh* BoneOffsetMatrix2 * CombinedMatrix2 * Weight2</div><div class="line">+ …</div><div class="line">+ Vmesh * BoneOffsetMatrixN * CombindMatrixN * WeightN</div></pre></td></tr></table></figure></p>
<p>（这个公式使用的是行向量左乘矩阵）</p>
<p>由于BoneOffsetMatrix和Combined Matrix都是矩阵，可以先相乘这样就减少很多计算了。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>UNITY3D默认的骨骼动画组件[SKinnedMeshRender]使用的是CPU蒙皮，屏幕内模型较多的时候会造成CPU负担过大，导致卡顿，手机发热等。新版本UNITY3D可以开启GPU Skinning，但其使用的 Transfrom feedback 会将大量顶点从GPU传到CPU再计算，以此来完成动画融合或IK等功能。因此需要高效的GPU蒙皮方案。</p>
<h2 id="使用GPUSkinning"><a href="#使用GPUSkinning" class="headerlink" title="使用GPUSkinning"></a>使用GPUSkinning</h2><ol>
<li>使用Unity Animation/Animator和SkinnedMeshRenderer制作角色prefab， 保证Animation/Animator组件子构件有SkinnedMeshRenderer（可以参考Example目录中的例子）</li>
<li>添加GPUSkinningSampler脚本到Animation/Animator绑定的GameObject上</li>
</ol>
<p><img src="/uploads/QQ20180919-151122@2x.png" alt=""></p>
<p>更详细的资料您可参考  <a href="http://gsdn.sdo.com/help/GRender/GpuSkinning/GpuSkinning.html" target="_blank" rel="external">GpuSkinning使用手册 – GSDN</a></p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>当场景中有很多人物动画模型的时候会产生大量开销，这些开销除了 DrawCall 外，很大一部分来自于骨骼动画。Unity 内置提供了 GPU Skinning 的功能，但测试下来并没有对整体性能有任何提升，反而整体的开销增加了不少。有很多种方法来减小骨骼动画的开销，每一种方法都有其利弊，都不是万金油，这里介绍的方法同样如此。其实本质还是 GPU Skinning，由们自己来实现，但是和 Unity 内置的 GPU Skinning 有所区别。<br><img src="/uploads/QQ20180919-155831@2x.png" alt=""></p>
<p>从上图中可以看到，Unity 调用到了 Opengl ES 的 Transform Feedback 接口，这个接口至少要到 OpenGL ES 3.0 才有。</p>
<p>在开启 GPUSkinning 的时候，Unity 确实已经在 CPU 中进行了骨骼变换，而后将矩阵数组传递给 Shader，通过 Transform Feedback 后，将结果存储到 Buffer Object 中，这时 Buffer Object 中存储的顶点数据已经是蒙皮完成了，最后渲染模型的时候直接拿来用即可。下面这段 glsl 既是输出 Transform Feedback 的，也证明了这点。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#version 300 es</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_bone_count = <span class="number">32</span>;</div><div class="line"><span class="keyword">const</span> highp <span class="keyword">float</span> max_bone_count_inv = <span class="number">1.0</span> / <span class="keyword">float</span>(max_bone_count); </div><div class="line"><span class="keyword">const</span> highp <span class="keyword">float</span> half_texel = <span class="number">0.5</span> * max_bone_count_inv; </div><div class="line"><span class="keyword">in</span> vec3 in_vertex;</div><div class="line"><span class="keyword">in</span> vec3 in_normal;</div><div class="line"><span class="keyword">in</span> vec4 in_tangent;</div><div class="line"><span class="keyword">in</span> ivec2 in_boneIndices;</div><div class="line"><span class="keyword">in</span> vec2  in_boneWeights;</div><div class="line"><span class="keyword">out</span> vec3 out_pos;</div><div class="line"><span class="keyword">out</span> vec3 out_normal;</div><div class="line"><span class="keyword">out</span> vec4 out_tangent;</div><div class="line"></div><div class="line">uniform vec4 bones[max_bone_count*<span class="number">3</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_MATRIX(idx) mat4( bones[int(idx)*3 + 0], bones[int(idx)*3 + 1], bones[int(idx)*3 + 2], vec4(0.0, 0.0, 0.0, 1.0))</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span></div><div class="line">&#123;</div><div class="line">    vec4 inpos = vec4(in_vertex.xyz, <span class="number">1.0</span>);</div><div class="line">    mat4 localToWorldMatrix = GET_MATRIX(in_boneIndices.x) * in_boneWeights[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(in_boneWeights[<span class="number">1</span>] &gt; <span class="number">0.0</span>)</div><div class="line">        localToWorldMatrix += GET_MATRIX(in_boneIndices.y) * in_boneWeights[<span class="number">1</span>] ;</div><div class="line">    out_pos = (inpos * localToWorldMatrix).xyz;</div><div class="line">    gl_Position = vec4(out_pos.xyz, <span class="number">1.0</span>);</div><div class="line">    out_normal = normalize( ( vec4(in_normal.xyz, <span class="number">0.0</span>) * localToWorldMatrix)).xyz;</div><div class="line">    out_tangent = vec4( normalize( ( vec4(in_tangent.xyz, <span class="number">0.0</span>) * localToWorldMatrix)).xyz, in_tangent.w);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次们要动手实现的就是这个过程，但是不使用 Transform Feedback，因为要保证在 OpenGL ES 2.0 上也能良好运行，况且引擎也没有提供这么底层的接口。</p>
<p>大致的步骤是这样的：</p>
<p>将骨骼动画数据序列化到自定义的数据结构中。这么做是因为这样能完全摆脱 Animation 的束缚，并且可以做到 Optimize Game Objects（Unity 中一个功能，将骨骼的层级结构 GameObjects 完全去掉，减少开销），同时不丢失绑点。<br>在 CPU 中进行骨骼变换。<br>将骨骼变换的结果传递给 GPU，进行蒙皮。<br>很简单的三大步，对于传统的骨骼动画来说没有任何特殊的步骤，下面会对其中的每一步展开说明，并将其中的细节说清楚。</p>
<h3 id="提取骨骼动画数据"><a href="#提取骨骼动画数据" class="headerlink" title="提取骨骼动画数据"></a>提取骨骼动画数据</h3><p><img src="/uploads/QQ20180919-160038@2x.png" alt=""><br>目的就是将这些数据提取出来，存储到自定义的数据结构中。代码大致是这样的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">EditorCurveBinding[] curvesBinding = AnimationUtility.GetCurveBindings(animClip);</div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> curveBinding <span class="keyword">in</span> curvesBinding)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 旋转</span></div><div class="line">    AnimationCurve curveRX = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.x"</span>);</div><div class="line">    AnimationCurve curveRY = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.y"</span>);</div><div class="line">    AnimationCurve curveRZ = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.z"</span>);</div><div class="line">    AnimationCurve curveRW = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalRotation.w"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 位移</span></div><div class="line">    AnimationCurve curvePX = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.x"</span>);</div><div class="line">    AnimationCurve curvePY = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.y"</span>);</div><div class="line">    AnimationCurve curvePZ = AnimationUtility.GetEditorCurve(animClip, curveBinding.path, curveBinding.type, <span class="string">"m_LocalPosition.z"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 不考虑缩放，假定所有骨骼的缩放都是 1</span></div><div class="line"></div><div class="line">    <span class="keyword">float</span> curveRX_v = curveRX.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRY_v = curveRY.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRZ_v = curveRZ.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curveRW_v = curveRW.Evaluate(second);</div><div class="line"></div><div class="line">    <span class="keyword">float</span> curvePX_v = curvePX.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curvePY_v = curvePY.Evaluate(second);</div><div class="line">    <span class="keyword">float</span> curvePZ_v = curvePZ.Evaluate(second);</div><div class="line"></div><div class="line">    Vector3 translation = <span class="keyword">new</span> Vector3(curvePX_v, curvePY_v, curvePZ_v);</div><div class="line">    Quaternion rotation = <span class="keyword">new</span> Quaternion(curveRX_v, curveRY_v, curveRZ_v, curveRW_v);</div><div class="line">    NormalizeQuaternion(<span class="keyword">ref</span> rotation);</div><div class="line">    matrices.Add(</div><div class="line">        Matrix4x4.TRS(translation, rotation, Vector3.one)</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有两个注意点。第一，要清楚 AnimationCurve 中提取出来的旋转量是欧拉角还是四元数，这里一开始就弄错了，想当然认为是欧拉角，所以随后计算得到的结果也就错了。第二，用来旋转的四元数，必须是单位四元数（模是1），否则你会得到 Unity 的一个报错信息。</p>
<p>以上的代码中，将每一帧的数据以 30fps 的频率直接采样了出来，其实也可以不采样出来，而是等需要的时候再从 AnimationCurve 中采样，这样会更平滑但是运行时的计算量也更多了。</p>
<h3 id="骨骼变换"><a href="#骨骼变换" class="headerlink" title="骨骼变换"></a>骨骼变换</h3><p>骨骼变换是所有代码的核心部分了，看似挺复杂，其实想清楚后代码量是最少的:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 更新 Walk 动作的所有骨骼变换</span></div><div class="line">    UpdateBoneAnimationMatrix(<span class="string">"Walk"</span>, second);</div><div class="line">    second += Time.deltaTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateBoneAnimationMatrix</span>(<span class="params"><span class="keyword">string</span> animName, <span class="keyword">float</span> time</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// boneAnimation 是我们自定义的数据结构</span></div><div class="line">    <span class="comment">// 其中存储了刚才从 AnimationCurve 中采样到的动画数据</span></div><div class="line">    GPUSkinning_BoneAnimation boneAnimation = GetBoneAnimation(animName);</div><div class="line">    <span class="keyword">int</span> frameIndex = (<span class="keyword">int</span>)(time * boneAnimation.fps) % (<span class="keyword">int</span>)(boneAnimation.length * boneAnimation.fps);</div><div class="line">    <span class="comment">// 获取当前播放的是哪一帧的动画数据</span></div><div class="line">    GPUSkinning_BoneAnimationFrame frame = boneAnimation.frames[frameIndex];</div><div class="line"></div><div class="line">    <span class="comment">// 刷新所有的骨架动画矩阵</span></div><div class="line">    UpdateBoneTransformMatrix(bones[rootBoneIndex], Matrix4x4.identity, frame);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateBoneTransformMatrix</span>(<span class="params">GPUSkinning_Bone bone, Matrix4x4 parentMatrix, GPUSkinning_BoneAnimationFrame frame</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> index = BoneAnimationFrameIndexOf(frame, bone);</div><div class="line">    Matrix4x4 mat = parentMatrix * frame.matrices[index];</div><div class="line">    <span class="comment">// 当前骨骼</span></div><div class="line">    bone.animationMatrix = mat * bone.bindpose;</div><div class="line"></div><div class="line">    <span class="comment">// 继续递归子骨骼</span></div><div class="line">    GPUSkinning_Bone[] children = bone.children;</div><div class="line">    <span class="keyword">int</span> numChildren = children.Length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numChildren; ++i)</div><div class="line">    &#123;</div><div class="line">        UpdateBoneTransformMatrix(children[i], mat, frame);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单来说骨骼变换就是一个矩阵乘法，比如 bone0（简写为b0） 是 bone1（简写为b1） 的父骨骼：<br><img src="/uploads/QQ20180919-160341@2x.png" alt=""></p>
<p>注意这里是矩阵左乘（从右往左读），trs 是 Matrix4x4.TRS，也就是从 AnmationCurve 采样到的数据。<br>Bindpose 的作用是将模型空间中的顶点坐标变换到骨骼空间中（是骨骼矩阵的逆矩阵），然后应用当前骨骼的变换，沿着层级关系一层层的变换下去。</p>
<h3 id="蒙皮"><a href="#蒙皮" class="headerlink" title="蒙皮"></a>蒙皮</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    UpdateBoneAnimationMatrix(<span class="string">"Walk"</span>, second);</div><div class="line">    Play();</div><div class="line">    second += Time.deltaTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Matrix4x4[] matricesUniformBlock = <span class="literal">null</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Play</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> numBones = bones.Length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numBones; ++i)</div><div class="line">    &#123;</div><div class="line">        matricesUniformBlock[i] = bones[i].animationMatrix;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将骨骼变换的结果传递到 Shader 中</span></div><div class="line">    <span class="comment">// SetMatrixArray这是 Unity5.4 之后提供的新的 API</span></div><div class="line">    <span class="comment">// 以前是不能直接传一个数组的，只能一个个元素单独传，效率很低</span></div><div class="line">    <span class="comment">// 新的 API 减小了开销（看下图）</span></div><div class="line">    newMtrl.SetMatrixArray(shaderPropID_Matrices<span class="comment">/*_Matrices*/</span>, matricesUniformBlock);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180919-160501@2x.png" alt=""><br>由于骨骼数量固定为 24，所以图中的 96 = 24 x 4</p>
<p>使用 SetMatrixArray 其实有点浪费了，因为对于一个 4x4 的矩阵（四个float4）来说，最后一维永远是 （0, 0, 0, 1），所以可以使用 3x4的矩阵（三个float4）代替，这样就减少了数据传递的压力。</p>
<p>现在所有的骨骼变换矩阵已经传递到 Shader 中了，就可以使用这些数据来蒙皮（变换顶点坐标）</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模型确定为 24 个骨骼</span></div><div class="line"><span class="comment">// 不同的设备对常量寄存器存储的最大数据量都是有差别的，这一点需要注意</span></div><div class="line">uniform float4x4 _Matrices[<span class="number">24</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> appdata</div><div class="line">&#123;</div><div class="line">    float4 vertex : POSITION;</div><div class="line">    float2 uv : TEXCOORD0;</div><div class="line">    <span class="comment">// tangent 存储了骨骼索引和权重</span></div><div class="line">    <span class="comment">// tangent.x 第一根骨骼索引</span></div><div class="line">    <span class="comment">// tangent.y 第一根骨骼权重</span></div><div class="line">    <span class="comment">// tangent.z 第二根骨骼索引</span></div><div class="line">    <span class="comment">// tangent.w 第二根骨骼权重</span></div><div class="line">    float4 tangent : TANGENT;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">v2f <span class="title">vert</span> (<span class="params">appdata v</span>)</span></div><div class="line">&#123;</div><div class="line">    v2f o;</div><div class="line"></div><div class="line">    <span class="comment">// 蒙皮</span></div><div class="line">    float4 pos = </div><div class="line">        mul(_Matrices[v.tangent.x], v.vertex) * v.tangent.y + </div><div class="line">        mul(_Matrices[v.tangent.z], v.vertex) * v.tangent.w;</div><div class="line"></div><div class="line">    <span class="comment">// 注意，如果用到了 normal，也要像顶点一样经过蒙皮处理哦</span></div><div class="line"></div><div class="line">    o.vertex = mul(UNITY_MATRIX_MVP, pos);</div><div class="line">    o.uv = TRANSFORM_TEX(v.uv, _MainTex);</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Mesh.tangents 里预先存储了骨骼索引和权重</span></div><div class="line"><span class="comment">// tangent 里只容得下两个骨骼融合</span></div><div class="line">Vector4[] tangents = <span class="keyword">new</span> Vector4[mesh.vertexCount];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mesh.vertexCount; ++i)</div><div class="line">&#123;</div><div class="line">    BoneWeight boneWeight = mesh.boneWeights[i];</div><div class="line">    tangents[i].x = boneWeight.boneIndex0;</div><div class="line">    tangents[i].y = boneWeight.weight0;</div><div class="line">    tangents[i].z = boneWeight.boneIndex1;</div><div class="line">    tangents[i].w = boneWeight.weight1;</div><div class="line">&#125;</div><div class="line">newMesh.tangents = tangents;</div></pre></td></tr></table></figure>
<h2 id="其他可以同时进行的优化方案"><a href="#其他可以同时进行的优化方案" class="headerlink" title="其他可以同时进行的优化方案"></a>其他可以同时进行的优化方案</h2><ol>
<li>除了使用GPUSkinning之外们还可以选择使用层次细节（LOD），它是根据物体在游戏画面中所占视图的百分比来调用不同复杂度的模型的。简单而言，就是当一个物体距离摄像机比较远的时候使用低模，当物体距离摄像机比较近的时候使用高模。这是一种优化游戏渲染效率的常用方法，缺点是占用大量内存。使用这个技术，一般是在解决运行时流畅度的问题，采用的是空间换时间的方式。<br><strong>结合GPUSkinning与LOD将会大大提高同屏数量，同时相应的画面会有所降低。可根据实际情况进行处理。</strong></li>
</ol>
<ol>
<li>启用多线程渲染(Multithreading render) ，启用多线程渲染之后渲染效率高出一半左右。原理是将Mesh渲染任务交给另外的渲染进程以此降低当前进程的渲染耗时。<br><img src="/uploads/QQ20180919-145406.png" alt=""><br><img src="/uploads/multithreaded_rendering_0.png" alt=""></li>
</ol>
<ol>
<li>在模型上启用Optmize GameObject降低CPU耗时<br>启用Optmize GameObject之前<br><img src="/uploads/QQ20180919-150059.png" alt=""><br>启用Optmize GameObject之后<br><img src="/uploads/QQ20180919-150223.png" alt=""><br>Optmize GameObject会极大降低骨骼数目对多线程的影响，从而达到降低主线程的CPU耗时。</li>
</ol>
<p>本文部分内容参考如下链接:<br><a href="http://chengkehan.github.io/GPUSkinning.html" target="_blank" rel="external">🔗 GPU Skinning -Jim’s GameDev Blog</a><br><a href="https://v.qq.com/x/page/s05175xbjvd.html" target="_blank" rel="external">🔗 Unity中动画系统的性能优化方案-uwa</a><br><a href="https://www.youtube.com/watch?v=uDqjIdI4bF4&amp;t=660s" target="_blank" rel="external">🔗 YouTube 12 Principles of Animation</a><br><a href="https://blog.csdn.net/n5/article/details/3105872" target="_blank" rel="external">🔗 Skinned Mesh原理解析和一个最简单的实现示例</a><br><a href="hhttps://docs.unity3d.com/Manual/class-SkinnedMeshRenderer.html" target="_blank" rel="external">🔗 Unity官方文档 Skinned Mesh Renderer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GPUSkinning 教程大纲(UNITY3D)&lt;br&gt;节一. 原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动画：理解骨骼动画的运作方式&lt;/li&gt;
&lt;li&gt;模型：理解美术的制作流程&lt;/li&gt;
&lt;li&gt;骨骼：理解骨骼动画以及背后的数学意义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;节二. 实践&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术背景&lt;/li&gt;
&lt;li&gt;使用GPUSkinning&lt;/li&gt;
&lt;li&gt;工作原理(重点)&lt;/li&gt;
&lt;li&gt;实际效果&lt;/li&gt;
&lt;li&gt;其他可以同时进行的优化方案&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="教程" scheme="http://vrast.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="GPUSkinning" scheme="http://vrast.cn/tags/GPUSkinning/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D Playables API 实践(上)</title>
    <link href="http://vrast.cn/posts/5df16bd2/"/>
    <id>http://vrast.cn/posts/5df16bd2/</id>
    <published>2018-09-07T07:01:13.000Z</published>
    <updated>2018-09-21T07:31:55.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Playables API 推出已经一年有余(2017–07–04 New in Unity 2017.1)。即使你没时间其他的新功能， 也应该看看这个 <code>Playable API</code> .做过大型游戏的同学无论你是做过 2D或3D 只要使用过 Animaiton Controller,或多或少体会过被 蜘蛛网(复杂状态机过渡) 支配的恐惧。当下有了 <code>Playable API</code> 可供使用，我们能轻易的向 Legacy animation API 的使用习惯靠拢 — 高效及易于定制。</p>
<p><img src="/uploads/WX20180907-152657.png" alt="一个简单的状态机，当然这不是我们想要的。"></p>
<font color="#185FB4">在我看来 Playable API 的目的就是为了替换掉Legacy动画系统，并且兼容Timeline（本篇不介绍timeline 感兴趣的可以自己去看看）。总的一个词概括就是 【dynamically】，如同使用组件一般的灵活。</font>

<blockquote>
<p>目前我在测试中使用了 UNITY2018.1+ 编辑器。如果不使用该可视化插件您在 UNITY5.x 版本就能使用<code>Playable API</code>。 使用5.x版本的Playable API 时请注意后续的代码API变更，某些函数名或调用方式可能已经更改，如果从未使用过 建议从 UNITY2017+ 开始入手。</p>
</blockquote>
<a id="more"></a>
<h1 id="准备工作-可跳过"><a href="#准备工作-可跳过" class="headerlink" title="准备工作(可跳过)"></a>准备工作(可跳过)</h1><h2 id="调试工具-graph-visualizer"><a href="#调试工具-graph-visualizer" class="headerlink" title="调试工具 graph-visualizer"></a>调试工具 graph-visualizer</h2><p>我们先Clone UNITY TECHNOLOGIES 提供的 <code>Playable</code> 可视化工具，便于后续的理解与调试。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Unity-Technologies/graph-visualizer</div></pre></td></tr></table></figure></p>
<p>我在这里直接克隆到测试工程中，目前此工具支持的UNITY版本如下：</p>
<table>
<thead>
<tr>
<th>Unity version</th>
<th>Release</th>
</tr>
</thead>
<tbody>
<tr>
<td> 2018.1+</td>
<td>v2.2 (master)</td>
</tr>
<tr>
<td> 2017.1+</td>
<td>v1.1</td>
</tr>
</tbody>
</table>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p><img src="/uploads/WX20180911-144337@2x.png" alt="Clone成功后 打开 Window/graph-visualizer ,在创建PlayGraph的地方调用 GraphVisualizerClient.Show(graph) 即可，在运行时可看到动态创建的树形结构"></p>
<p><img src="/uploads/WX20180911-144513@2x.png" alt="您将会得到这样的画面 右侧为示范图例，可手动关闭。"></p>
<h1 id="Playable基础结构"><a href="#Playable基础结构" class="headerlink" title="Playable基础结构"></a>Playable基础结构</h1><p><img src="/uploads/QQ20180910-164716@2x.png" alt=""><br>这两个结构体是我们最需要关注的部分，我们可以结合上文的 PlayableGraph 例图来总结一下规律。 AnimationOutput 是根节点，Playable 是可以通过 后为XXXXXMixerPlayable 来进行组合 或 单独使用，并且至少有一个才能构成最简单的 PlayableGraph。</p>
<p><img src="/uploads/WX20180911-150945@2x.png" alt="&lt;font color=#3976C3&gt;小技巧：编辑器中输入MixerPlayable 可以看到所有可用的Mixer(结构体)，通过这些类 我们可以轻易的将一个个不同种类的节点连接在一起从而形成新的树形结构。&lt;/font&gt;"></p>
<h1 id="快速上手案例-动画的播放"><a href="#快速上手案例-动画的播放" class="headerlink" title="快速上手案例 动画的播放"></a>快速上手案例 动画的播放</h1><h2 id="创建一个最基础的-PlayableGraph"><a href="#创建一个最基础的-PlayableGraph" class="headerlink" title="创建一个最基础的 PlayableGraph"></a>创建一个最基础的 PlayableGraph</h2><p><img src="/uploads/WX20180911-163559@2x.png" alt="我们使用五行代码就创建了一个最基础的 PlayableGraph。"></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable = AnimationClipPlayable.Create(playableGraph, clip);</div><div class="line">playableOutput.SetSourcePlayable(clipPlayable);</div><div class="line"></div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<p>⚠️ 您同样可以使用一行代码就能调用此动画，这里需要注意的是<strong>Animator</strong>不能为空，否则编辑器会直接crash而不报异常。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AnimationPlayableUtilities.PlayClip(GetComponent&lt;Animator&gt;(), clip, <span class="keyword">out</span> playableGraph);</div></pre></td></tr></table></figure></p>
<h2 id="创建最基础的两动画融合"><a href="#创建最基础的两动画融合" class="headerlink" title="创建最基础的两动画融合"></a>创建最基础的两动画融合</h2><p><img src="/uploads/WX20180911-171707@2x.png" alt="这里我们新增了几行代码，值得注意的是截图所示mixer节点中有两个重要的属性 inputcount 与 outputcount ，顾名思义。我们既可以从 PlayableGraph 的级别指定两个AnimationClip连接到mixer上，可以使用mixer 直接去进行链接点设置。"><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create(<span class="string">"test graph"</span>);</div><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"test Animation"</span>,_animator = GetComponent&lt;Animator&gt;());</div><div class="line"></div><div class="line">mixerPlayable = AnimationMixerPlayable.Create(playableGraph, <span class="number">2</span>);</div><div class="line">playableOutput.SetSourcePlayable(mixerPlayable);</div><div class="line"></div><div class="line"><span class="keyword">var</span> clipPlayable1 = AnimationClipPlayable.Create(playableGraph, clip1);</div><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimationClipPlayable.Create(playableGraph, clip2);</div><div class="line"></div><div class="line"><span class="comment">//playableGraph.Connect(clipPlayable1,0,mixerPlayable,0);</span></div><div class="line"><span class="comment">//playableGraph.Connect(clipPlayable2, 0, mixerPlayable, 1);</span></div><div class="line"><span class="comment">//上面的两行与下面的两行代码是等价的</span></div><div class="line">mixerPlayable.ConnectInput(<span class="number">0</span>,clipPlayable1,<span class="number">0</span>);</div><div class="line">mixerPlayable.ConnectInput(<span class="number">1</span>,clipPlayable2,<span class="number">0</span>);</div><div class="line"></div><div class="line">weight = Mathf.Clamp01(weight);</div><div class="line">mixerPlayable.SetInputWeight(<span class="number">0</span>, <span class="number">1.0</span>f-weight);<span class="comment">//分别设置两个数据端口的权重</span></div><div class="line">mixerPlayable.SetInputWeight(<span class="number">1</span>, weight);</div><div class="line"></div><div class="line">playableGraph.Play();</div><div class="line">GraphVisualizerClient.Show(playableGraph);</div></pre></td></tr></table></figure></p>
<h2 id="混合使用-AnimationClip-与-AnimatorController"><a href="#混合使用-AnimationClip-与-AnimatorController" class="headerlink" title="混合使用 AnimationClip 与 AnimatorController"></a>混合使用 AnimationClip 与 AnimatorController</h2><p>修改上文【创建最基础的两动画融合】所提供的代码块 即可。AnimatorController 可以看作是一颗子树，它可以轻易的使用<strong>mixerPlayable</strong>与其他的clip进行融合，这一切的便利归功于UNITY重写的通用动画调用层。</p>
<p>在视频中您可以观察最左侧在融合权重的变化下两颗树的融合情况：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clipPlayable2 = AnimatorControllerPlayable.Create(playableGraph, controller);</div></pre></td></tr></table></figure></p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNTM4NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<h2 id="增加-PlayableGraph-的输出口-类型"><a href="#增加-PlayableGraph-的输出口-类型" class="headerlink" title="增加 PlayableGraph 的输出口(类型)"></a>增加 PlayableGraph 的输出口(类型)</h2><p>看到这里我们应该慢慢的有一些概念了</p>
<blockquote>
<p>记忆技巧：右输入口(数量) 左输出口(数量)。 这两个东西贯穿整体的设计中。即使最基础的 playable 组件都有这两个属性。这两个属性也是我们设计一棵树的常规操作。PlayableGraph 就是这颗树，额外需要理解的是： 它允许(限制了) 我们需要用不同 类型的主分支 然后才扩展出其他分支。</p>
</blockquote>
<p>⚠️ 所有子节点初始化的时候都没有设置输出输入端口数量 您需要手动指派。否则会报错:<font color="e70000">Connecting invalid input</font></p>
<p><img src="/uploads/ScreenShot2018-09-12at4.19.37PM.png" alt="&lt;font color=#3976C3&gt;小技巧：编辑器中输入playableoutput 可以看到所有可用的类型(结构体)，通过这些类 我们可以轻易的给PlayableGraph添加不同类型的子分支。&lt;/font&gt;"></p>
<p>目前我们已经用过了<code>AnimationPlayableOutput</code> 下面演示一些 <code>AudioPlayableOutput</code> 的案例。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">playableGraph = PlayableGraph.Create();</div><div class="line"><span class="keyword">var</span> audioOutput = AudioPlayableOutput.Create(playableGraph, <span class="string">"Audio"</span>, GetComponent&lt;AudioSource&gt;());</div><div class="line"><span class="keyword">var</span> audioClipPlayable = AudioClipPlayable.Create(playableGraph, audioClip, <span class="literal">true</span>);</div><div class="line">audioOutput.SetSourcePlayable(audioClipPlayable);</div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20180912-163420.png" alt="借此代码抛砖引玉，另外几种类型(主分支)也是同样的使用方法"></p>
<h2 id="控制PlayableGraph-树-中的状态切换"><a href="#控制PlayableGraph-树-中的状态切换" class="headerlink" title="控制PlayableGraph(树)中的状态切换"></a>控制PlayableGraph(树)中的状态切换</h2><p>因为 XXXPlayable 都是继承自同接口，以下函数同样适用于其他类型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">audioClipPlayable.Pause();     <span class="comment">//暂停</span></div><div class="line">audioClipPlayable.Play();      <span class="comment">//播放</span></div><div class="line">audioClipPlayable.SetDelay(<span class="number">1</span>); <span class="comment">//设置延迟</span></div></pre></td></tr></table></figure>
<p>参考代码片段 </p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> i = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    i += Time.deltaTime;</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (audioClipPlayable.GetPlayState() == PlayState.Paused)</div><div class="line">            audioClipPlayable.Play();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            audioClipPlayable.Pause();</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制树的时间"><a href="#控制树的时间" class="headerlink" title="控制树的时间"></a>控制树的时间</h2><p>因为 XXXPlayable 都是继承自同接口，以下函数同样适用于其他类型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">float</span> time;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    playableGraph = PlayableGraph.Create();</div><div class="line"></div><div class="line">    clipPlayable = AnimationPlayableUtilities.PlayClip(GetComponent&lt;Animator&gt;(), clip, <span class="keyword">out</span> playableGraph);</div><div class="line">    clipPlayable.Pause();</div><div class="line"></div><div class="line">    playableGraph.Play();</div><div class="line">    GraphVisualizerClient.Show(playableGraph);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    weight = Mathf.Clamp01(weight);</div><div class="line">    clipPlayable.SetTime(time);    <span class="comment">//控制播放进度,无上限超出部分自动循环动画</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在视频中您可以观察时间的前进与后退直接作用于当前动画节点：</p>
<embed src="http://player.youku.com/player.php/sid/XMzgzMjMzNzQwMA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<h2 id="使用-PlayableBehaviour"><a href="#使用-PlayableBehaviour" class="headerlink" title="使用 PlayableBehaviour"></a>使用 PlayableBehaviour</h2><p>顾名思义 <strong>PlayableBehaviour</strong> 就是自己定义的Playable行为，我们实现了一个 <strong>PlayQueuePlayable</strong> 并且制定一些特殊的逻辑在其中（循环播放clip）。</p>
<ol>
<li>我们先看下它是如何初始化的：<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> playQueuePlayable = ScriptPlayable&lt;PlayQueuePlayable&gt;.Create(playableGraph);<span class="comment">//泛型工厂</span></div><div class="line"><span class="keyword">var</span> playQueue = playQueuePlayable.GetBehaviour();<span class="comment">//容器函数 获取饮用</span></div><div class="line">playQueue.Initialize(clipsToPlay, playQueuePlayable, playableGraph);<span class="comment">//用户自定义初始化函数</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>从第二行代码中使用了泛型工厂来创建 <strong>playablebehavior</strong> 我们可以看出它是一个通用的容器，而并是开箱即用的树节点。</p>
<ol>
<li>容器初始化完毕，将它设置为主动画分支的下一级节点，操作完毕。<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> playableOutput = AnimationPlayableOutput.Create(playableGraph, <span class="string">"Animation"</span>, GetComponent&lt;Animator&gt;());</div><div class="line">playableOutput.SetSourcePlayable(playQueuePlayable,<span class="number">0</span>);</div><div class="line">playableGraph.Play();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么现在我们已经了解了如何使用这个容器。现在开始探究容器的内部实现：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnGraphStart</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnGraphStop</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPlayableCreate</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPlayableDestroy</span>(<span class="params">Playable playable</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourDelay</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourPlay</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnBehaviourPause</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PrepareData</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PrepareFrame</span>(<span class="params">Playable playable, FrameData info</span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessFrame</span>(<span class="params">Playable playable, FrameData info, <span class="keyword">object</span> playerData</span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，动画周期内的大部分检测与判断我们都能在这里进行.</p>
<p>最后我们再看一下自定义类 <strong>PlayQueuePlayable</strong> 的行为逻辑。</p>
<ol>
<li><p>上文提到的 <strong>Initialize</strong> 函数，这里动态创建了 <em>AnimationClipPlayable</em> 并且指派端口链接到了 <em>PlayQueuePlayable</em> </p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">AnimationClip[] clipsToPlay, Playable owner, PlayableGraph graph</span>)</span></div><div class="line">&#123;</div><div class="line">    owner.SetInputCount(<span class="number">1</span>);</div><div class="line">    mixer = AnimationMixerPlayable.Create(graph, clipsToPlay.Length);</div><div class="line">    graph.Connect(mixer, <span class="number">0</span>, owner, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> clipIndex = <span class="number">0</span> ; clipIndex &lt; mixer.GetInputCount() ; ++clipIndex)</div><div class="line">    &#123;</div><div class="line">        graph.Connect(AnimationClipPlayable.Create(graph, clipsToPlay[clipIndex]), <span class="number">0</span>, mixer, clipIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重写 <strong>PrepareFrame</strong> 函数，用来检测动画帧在播放前的逻辑(一帧调一次) 这里需要避免复杂的检测逻辑，我们实现了简单的轮播逻辑：让动画一个接一个的切换。</p>
</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> m_CurrentClipIndex = <span class="number">-1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> m_TimeToNextClip;</div><div class="line"><span class="keyword">private</span> Playable mixer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrepareFrame</span>(<span class="params">Playable owner, FrameData info</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (mixer.GetInputCount() == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Advance to next clip if necessary</span></div><div class="line">    m_TimeToNextClip -= (<span class="keyword">float</span>)info.deltaTime;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (m_TimeToNextClip &lt;= <span class="number">0.0</span>f)</div><div class="line">    &#123;</div><div class="line">        m_CurrentClipIndex++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (m_CurrentClipIndex &gt;= mixer.GetInputCount())</div><div class="line">            m_CurrentClipIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> currentClip = (AnimationClipPlayable)mixer.GetInput(m_CurrentClipIndex);</div><div class="line"></div><div class="line">        currentClip.SetTime(<span class="number">0</span>);</div><div class="line">        m_TimeToNextClip = currentClip.GetAnimationClip().length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> clipIndex = <span class="number">0</span> ; clipIndex &lt; mixer.GetInputCount(); ++clipIndex)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (clipIndex == m_CurrentClipIndex)</div><div class="line">            mixer.SetInputWeight(clipIndex, <span class="number">1.0</span>f);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mixer.SetInputWeight(clipIndex, <span class="number">0.0</span>f);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章节带大家过了一遍Playables API的基本使用，并且抛砖引玉的进行了一些技巧讲解，相信经过本章节的学习大家一定对 Playables API 充满了兴趣，在下一章我们讲讲更详细的 手部IK 与 分层动画 的运用。我们可以借此实现人物的攀爬/射击/复杂运动等。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&amp;mid=2247493316&amp;idx=1&amp;sn=7e4fef834a8066faca3d2f1f1a090bb4&amp;chksm=fe1dd26fc96a5b79856840f556cf65026facb83520ac1891605e42d5e777d30a0d5219060e21&amp;mpshare=1&amp;scene=1&amp;srcid=0606YJLYnfprk9UjpPQCnre1#rd" target="_blank" rel="external">🔗  UNITY官方微信号相关</a></p>
<p><a href="https://docs.unity3d.com/2018.1/Documentation/Manual/Playables.html" target="_blank" rel="external">🔗  UNITY官方文档相关</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Playables API 推出已经一年有余(2017–07–04 New in Unity 2017.1)。即使你没时间其他的新功能， 也应该看看这个 &lt;code&gt;Playable API&lt;/code&gt; .做过大型游戏的同学无论你是做过 2D或3D 只要使用过 Animaiton Controller,或多或少体会过被 蜘蛛网(复杂状态机过渡) 支配的恐惧。当下有了 &lt;code&gt;Playable API&lt;/code&gt; 可供使用，我们能轻易的向 Legacy animation API 的使用习惯靠拢 — 高效及易于定制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/WX20180907-152657.png&quot; alt=&quot;一个简单的状态机，当然这不是我们想要的。&quot;&gt;&lt;/p&gt;
&lt;font color=#185FB4  &gt;在我看来 Playable API 的目的就是为了替换掉Legacy动画系统，并且兼容Timeline（本篇不介绍timeline 感兴趣的可以自己去看看）。总的一个词概括就是 【dynamically】，如同使用组件一般的灵活。&lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;目前我在测试中使用了 UNITY2018.1+ 编辑器。如果不使用该可视化插件您在 UNITY5.x 版本就能使用&lt;code&gt;Playable API&lt;/code&gt;。 使用5.x版本的Playable API 时请注意后续的代码API变更，某些函数名或调用方式可能已经更改，如果从未使用过 建议从 UNITY2017+ 开始入手。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANIMATION" scheme="http://vrast.cn/tags/ANIMATION/"/>
    
  </entry>
  
  <entry>
    <title>绘制聊天气泡思路</title>
    <link href="http://vrast.cn/posts/bd424e64/"/>
    <id>http://vrast.cn/posts/bd424e64/</id>
    <published>2018-08-08T03:24:52.000Z</published>
    <updated>2018-09-07T06:41:49.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录一些小技巧 ，借此机会重新开始写作 .这里提供两种思路，最后建议将这两种做法结合一下 可以做成类似微信聊天气泡的效果。</p>
</blockquote>
<a id="more"></a>
<p>有两种方式来实现了聊天气泡，第一种是自己去计算当前文字的宽度，然后控制背景气泡进行宽度与高度的缩放。参考代码如下</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BubbleFormate</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//            MainContent.GraphicUpdateComplete();</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (MainContent.rectTransform.sizeDelta.x &gt; MainContent.preferredWidth)</div><div class="line">    &#123;</div><div class="line">        MainContentBG.rectTransform.sizeDelta =</div><div class="line">            <span class="keyword">new</span> Vector2(</div><div class="line">                MainContentBG.rectTransform.sizeDelta.x -</div><div class="line">                (MainContent.rectTransform.sizeDelta.x - MainContent.preferredWidth),</div><div class="line">                MainContentBG.rectTransform.sizeDelta.y</div><div class="line">            );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> temp_width = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> rawContent = MainContent.text;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MainContent.text.Length; i++)</div><div class="line">        &#123;</div><div class="line">            MainContent.font.GetCharacterInfo(MainContent.text[i], <span class="keyword">out</span> temp_info, MainContent.fontSize);</div><div class="line">            temp_width += temp_info.advance;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (temp_width &gt;= MainContent.rectTransform.sizeDelta.x)</div><div class="line">            &#123;</div><div class="line">                rawContent = rawContent.Insert(i, <span class="string">"\n"</span>);</div><div class="line">                temp_width = temp_info.advance;</div><div class="line">                </div><div class="line">                MainContentBG.rectTransform.sizeDelta = <span class="keyword">new</span> Vector2(</div><div class="line">                    MainContentBG.rectTransform.sizeDelta.x,</div><div class="line">                    MainContentBG.rectTransform.sizeDelta.y + MainContent.preferredHeight</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        MainContent.text = rawContent;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/canvas-wrap.gif" alt="第二种方式是使用 Layout 布局进行规范"></p>
<p>最后我建议使用这两者的结合，在控制宽度的时候不加限制，自己判断宽度然后动态的添加换行符。</p>
<p>这样的好处是能控制文本框的长短，做成类似微信聊天这种 消息长的话 气泡就会变长，反之亦然。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一些小技巧 ，借此机会重新开始写作 .这里提供两种思路，最后建议将这两种做法结合一下 可以做成类似微信聊天气泡的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="Chat" scheme="http://vrast.cn/tags/Chat/"/>
    
  </entry>
  
  <entry>
    <title>LipSync插件调研2</title>
    <link href="http://vrast.cn/posts/3bc1c7b4/"/>
    <id>http://vrast.cn/posts/3bc1c7b4/</id>
    <published>2018-04-24T03:41:33.000Z</published>
    <updated>2018-05-11T09:59:47.570Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这周会计划研究LipSync方向，会写一些资料记录过程。本篇并不讲详细使用步骤，只讨论其功能实现。</p>
</blockquote>
<p>本篇评测的工具实现方式都相近,插件列表如下：</p>
<p><strong>LipSync Pro【U3D】</strong><br><strong>EasyTalk【U3D】</strong><br><del><strong>Lipsync Tool【美术用】</strong></del><br><del><strong>Face and lips</strong></del></p>
<p>评测的方向： 1. 嘴型同步   2.面部表情<br>评测角度：   1. 实现方式   2. 可用性<br><a id="more"></a></p>
<h1 id="一般有语音层的-LipSync-工具结构都相似"><a href="#一般有语音层的-LipSync-工具结构都相似" class="headerlink" title="一般有语音层的 LipSync 工具结构都相似"></a>一般有语音层的 LipSync 工具结构都相似</h1><p><img src="/uploads/QQ20180424.jpeg" alt="LipSync工具在流程上都类似 1.导入转码，转换成便于语音识别层使用的格式 2.识别(需要语言与声学模型支持) 3.特定格式的数据导出 4.根据数据源进行口型融合(口型事先映射好了)"><br><img src="/uploads/QQSample1.png" alt="EasyTalk语音识别工具"><br><img src="/uploads/QQ20180427-162401@2x.png" alt="在这一层中EasyTalk并不友好，他在外部实现的音频解析工具并不提供源码，导致我们无法根据项目对插件进行定制"> </p>
<p><img src="/uploads/QQSample2.png" alt="Face and lips不参加本次评测是其非主流应用方式，需要美术通过MikuMikuDance编辑器制作动作等，应用方向请参考【极乐净土】 "><br><img src="/uploads/QQSample3.png" alt="LipSyncPro插件稳定性有待提高：在进行测试的期间此插件在mac上有代码级别的问题。1.4.1版本代码bug 手动修复后WIN7能跑，1.4.2最新版修复了前版本的bug但是在mac上运行仍旧有其他bug导致不能解析音频。【目前mac版本不能解析音频bug正在查】"><br><img src="/uploads/hs_err_pid2167.png" alt="Lipsync Tool不参加本次评测的原因有三 1.Demo下载后只有英语语言模型，不提供其他语言下载 2.主要是美术用在maya或3dmax做插件 3.价格高，最便宜5500$."></p>
<h2 id="语音识别层介绍"><a href="#语音识别层介绍" class="headerlink" title="语音识别层介绍"></a>语音识别层介绍</h2><h3 id="在LipSyncPro中的CMUSphinx语音识别层"><a href="#在LipSyncPro中的CMUSphinx语音识别层" class="headerlink" title="在LipSyncPro中的CMUSphinx语音识别层"></a>在LipSyncPro中的CMUSphinx语音识别层</h3><p>在介绍实现方式之前我们先深入一下<strong>语音识别层</strong>，原因是此类型插件都使用了语音识别出的数据作为驱动口型的<strong>数据源</strong>。</p>
<p><strong>CMUSphinx</strong> 是一个开源组件 作为<strong>语音识别层</strong>层的核心 ,下文是简介</p>
<p>[CMU Sphinx, also called Sphinx in short, is the general term to describe a group of speech recognition systems developed at Carnegie Mellon University. These include a series of speech recognizers (Sphinx 2 - 4) and an acoustic model trainer (SphinxTrain).</p>
<p>In 2000, the Sphinx group at Carnegie Mellon committed to open source several speech recognizer components, including Sphinx 2 and later Sphinx 3 (in 2001). The speech decoders come with acoustic models and sample applications. The available resources include in addition software for acoustic model training, Language model compilation and a public domain pronunciation dictionary, cmudict.</p>
<p>Sphinx encompasses a number of software systems, described below.   —来自维基百科](<a href="https://en.wikipedia.org/wiki/CMU_Sphinx" target="_blank" rel="external">https://en.wikipedia.org/wiki/CMU_Sphinx</a>)</p>
<h3 id="在CMUSphinx之上使用语音训练创建语言模型"><a href="#在CMUSphinx之上使用语音训练创建语言模型" class="headerlink" title="在CMUSphinx之上使用语音训练创建语言模型"></a>在CMUSphinx之上使用语音训练创建语言模型</h3><blockquote>
<p><strong>CMUSphinx</strong> 使用的语言库是可以自己训练的 <a href="https://cmusphinx.github.io/wiki/tutoriallm/" target="_blank" rel="external">Building a language model</a>。工程量比较大，如果没有做好充足准备(资源)不建议自己训练语言库。我们自己训练的库是需要优化的，不是做完就能用，良好的语音模型拥有更高的识别率，在高识别率的前提下我们最终得到的口型会更加准确。下面例举了一些做语言训练需要的资源</p>
</blockquote>
<p><strong>1.真人进行训练</strong><br>训练之前，假设你有充足的数据：</p>
<p>用于单个人的指令应用，至少需要一小时录音，<br>用于很多人指令应用，需要200个录音人，每人5小时<br>用于单个人的听写，需要10小时他的录音<br>用于多个人的听写，需要200个说话人，每人50小时的录音<br>同时你要有这门语言的语音学知识，以及你有足够的比如一个月的时间，来训练模型</p>
<p><strong>2.使用机器学习</strong><br>1.您必须为指定的语言收集音频材料。实际上这不是这么复杂的事情。有声书本、电影和播客提供足够的录音构建良好的声学模型。<br>2.语音学习需要您构建一个框架,用于跟踪错误的发音。包括代不正确的发音和得分。这里可以使用 cmusphinx 的机器学习。</p>
<h1 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h1><h3 id="可借鉴优点"><a href="#可借鉴优点" class="headerlink" title="可借鉴优点"></a>可借鉴优点</h3><ol>
<li>速度快，基于语音识别可以快速匹配出所有的音素，并且映射相应的口型</li>
<li>表情多，可以定制非常多的口型与面部表情</li>
<li>可修改，可以自己手动编辑已经识别完毕的【音频对应的口型配置文件】</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>每种语言需要对应的声学与语言模型</li>
<li>难深度定制，我们只能定制表层使用，深入到语音识别层面很难。</li>
</ol>
<h1 id="补充资料-Lipsync-Tool"><a href="#补充资料-Lipsync-Tool" class="headerlink" title="补充资料 Lipsync Tool"></a>补充资料 Lipsync Tool</h1><p>对 Lipsync Tool 这款工具进行一些补充说明。下文是一些技术标准</p>
<p>目前支持导出格式如下，主要在影视方向，这里提到有简单的脚本导出但是不确定实现，他并未支持任何的游戏引擎。目前只是衔接了影视与建模软件。<br>It exports a simple text format readable from most scripting languages.<br>3ds max script for creating animations in max from lipsync tool files<br>MAYA .mov files, melscript (Lipscript) importer<br>.swf, .as : Macromedia Flash Files</p>
<p><a href="https://en.wikipedia.org/wiki/CMU_Sphinx" target="_blank" rel="external">🔗 CMUSphinx介绍</a><br><a href="http://sox.sourceforge.net" target="_blank" rel="external">🔗 SOX音频处理库</a><br><a href="https://cmusphinx.github.io/wiki/tutoriallm/" target="_blank" rel="external">🔗 Building a language model</a><br><a href="https://www.cnblogs.com/lijieqiong/p/4817373.html" target="_blank" rel="external">🔗【sphinx】中文声学模型训练</a><br><a href="https://blog.csdn.net/zouxy09/article/details/7941585" target="_blank" rel="external">🔗 语音识别的基础知识与CMUsphinx介绍</a><br><a href="http://www.annosoft.com/prices" target="_blank" rel="external">🔗 Lipsync Tool官网 annosoft价格表</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这周会计划研究LipSync方向，会写一些资料记录过程。本篇并不讲详细使用步骤，只讨论其功能实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇评测的工具实现方式都相近,插件列表如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LipSync Pro【U3D】&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;EasyTalk【U3D】&lt;/strong&gt;&lt;br&gt;&lt;del&gt;&lt;strong&gt;Lipsync Tool【美术用】&lt;/strong&gt;&lt;/del&gt;&lt;br&gt;&lt;del&gt;&lt;strong&gt;Face and lips&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;评测的方向： 1. 嘴型同步   2.面部表情&lt;br&gt;评测角度：   1. 实现方式   2. 可用性&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LipSync插件调研1</title>
    <link href="http://vrast.cn/posts/a08d0c34/"/>
    <id>http://vrast.cn/posts/a08d0c34/</id>
    <published>2018-04-23T02:52:44.000Z</published>
    <updated>2018-04-27T07:14:45.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这周会计划研究LipSync方向，会写一些资料记录过程。本篇并不讲详细使用步骤，只讨论其功能实现。</p>
</blockquote>
<p>本篇评测的插件列表如下：<br><strong> SALSA With RandomEyes </strong><br><strong> UniLip </strong> </p>
<p>评测的方向： 1. 嘴型同步<br>评测角度：   1. 实现方式   2. 可用性</p>
<a id="more"></a>
<h1 id="SALSA-With-RandomEyes"><a href="#SALSA-With-RandomEyes" class="headerlink" title="SALSA With RandomEyes"></a>SALSA With RandomEyes</h1><p>插件包含 SALSA与RandomEyes 两部分。这里与后文并不关注RandomEyes相关话题。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="美术：使用-blend-shape-制作-三口型"><a href="#美术：使用-blend-shape-制作-三口型" class="headerlink" title="美术：使用 blend shape 制作 三口型"></a>美术：使用 blend shape 制作 三口型</h3><p>在分析了插件包内的 boxHead.fbx 文件之后看到了如下层级结构：</p>
<p><img src="/uploads/WechatIMG273.png" alt="boxHead.fbx"></p>
<p>具体做法在层级面板上已经可以反推出来美术的制作流程<br><img src="/uploads/WechatIMG281.png" alt="boxHead.fbx"></p>
<ol>
<li>美术这边首先在不同的层级上作出不同的口型表现，本插件要求美术在上图中三个Say开头的层级上实现三个口型</li>
<li>使用 blend shape 绑定。这是一种做融合动画(面部口型)的特殊做法。为什么不用骨骼动画？因为用骨骼动画做节点太多了。</li>
</ol>
<h3 id="策划配置：三变量"><a href="#策划配置：三变量" class="headerlink" title="策划配置：三变量"></a>策划配置：三变量</h3><p><img src="/uploads/QQ20180423-175144.png" alt="策划只需要配置三个阀值给程序作为控制动画过渡的条件"></p>
<h3 id="程序实现：控制面部口型过渡"><a href="#程序实现：控制面部口型过渡" class="headerlink" title="程序实现：控制面部口型过渡"></a>程序实现：控制面部口型过渡</h3><p>为了达到控制口型的目的，SALSA启动了一个携程在每个<code>audioUpdateDelay</code>周期内对音频采样。后获得<code> average </code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">UpdateSample</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">float</span> addedVals = <span class="number">0.0</span>f;</div><div class="line">    <span class="keyword">this</span>.sample = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="keyword">this</span>.sampleSize];</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">bool</span>) ((Object) <span class="keyword">this</span>.audioSrc))</div><div class="line">      <span class="keyword">this</span>.audioSrc.GetSpectrumData(<span class="keyword">this</span>.sample, <span class="number">0</span>, FFTWindow.BlackmanHarris);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.sample.Length; ++index)</div><div class="line">      addedVals += <span class="keyword">this</span>.sample[index];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.audioSrc.isPlaying &amp;&amp; (<span class="keyword">double</span>) <span class="keyword">this</span>.average == <span class="number">0.0</span>)</div><div class="line">      <span class="keyword">this</span>.writeAverage = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.audioSrc.isPlaying)</div><div class="line">      <span class="keyword">this</span>.writeAverage = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.writeAverage)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">this</span>.average = <span class="number">0.0</span>f;</div><div class="line">      <span class="keyword">this</span>.average = addedVals / (<span class="keyword">float</span>) <span class="keyword">this</span>.sampleSize;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">yield</span> <span class="title">return</span> (<span class="params"><span class="keyword">object</span></span>) new <span class="title">WaitForSeconds</span>(<span class="params"><span class="keyword">this</span>.audioUpdateDelay</span>)</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code> average </code>配合策划设置的三个数指(saySmallTrigger/sayMediumTrigger/sayLargeTrigger) 来控制什么时间点融合什么动画。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prevIsTalking != <span class="keyword">this</span>.isTalking)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.prevIsTalking = <span class="keyword">this</span>.isTalking;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.broadcast)</div><div class="line">      <span class="keyword">this</span>.TalkStatusChanged();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((<span class="keyword">double</span>) <span class="keyword">this</span>.average &lt; (<span class="keyword">double</span>) <span class="keyword">this</span>.saySmallTrigger)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.say = <span class="string">"Rest"</span>;</div><div class="line">    <span class="keyword">this</span>.sayIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.saySmallValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.saySmallValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayMediumValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayMediumValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayLargeValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayLargeValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">(<span class="keyword">double</span></span>) <span class="keyword">this</span>.average &lt; (<span class="params"><span class="keyword">double</span></span>) <span class="keyword">this</span>.sayMediumTrigger)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.say = <span class="string">"Small"</span>;</div><div class="line">    <span class="keyword">this</span>.sayIndex = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.saySmallValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.saySmallValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Increment);</div><div class="line">    <span class="keyword">this</span>.sayMediumValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayMediumValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayLargeValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayLargeValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">(<span class="keyword">double</span></span>) <span class="keyword">this</span>.average &lt; (<span class="params"><span class="keyword">double</span></span>) <span class="keyword">this</span>.sayLargeTrigger)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.say = <span class="string">"Medium"</span>;</div><div class="line">    <span class="keyword">this</span>.sayIndex = <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.saySmallValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.saySmallValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayMediumValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayMediumValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Increment);</div><div class="line">    <span class="keyword">this</span>.sayLargeValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayLargeValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.say = <span class="string">"Large"</span>;</div><div class="line">    <span class="keyword">this</span>.sayIndex = <span class="number">3</span>;</div><div class="line">    <span class="keyword">this</span>.saySmallValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.saySmallValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayMediumValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayMediumValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Decrement);</div><div class="line">    <span class="keyword">this</span>.sayLargeValue = SalsaUtility.LerpRangeOfMotion(<span class="keyword">this</span>.sayLargeValue, <span class="keyword">this</span>.blendSpeed, <span class="keyword">this</span>.rangeOfMotion, SalsaUtility.BlendDirection.Increment);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sayAmount.saySmall = <span class="keyword">this</span>.saySmallValue;</div><div class="line">  <span class="keyword">this</span>.sayAmount.sayMedium = <span class="keyword">this</span>.sayMediumValue;</div><div class="line">  <span class="keyword">this</span>.sayAmount.sayLarge = <span class="keyword">this</span>.sayLargeValue;</div><div class="line">  <span class="keyword">if</span> ((<span class="keyword">bool</span>) ((Object) <span class="keyword">this</span>.skinnedMeshRenderer))</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">this</span>.skinnedMeshRenderer.SetBlendShapeWeight(<span class="keyword">this</span>.saySmallIndex, <span class="keyword">this</span>.sayAmount.saySmall);</div><div class="line">    <span class="keyword">this</span>.skinnedMeshRenderer.SetBlendShapeWeight(<span class="keyword">this</span>.sayMediumIndex, <span class="keyword">this</span>.sayAmount.sayMedium);</div><div class="line">    <span class="keyword">this</span>.skinnedMeshRenderer.SetBlendShapeWeight(<span class="keyword">this</span>.sayLargeIndex, <span class="keyword">this</span>.sayAmount.sayLarge);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!(<span class="keyword">bool</span>) ((Object) <span class="keyword">this</span>.audioSrc))</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.audioSrc.isPlaying)</div><div class="line">    <span class="keyword">this</span>.isTalking = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">this</span>.isTalking = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="UniLip"><a href="#UniLip" class="headerlink" title="UniLip"></a>UniLip</h1><p>此插件可实现与 SALSA With RandomEyes 的实现原理一样，侧重点不同，他开放了更多的口型给策划配置。</p>
<p>此函数等于  SALSA With RandomEyes 在上文例举的 <code>UpdateSample</code> 代码片段。<del>不同的是作者将这段代码放在了<code>Update</code>循环之中，从纯代码上看效率比SALSA With RandomEyes还要差。</del></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AudioProcess</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (audioSource == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    audioSource.GetOutputData(samples, <span class="number">0</span>);</div><div class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLECOUNT; i++)</div><div class="line">    &#123;</div><div class="line">        sum += Mathf.Pow(samples[i], <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    rmsValue = Mathf.Sqrt(sum / SAMPLECOUNT);</div><div class="line">    dbValue = <span class="number">20</span> * Mathf.Log10(rmsValue / REFVALUE);</div><div class="line"></div><div class="line">    audioSource.GetSpectrumData(spectrum, <span class="number">0</span>, FFTWindow.BlackmanHarris);</div><div class="line">    <span class="keyword">float</span> maxV = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> maxN = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLECOUNT; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (spectrum[i] &gt; maxV &amp;&amp; spectrum[i] &gt; THRESHOLD)</div><div class="line">        &#123;</div><div class="line">            maxV = spectrum[i];</div><div class="line">            maxN = i; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">float</span> sum2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLECOUNT; i++)</div><div class="line">    &#123;</div><div class="line">        sum += Mathf.Abs(samples[i]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    volume = (sum / SAMPLECOUNT);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> picthCounter = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> lastDir = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> lastPos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLECOUNT; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">float</span> dir = samples[i];</div><div class="line">        <span class="keyword">if</span> (Mathf.Sign(dir) != Mathf.Sign(lastDir))</div><div class="line">            picthCounter++;</div><div class="line"></div><div class="line">        lastDir = dir;</div><div class="line">        lastPos = samples[i];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    pitchValue2 = (picthCounter * <span class="number">1000.0</span>f / SAMPLECOUNT);</div><div class="line"></div><div class="line">    <span class="keyword">float</span> freqN = maxN;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (maxN &gt; <span class="number">0</span> &amp;&amp; maxN &lt; SAMPLECOUNT - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">float</span> dL = spectrum[maxN - <span class="number">1</span>] / spectrum[maxN];</div><div class="line">        <span class="keyword">float</span> dR = spectrum[maxN + <span class="number">1</span>] / spectrum[maxN];</div><div class="line">        freqN += <span class="number">0.5</span>f * (dR * dR - dL * dL);</div><div class="line">    &#125;</div><div class="line">    pitchValue = freqN * <span class="number">24000</span> / SAMPLECOUNT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/uploads/QQ20180426-144637.png">与 SALSA With RandomEyes 不同的地方是他支持了多个口型的随机。</a></p>
<h1 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h1><h3 id="可借鉴优点"><a href="#可借鉴优点" class="headerlink" title="可借鉴优点"></a>可借鉴优点</h3><ol>
<li>策划门槛低，使用美术制作的 blend shape 减小导出模型体积，并且灵活程序控制，程序只需要通过一些策划配置好的条件便可以将任意两个口型进行过渡。</li>
<li>这种做法不存在动画衔接问题。因为所有的状态我们都可以看作是两个clip之间的过渡。</li>
<li>通过采样率与音频的高低来控制脸型与嘴形的同步，在某种意义上来说是一种假同步，正是这种”假同步”才不存在多语言问题。</li>
<li>免预处理，导入即用</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>表现上不足，假同步解决了多语言问题但是带来了表现力不足,仔细看口型与音频完全不是一回事，但通常我们不会仔细看。</li>
<li>移动端效率堪忧，在移动端上大规模使用本做法 <code>周期采样音频</code> 是有效率问题的。</li>
<li>不能直接使用，如果使用此中做法开发口型系统这两个插件都不能直接用，需要基于项目对插件进行二次开发。</li>
</ol>
<p><a href="https://www.douban.com/note/566951438/" target="_blank" rel="external">🔗 捕捉音谱</a><br><a href="https://blog.csdn.net/liu_if_else/article/details/51233799" target="_blank" rel="external">🔗 用Unity3D内部频谱分析方法做音乐视觉特效的原理说明</a><br><a href="https://www.creativebloq.com/maya/how-animate-character-blend-shapes-10134835" target="_blank" rel="external">🔗 How to animate a character with blend shapes</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这周会计划研究LipSync方向，会写一些资料记录过程。本篇并不讲详细使用步骤，只讨论其功能实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇评测的插件列表如下：&lt;br&gt;&lt;strong&gt; SALSA With RandomEyes &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; UniLip &lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;评测的方向： 1. 嘴型同步&lt;br&gt;评测角度：   1. 实现方式   2. 可用性&lt;/p&gt;
    
    </summary>
    
      <category term="Plugin" scheme="http://vrast.cn/categories/Plugin/"/>
    
    
      <category term="LipSync" scheme="http://vrast.cn/tags/LipSync/"/>
    
  </entry>
  
  <entry>
    <title>protobuf中使用继承</title>
    <link href="http://vrast.cn/posts/67edd270/"/>
    <id>http://vrast.cn/posts/67edd270/</id>
    <published>2018-04-08T06:06:57.000Z</published>
    <updated>2018-04-08T06:18:18.273Z</updated>
    
    <content type="html"><![CDATA[<p>前两天有一个问题一直困扰我。使用protobuf .net版本的时候序列化类，基类的字段会丢失。随后我问了下朋友无一例外他们都使用的是组合而非继承。我也在反思是否这个做法本身就有问题。我昨天Google的时候发现有人遇到相同的问题，遂在本篇中记录。</p>
<a id="more"></a>
<p><a href="https://stackoverflow.com/questions/6109868/protobuf-net-base-class-properties-is-not-included-when-serializing-derived-clas" target="_blank" rel="external">ProtoBuf.net Base class properties is not included when serializing derived class</a> 这个就是我遇到的问题，一摸一样。<br>解决方案如下：如果是子类想要在序列化的时候带上基类的信息请使用【ProtoInclude】，填写上想要包含的类型即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天有一个问题一直困扰我。使用protobuf .net版本的时候序列化类，基类的字段会丢失。随后我问了下朋友无一例外他们都使用的是组合而非继承。我也在反思是否这个做法本身就有问题。我昨天Google的时候发现有人遇到相同的问题，遂在本篇中记录。&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="protobuf" scheme="http://vrast.cn/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>编辑器扩展-分割条</title>
    <link href="http://vrast.cn/posts/8d62e7c3/"/>
    <id>http://vrast.cn/posts/8d62e7c3/</id>
    <published>2018-03-27T01:40:57.000Z</published>
    <updated>2018-03-27T01:52:39.284Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>可拖动分割条在 Unity3D 的编辑器结构中一般都属于最外层结构，因为它是基于 GUI 组件，计算位置的时候必须要很精确，所以跟Layout 流式布局混编会比较乱。这里也推荐作为最外层结构使用。</p>
</blockquote>
<p><img src="/uploads/2018427047.png" alt="可拖动的分割条"><br><a id="more"></a></p>
<h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><p>下面是我写的一个演示例子 你可以在Unity中直接运行。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   		Copyright 2017 KeyleXiao.</span></div><div class="line"><span class="comment">//     		Contact : Keyle_xiao@hotmail.com </span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//     		Licensed under the Apache License, Version 2.0 (the "License");</span></div><div class="line"><span class="comment">//     		you may not use this file except in compliance with the License.</span></div><div class="line"><span class="comment">//     		You may obtain a copy of the License at</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//     		http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//     		Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment">//     		distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment">//     		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment">//     		See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment">//     		limitations under the License.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">using</span>  UnityEditor;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">SmartDataViewer.Editor</span></div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExportWizard</span>:<span class="title">EditorWindow</span></div><div class="line">    &#123;</div><div class="line">        [MenuItem(<span class="string">"SmartDataViewer/ExportWizard"</span>)]</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenView</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> w = CreateInstance&lt;ExportWizard &gt;();</div><div class="line">            </div><div class="line">            w.minSize = <span class="keyword">new</span> Vector2(<span class="number">350</span>,<span class="number">250</span>);</div><div class="line">            w.maxSize = w.minSize;</div><div class="line">            Vector2 pos =<span class="keyword">new</span> Vector2( Screen.width/<span class="number">2</span>-w.minSize.x,Screen.height/<span class="number">2</span>-w.minSize.y);</div><div class="line">            w.position = <span class="keyword">new</span> Rect(pos,w.minSize);</div><div class="line">            </div><div class="line">            w.ShowUtility();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">object</span> rawData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitRawData</span>(<span class="params"><span class="keyword">object</span> data</span>)</span></div><div class="line">        &#123;</div><div class="line">            rawData = data;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">private</span> Vector2 scrollPos = Vector2.zero;</div><div class="line">        <span class="keyword">float</span> currentScrollViewWidth;</div><div class="line">        <span class="keyword">bool</span> resize = <span class="literal">false</span>;</div><div class="line">        Rect cursorChangeRect;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.position = <span class="keyword">new</span> Rect(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">300</span>);</div><div class="line">            currentScrollViewWidth = <span class="keyword">this</span>.position.width/<span class="number">2</span>;</div><div class="line">            cursorChangeRect = <span class="keyword">new</span> Rect(currentScrollViewWidth,<span class="number">0</span>,<span class="number">4</span>f,<span class="keyword">this</span>.position.height);</div><div class="line">        &#125;</div><div class="line">     </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            GUILayout.BeginHorizontal();</div><div class="line">            </div><div class="line">            scrollPos = GUILayout.BeginScrollView(scrollPos,GUILayout.Width(currentScrollViewWidth));</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</div><div class="line">                GUILayout.Label(<span class="string">"test content"</span>);</div><div class="line">            GUILayout.EndScrollView();</div><div class="line">                 </div><div class="line">            ResizeScrollView();</div><div class="line">            </div><div class="line">            GUILayout.Label(<span class="string">"right part"</span>);</div><div class="line">            GUILayout.EndHorizontal();</div><div class="line">            Repaint();</div><div class="line">        &#125;</div><div class="line">     </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResizeScrollView</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            GUI.DrawTexture(cursorChangeRect,EditorGUIUtility.whiteTexture);</div><div class="line">            EditorGUIUtility.AddCursorRect(cursorChangeRect,MouseCursor.ResizeHorizontal);</div><div class="line">         </div><div class="line">            <span class="keyword">if</span>( Event.current.type == EventType.MouseDown &amp;&amp; cursorChangeRect.Contains(Event.current.mousePosition))&#123;</div><div class="line">                resize = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(resize)&#123;</div><div class="line">                currentScrollViewWidth = Event.current.mousePosition.x;</div><div class="line">                cursorChangeRect.Set(currentScrollViewWidth,cursorChangeRect.y,cursorChangeRect.width,cursorChangeRect.height);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(Event.current.type == EventType.MouseUp)</div><div class="line">                resize = <span class="literal">false</span>;        </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>这里的GUI仅仅是做了一个表现，最核心的其实是 <code>cursorChangeRect</code> 因为你即使不要这个 GUI 也能在这个 Rect 的位置进行拖动。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GUI.DrawTexture(cursorChangeRect,EditorGUIUtility.whiteTexture);</div></pre></td></tr></table></figure></p>
<p>在鼠标移动的同时将鼠标当前 x 轴的位置赋前面的一个layout，就会推动后面一个layout. (流式布局)</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;可拖动分割条在 Unity3D 的编辑器结构中一般都属于最外层结构，因为它是基于 GUI 组件，计算位置的时候必须要很精确，所以跟Layout 流式布局混编会比较乱。这里也推荐作为最外层结构使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2018427047.png&quot; alt=&quot;可拖动的分割条&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="UNITY3D编辑器" scheme="http://vrast.cn/tags/UNITY3D%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>UNITY性能优化参考篇</title>
    <link href="http://vrast.cn/posts/69247612/"/>
    <id>http://vrast.cn/posts/69247612/</id>
    <published>2018-03-09T08:12:00.000Z</published>
    <updated>2018-03-09T11:07:23.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>下面是我给项目组的一些参考。其中也包含各种各样的标准，与优化建议。项目优化并不是一件事，它是点点滴滴串联起来的(勿以恶小而为之)，我见过很多项目只是图一时之方便就导致后期很难做 比如 前期未规划好图集，模型贴图材质目录混用，UI制作未按照 复用/特殊 的标准制作，动画导出帧率不统一高高低低 等等。如果一开始没有定制良好的规范，后面想要补救只能靠程序写一些工具批量处理，当然这工具也不一定好写。</p>
</blockquote>
<a id="more"></a>
<p>因为效率优化是一个很泛化的词。所以在这里我只讨论大类进而衍生出 “标准做法”。标准只说通用的，做了不会错的那种。如果你没有做 推荐你试一试。像如同项目贴图设置，灯光设置，烘焙，fog，等 设置问题这里不谈。因为设置的选项是最容易做优化的即使到了后期也是可以快速做的。</p>
<h2 id="美术资源"><a href="#美术资源" class="headerlink" title="美术资源"></a>美术资源</h2><h3 id="资源分级"><a href="#资源分级" class="headerlink" title="资源分级"></a>资源分级</h3><p>如 贴图png/jpg的选择 动画30帧还是60帧的选择 粒子质量高或低还是标准 等。根据不同场合使用不同级别资源。一般来说高质量资源只会出现在最显眼的地方 如 登陆，人物选择，入场。真正战斗调用的美术资源往往只需要普通品质即可。具体项目可以跟着需求来控制，划重点 这里要做差异化 才能省出资源(内存)。</p>
<h4 id="贴图的质量选择"><a href="#贴图的质量选择" class="headerlink" title="贴图的质量选择"></a>贴图的质量选择</h4><p><img src="/uploads/texturequality.png" alt="可参考 https://www.jianshu.com/p/f7c3741f22af"><br>贴图的质量选择主要影响运行时效率，并不影响出包的大小。UNITY3D打包会自己优化图片大小，如果你使用了android studio release 打包，大小会进一步压缩。<br>这里可以想象一下内存与效率的转化。内存占比越高越清晰。这个可以直接通过贴图的前缀或者后缀统一设置。或者写一个资源管理工具 统一设置。</p>
<h2 id="冷热分离-延迟加载"><a href="#冷热分离-延迟加载" class="headerlink" title="冷热分离 延迟加载"></a>冷热分离 延迟加载</h2><ol>
<li>使用延迟加载，如果需要集中加载某些资源可以考虑冷热分离。常驻内存中的资源 与 非常驻内存中的资源采取不同策略：<br>战斗配置 等到战斗场景再加载，关卡/任务/成就/ 等等其他 可以等到打开具体面板或进入场景的时候做一次缓存。</li>
<li>移除空函数 如 继承自MB的 Update 之类的函数。</li>
<li>分帧做iO 或 网络请求的操作。再具体一点就是用携程 该return的地方就return 等候下一帧处理。</li>
<li>高消耗的函数避免甚至不用 基本上UNITY API中以Findxxx开头 返回一个 List 的函数都是高消耗函数。</li>
</ol>
<h2 id="内存控制"><a href="#内存控制" class="headerlink" title="内存控制"></a>内存控制</h2><ol>
<li>使用缓存池 如 通用面板/通用弹出美术字(战斗中伤害数字)/ 等考虑缓存。</li>
<li>监测当前工程在移动端的内存占用，给所有的缓存池增加释放接口 做一些排序释放操作(优先级释放)。<br>可以参考 UNITY5.6 的新API <a href="https://docs.unity3d.com/ScriptReference/Application-lowMemory.html" target="_blank" rel="external">Application.lowMemory</a></li>
<li>使用压缩过的音频 或者 使用 Fmod 之类的插件进行托管。缺氧使用的就是 fmod .</li>
<li>文本配置转2进制存储 减少运行时内存占用。</li>
</ol>
<h2 id="效率重点"><a href="#效率重点" class="headerlink" title="效率重点"></a>效率重点</h2><ol>
<li>使用 line fog 调整相机视野</li>
<li>关闭场景阴影 能用烘焙用烘焙。 </li>
<li>使用 Fast Shadow Projector 做阴影。</li>
<li>不要使用standard shader。因为大量的实时GI运算。</li>
</ol>
<h2 id="打包事项"><a href="#打包事项" class="headerlink" title="打包事项"></a>打包事项</h2><ol>
<li>iOS 如果可以就使用 bit code</li>
<li>APK 使用 Android Studio release 打包</li>
<li>使用  <code>.NET 2.0 Subset </code> 使用脚本代替如 xml 之类的system库的使用。</li>
<li>打包完之后查看 log 确定资源瓶颈。推荐使用 <code>Build Report Tool</code><br>某宝五毛钱能买到最新版。每次打包都需要看一眼，真等到需要做优化的时候已经晚了，优化的需求往往是积累到一定程度才爆发需要优化。</li>
<li>打包过atlas的图就不要再放到Resources下，方便的话就打包成AB</li>
</ol>
<h2 id="一些具体的优化资料"><a href="#一些具体的优化资料" class="headerlink" title="一些具体的优化资料"></a>一些具体的优化资料</h2><p><a href="https://docs.unity3d.com/Manual/OptimizingGraphicsPerformance.html" target="_blank" rel="external">官网 图形性能优化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;下面是我给项目组的一些参考。其中也包含各种各样的标准，与优化建议。项目优化并不是一件事，它是点点滴滴串联起来的(勿以恶小而为之)，我见过很多项目只是图一时之方便就导致后期很难做 比如 前期未规划好图集，模型贴图材质目录混用，UI制作未按照 复用/特殊 的标准制作，动画导出帧率不统一高高低低 等等。如果一开始没有定制良好的规范，后面想要补救只能靠程序写一些工具批量处理，当然这工具也不一定好写。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="性能优化" scheme="http://vrast.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Unity new API</title>
    <link href="http://vrast.cn/posts/76c9e56/"/>
    <id>http://vrast.cn/posts/76c9e56/</id>
    <published>2018-02-26T11:17:08.000Z</published>
    <updated>2018-02-27T07:19:38.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里记录一些Unity3D的API 以备不时之需。</p>
</blockquote>
<a id="more"></a>
<h1 id="Application-lowMemory-低内存检测-5-6"><a href="#Application-lowMemory-低内存检测-5-6" class="headerlink" title="Application.lowMemory 低内存检测 5.6+"></a>Application.lowMemory 低内存检测 5.6+</h1><p>当Andorid或者iOS内存过低会调用此函数。用来处理内存释放 <a href="https://docs.unity3d.com/ScriptReference/Application-lowMemory.html" target="_blank" rel="external">官网文档</a><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">LowMemoryTrigger</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    List&lt;Texture2D&gt; _textures;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        _textures = <span class="keyword">new</span> List&lt;Texture2D&gt;();</div><div class="line">        Application.lowMemory += OnLowMemory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// allocate textures until we run out of memory</span></div><div class="line">        _textures.Add(<span class="keyword">new</span> Texture2D(<span class="number">256</span>, <span class="number">256</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnLowMemory</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// release all cached textures</span></div><div class="line">        _textures = <span class="keyword">new</span> List&lt;Texture2D&gt;();</div><div class="line">        Resources.UnloadUnusedAssets();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录一些Unity3D的API 以备不时之需。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITYAPI" scheme="http://vrast.cn/categories/UNITYAPI/"/>
    
    
      <category term="UNITY3D" scheme="http://vrast.cn/tags/UNITY3D/"/>
    
  </entry>
  
  <entry>
    <title>SNFramework</title>
    <link href="http://vrast.cn/posts/f326c5ce/"/>
    <id>http://vrast.cn/posts/f326c5ce/</id>
    <published>2018-01-16T01:31:33.000Z</published>
    <updated>2018-01-16T05:57:48.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>2015年 我在淘米写了一套 <a href="http://www.cnblogs.com/Keyle/p/4843934.html" target="_blank" rel="external">消息传递机制</a> 当然这一套在我的上家公司也得到验证。<br>2016年 我在世纪创意基于2015年一版的消息传递进行了封装但是当时赶项目也没有引入。我称之为 <a href="https://gitee.com/keyle/SmartNotificationFramework" target="_blank" rel="external">SmartNotificationFramework</a> 我希望它能达到足够的灵活，在我看来它工作的还不错，但是太简陋。<br>2018年 也就是今年我终于得空并且集中时间大量重构与完成了大部分的单元测试。SNFramework 是我正在使用的消息传递机制。它已经有了初步的理想功能，如消息上下分隔离，消息被阅读成功自动释放(即指执行一次)，广播消息等。</p>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/KeyleXiao/SNFramework" target="_blank" rel="external">https://github.com/KeyleXiao/SNFramework</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h1&gt;&lt;p&gt;2015年 我在淘米写了一套 &lt;a href=&quot;http://www.cnblogs.com/Keyle/p/4843934.html&quot; t
    
    </summary>
    
      <category term="OpenSource" scheme="http://vrast.cn/categories/OpenSource/"/>
    
    
      <category term="SNFramework" scheme="http://vrast.cn/tags/SNFramework/"/>
    
  </entry>
  
  <entry>
    <title>分析缺氧(Oxygen not included)中所用到的技术</title>
    <link href="http://vrast.cn/posts/6f00466c/"/>
    <id>http://vrast.cn/posts/6f00466c/</id>
    <published>2018-01-03T09:03:16.000Z</published>
    <updated>2018-01-03T10:53:07.537Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>元旦期间玩了缺氧，感觉十分的好玩。属于深度沙盒经营类游戏。既然好玩那就要知其所以然，今天抽空看了看源码，基本上列出所有能找到的工具或技术。算是一个记录，也开阔一下视野。如果你还有什么补充欢迎给我留言。</p>
</blockquote>
<a id="more"></a>
<h1 id="外部插件列表"><a href="#外部插件列表" class="headerlink" title="外部插件列表"></a>外部插件列表</h1><h2 id="YamlDotNet-amp-Newtonsoft-Json"><a href="#YamlDotNet-amp-Newtonsoft-Json" class="headerlink" title="YamlDotNet &amp; Newtonsoft.Json"></a>YamlDotNet &amp; Newtonsoft.Json</h2><p>序列化工具<br><a href="https://github.com/aaubry/YamlDotNet" target="_blank" rel="external">Github地址</a><br><a href="https://dotnetfiddle.net/QlqGDV" target="_blank" rel="external">代码演示地址1</a><br><a href="https://dotnetfiddle.net/HD2JXM" target="_blank" rel="external">代码演示地址2</a></p>
<p>Newtonsoft.Json 就不说了 这个大家都知道，毕竟不是小众</p>
<h2 id="FileHelpers-Library"><a href="#FileHelpers-Library" class="headerlink" title="FileHelpers Library"></a>FileHelpers Library</h2><p>FileHelpers Library是一款C#编写的开源 .NET 类库。它使用简单，很容易就可以从固定长度文件或界定记录(CSV)读/写数据。它也支持从不同的数据存储格式(Excel, Access, SqlServer)导入/导出数据。 <a href="http://www.filehelpers.net" target="_blank" rel="external">FileHelpers官网</a></p>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>ArabicSuppor.dll  阿拉伯语支持<br>I18N.dll / I18N.West.dll Unity自带的国际化工具</p>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>Ionic.Zip 老牌的解压与压缩类库 <a href="https://dotnetzip.codeplex.com" target="_blank" rel="external">项目地址 Codeplex</a><br>SharpZipLib C#解压压缩类库 <a href="https://github.com/icsharpcode/SharpZipLib" target="_blank" rel="external">项目地址</a></p>
<h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><p>libnoise.dll 用于随机算法(噪声)  <a href="http://libnoise.sourceforge.net" target="_blank" rel="external">项目地址</a></p>
<h2 id="Png读写"><a href="#Png读写" class="headerlink" title="Png读写"></a>Png读写</h2><p>Pngcs 用来对png图读写的工具 <a href="https://github.com/leonbloy/pngcs" target="_blank" rel="external">Pngcs项目地址</a><br>我猜主场景的图片应该在不停的读写，这样比生成10000*10000的贴图效率高的多。</p>
<h1 id="内部引用插件列表"><a href="#内部引用插件列表" class="headerlink" title="内部引用插件列表"></a>内部引用插件列表</h1><h2 id="Node-Editor-Framework"><a href="#Node-Editor-Framework" class="headerlink" title="Node_Editor_Framework"></a>Node_Editor_Framework</h2><p>节点编辑器 经过源码比对 klei 拿这个源码自己改了一版，不过确实使用了这个项目 <a href="https://github.com/Seneral/Node_Editor_Framework" target="_blank" rel="external">项目地址</a></p>
<h2 id="fmod-studio"><a href="#fmod-studio" class="headerlink" title="fmod.studio"></a>fmod.studio</h2><p>Unity内置了Audio功能，并且底层也是用FMOD来实现的，为什么还要不辞劳苦学习使用FMOD插件来进行音效的管理？<br>-<a href="https://www.jianshu.com/p/586a5d465827" target="_blank" rel="external">FMOD学习 - 简书</a></p>
<h2 id="TMPro"><a href="#TMPro" class="headerlink" title="TMPro"></a>TMPro</h2><p>Mesh字体插件 <a href="https://www.assetstore.unity3d.com/en/#!/content/84126" target="_blank" rel="external">AssetStore地址</a></p>
<h2 id="procgen"><a href="#procgen" class="headerlink" title="procgen"></a>procgen</h2><p>程序上实现噪声算法 <a href="https://github.com/trentpolack/procgen" target="_blank" rel="external">项目地址</a></p>
<h2 id="图形学插件"><a href="#图形学插件" class="headerlink" title="图形学插件"></a>图形学插件</h2><h3 id="Delaunay"><a href="#Delaunay" class="headerlink" title="Delaunay"></a>Delaunay</h3><p>三角形破裂算法 在github上搜这个关键字就好了</p>
<h3 id="ClipperLib"><a href="#ClipperLib" class="headerlink" title="ClipperLib"></a>ClipperLib</h3><p>多边形偏移裁切算法 <a href="http://www.angusj.com/delphi/clipper.php" target="_blank" rel="external">项目地址</a></p>
<h3 id="MIConvexHull"><a href="#MIConvexHull" class="headerlink" title="MIConvexHull"></a>MIConvexHull</h3><p>可以生成2、3维的最小凸包。可以进行狄洛尼三角剖分，生成Voronoi多边形。<br><a href="https://github.com/DesignEngrLab/MIConvexHull" target="_blank" rel="external">项目地址</a></p>
<h3 id="Voronoi-Tree"><a href="#Voronoi-Tree" class="headerlink" title="Voronoi Tree"></a>Voronoi Tree</h3><p>泰森多边形<br><a href="https://en.m.wikipedia.org/wiki/Voronoi_diagram" target="_blank" rel="external">算法简介</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;元旦期间玩了缺氧，感觉十分的好玩。属于深度沙盒经营类游戏。既然好玩那就要知其所以然，今天抽空看了看源码，基本上列出所有能找到的工具或技术。算是一个记录，也开阔一下视野。如果你还有什么补充欢迎给我留言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://vrast.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="缺氧源码分析" scheme="http://vrast.cn/tags/%E7%BC%BA%E6%B0%A7%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>动态获取AgentTypeID</title>
    <link href="http://vrast.cn/posts/9ad4f6c3/"/>
    <id>http://vrast.cn/posts/9ad4f6c3/</id>
    <published>2017-12-22T14:25:55.000Z</published>
    <updated>2017-12-22T14:35:38.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前阵子我在Github上给Unity团队提了一个issue关于使用代码获取<code>agentTypeID</code>，说来惭愧是我自己的没找到对应的代码。在我使用另外渠道获取此ID的时候 Unity团队已经默默给我回复了这个issues.先说说我的解决方式，由于代码设置 agentTypeID 的时候需要给一个Int类型变量，这个变量其实是对应了一个枚举，我在UnityEditor Inspector的Debug窗口中直接获取了对应AgentTypeID. 笑. 本文记录我获得答复的过程，换个角度想想其实也能发现另外的解决方案即使不知道也没关系<br>。</p>
</blockquote>
<p><img src="/uploads/navmeshagentid.png" alt="解决方案"></p>
<a id="more"></a>
<h1 id="图中的代码如下"><a href="#图中的代码如下" class="headerlink" title="图中的代码如下"></a>图中的代码如下</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = NavMesh.GetSettingsCount();</div><div class="line"><span class="keyword">var</span> agentTypeNames = <span class="keyword">new</span> <span class="keyword">string</span>[count + <span class="number">2</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> id = NavMesh.GetSettingsByIndex(i).agentTypeID;</div><div class="line">    <span class="keyword">var</span> name = NavMesh.GetSettingsNameFromID(id);</div><div class="line">    agentTypeNames[i] = name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前阵子我在Github上给Unity团队提了一个issue关于使用代码获取&lt;code&gt;agentTypeID&lt;/code&gt;，说来惭愧是我自己的没找到对应的代码。在我使用另外渠道获取此ID的时候 Unity团队已经默默给我回复了这个issues.先说说我的解决方式，由于代码设置 agentTypeID 的时候需要给一个Int类型变量，这个变量其实是对应了一个枚举，我在UnityEditor Inspector的Debug窗口中直接获取了对应AgentTypeID. 笑. 本文记录我获得答复的过程，换个角度想想其实也能发现另外的解决方案即使不知道也没关系&lt;br&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/navmeshagentid.png&quot; alt=&quot;解决方案&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="NavmeshAgent" scheme="http://vrast.cn/tags/NavmeshAgent/"/>
    
  </entry>
  
  <entry>
    <title>三维向量曲线平滑算法</title>
    <link href="http://vrast.cn/posts/7a035f20/"/>
    <id>http://vrast.cn/posts/7a035f20/</id>
    <published>2017-12-22T02:37:36.000Z</published>
    <updated>2017-12-22T14:37:40.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在网上看到一个平滑算法，很好用，经过我测试 效率很高，Chaikin 函数调用2-3次会获得一个相对较好的曲线。<a href="http://graphics.cs.ucdavis.edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html" target="_blank" rel="external">算法链接</a><br>原理是不断的裁切三角形让其分裂成2个三角，2个三角变成4个，以此类推，最终会越来越平滑从而接近一个圆。</p>
</blockquote>
<p><img src="/uploads/chaikin_algorithm.png" alt="裁切范例"></p>
<a id="more"></a>
<p>平滑算法如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line">[RequireComponent(<span class="keyword">typeof</span>(LineRenderer))]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmoothAlgorithm</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> minRadius = <span class="number">1.5</span>f;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> maxRadius = <span class="number">3.5</span>f;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">25</span>;</div><div class="line">    <span class="keyword">private</span> LineRenderer lr;</div><div class="line">    <span class="keyword">private</span> Vector3[] points;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        lr = GetComponent&lt;LineRenderer&gt;();</div><div class="line">        GenerateRandomPath();</div><div class="line">        SetLR(points);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GenerateRandomPath</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        points = <span class="keyword">new</span> Vector3[num];</div><div class="line"></div><div class="line">        <span class="keyword">float</span> angle = <span class="number">360.0</span>f / num;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</div><div class="line">        &#123;</div><div class="line">            points[i] = Quaternion.AngleAxis((angle * i), Vector3.forward) * Vector3.up * Random.Range(minRadius, maxRadius);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLR</span>(<span class="params">Vector3[] pts</span>)</span></div><div class="line">    &#123;</div><div class="line">        lr.SetVertexCount(pts.Length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.Length; i++)</div><div class="line">        &#123;</div><div class="line">            lr.SetPosition(i, pts[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</div><div class="line">        &#123;</div><div class="line">            points = Chaikin(points);</div><div class="line">            SetLR(points);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.G))</div><div class="line">        &#123;</div><div class="line">            GenerateRandomPath();</div><div class="line">            SetLR(points);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Vector3[] <span class="title">Chaikin</span>(<span class="params">Vector3[] pts</span>)</span></div><div class="line">    &#123;</div><div class="line">        Vector3[] newPts = <span class="keyword">new</span> Vector3[(pts.Length - <span class="number">2</span>) * <span class="number">2</span> + <span class="number">2</span>];</div><div class="line">        newPts[<span class="number">0</span>] = pts[<span class="number">0</span>];</div><div class="line">        newPts[newPts.Length - <span class="number">1</span>] = pts[pts.Length - <span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts.Length - <span class="number">2</span>; i++)</div><div class="line">        &#123;</div><div class="line">            newPts[j] = pts[i] + (pts[i + <span class="number">1</span>] - pts[i]) * <span class="number">0.75</span>f;</div><div class="line">            newPts[j + <span class="number">1</span>] = pts[i + <span class="number">1</span>] + (pts[i + <span class="number">2</span>] - pts[i + <span class="number">1</span>]) * <span class="number">0.25</span>f;</div><div class="line">            j += <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> newPts;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在网上看到一个平滑算法，很好用，经过我测试 效率很高，Chaikin 函数调用2-3次会获得一个相对较好的曲线。&lt;a href=&quot;http://graphics.cs.ucdavis.edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html&quot;&gt;算法链接&lt;/a&gt;&lt;br&gt;原理是不断的裁切三角形让其分裂成2个三角，2个三角变成4个，以此类推，最终会越来越平滑从而接近一个圆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/chaikin_algorithm.png&quot; alt=&quot;裁切范例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Math" scheme="http://vrast.cn/categories/Math/"/>
    
    
      <category term="算法" scheme="http://vrast.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用物理检测范围与距离内的目标</title>
    <link href="http://vrast.cn/posts/e0406d64/"/>
    <id>http://vrast.cn/posts/e0406d64/</id>
    <published>2017-12-16T16:30:27.000Z</published>
    <updated>2017-12-17T11:43:39.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>分享一个技围检测脚本，用来判定范围内是否有目标，或者是线性范围内是否可见目标。</p>
</blockquote>
<p><img src="/uploads/ScreenShot2017-12-17.png" alt="简洁范围检测"><br><a id="more"></a></p>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CheckSkillRange</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span> Vector3 offset = Vector3.one;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> fieldOfViewAngle = <span class="number">20</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> viewDistance = <span class="number">4</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">bool</span> usePhysics2D = <span class="literal">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> LayerMask ObjLayer = LayerMask.GetMask(<span class="string">"Default"</span>);</div><div class="line">  <span class="keyword">public</span> LayerMask IgnoreLayer = <span class="number">1</span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (Input.GetMouseButtonUp(<span class="number">1</span>))</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">var</span> o = MovementUtility.WithinSight(transform, offset, fieldOfViewAngle, viewDistance, ObjLayer, Vector3.zero, IgnoreLayer);</div><div class="line">      <span class="keyword">if</span> (o)</div><div class="line">      &#123;</div><div class="line">        Debug.Log(<span class="keyword">string</span>.Format(<span class="string">"Attack obj &#123;0&#125;"</span>, o.name));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// Draw the line of sight representation within the scene window</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">    DrawLineOfSight(<span class="keyword">this</span>.transform, offset, fieldOfViewAngle, viewDistance, usePhysics2D);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawLineOfSight</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, <span class="keyword">bool</span> usePhysics2D</span>)</span></div><div class="line">  &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></div><div class="line">    <span class="keyword">var</span> oldColor = UnityEditor.Handles.color;</div><div class="line">    <span class="keyword">var</span> color = Color.yellow;</div><div class="line">    color.a = <span class="number">0.1</span>f;</div><div class="line">    UnityEditor.Handles.color = color;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> halfFOV = fieldOfViewAngle * <span class="number">0.5</span>f;</div><div class="line">    <span class="keyword">var</span> beginDirection = Quaternion.AngleAxis(-halfFOV, (usePhysics2D ? Vector3.forward : Vector3.up)) * (usePhysics2D ? transform.up : transform.forward);</div><div class="line">    UnityEditor.Handles.DrawSolidArc(transform.TransformPoint(positionOffset), (usePhysics2D ? transform.forward : transform.up), beginDirection, fieldOfViewAngle, viewDistance);</div><div class="line"></div><div class="line">    UnityEditor.Handles.color = oldColor;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="核心类，使用物理检测距离目标等-核心还是使用了碰撞检测"><a href="#核心类，使用物理检测距离目标等-核心还是使用了碰撞检测" class="headerlink" title="核心类，使用物理检测距离目标等,核心还是使用了碰撞检测"></a>核心类，使用物理检测距离目标等,核心还是使用了碰撞检测</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MovementUtility</span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Static Fields</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;GameObject, AudioSource[]&gt; transformAudioSourceMap;</div><div class="line"></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Static Methods</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawLineOfSight</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> angleOffset, <span class="keyword">float</span> viewDistance, <span class="keyword">bool</span> usePhysics2D</span>)</span></div><div class="line">  &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AudioSource[] <span class="title">GetAudioSources</span>(<span class="params">GameObject target</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">bool</span> flag = MovementUtility.transformAudioSourceMap == <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">    &#123;</div><div class="line">      MovementUtility.transformAudioSourceMap = <span class="keyword">new</span> Dictionary&lt;GameObject, AudioSource[]&gt;();</div><div class="line">    &#125;</div><div class="line">    AudioSource[] componentsInChildren;</div><div class="line">    <span class="keyword">bool</span> flag2 = MovementUtility.transformAudioSourceMap.TryGetValue(target, <span class="keyword">out</span> componentsInChildren);</div><div class="line">    AudioSource[] result;</div><div class="line">    <span class="keyword">if</span> (flag2)</div><div class="line">    &#123;</div><div class="line">      result = componentsInChildren;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      componentsInChildren = target.GetComponentsInChildren&lt;AudioSource&gt;();</div><div class="line">      MovementUtility.transformAudioSourceMap.Add(target, componentsInChildren);</div><div class="line">      result = componentsInChildren;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">LineOfSight</span>(<span class="params">Transform transform, Vector3 positionOffset, GameObject targetObject, Vector3 targetOffset, <span class="keyword">bool</span> usePhysics2D, <span class="keyword">int</span> ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    GameObject result;</div><div class="line">    <span class="keyword">if</span> (usePhysics2D)</div><div class="line">    &#123;</div><div class="line">      RaycastHit2D raycastHit2D;</div><div class="line">      <span class="keyword">bool</span> flag = raycastHit2D = Physics2D.Linecast(transform.TransformPoint(positionOffset), targetObject.transform.TransformPoint(targetOffset), ~ignoreLayerMask);</div><div class="line">      <span class="keyword">if</span> (flag)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">bool</span> flag2 = raycastHit2D.transform.IsChildOf(targetObject.transform) || targetObject.transform.IsChildOf(raycastHit2D.transform);</div><div class="line">        <span class="keyword">if</span> (flag2)</div><div class="line">        &#123;</div><div class="line">          result = targetObject;</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      RaycastHit raycastHit;</div><div class="line"></div><div class="line">      <span class="keyword">bool</span> flag3 = Physics.Linecast(transform.TransformPoint(positionOffset), targetObject.transform.TransformPoint(targetOffset), <span class="keyword">out</span> raycastHit, ~ignoreLayerMask);</div><div class="line">      <span class="keyword">if</span> (flag3)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">bool</span> flag4 = raycastHit.transform.IsChildOf(targetObject.transform) || targetObject.transform.IsChildOf(raycastHit.transform);</div><div class="line">        <span class="keyword">if</span> (flag4)</div><div class="line">        &#123;</div><div class="line">          result = targetObject;</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    result = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">WithinHearingRange2D</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> audibilityThreshold, <span class="keyword">float</span> hearingRadius, LayerMask objectLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    GameObject result = <span class="literal">null</span>;</div><div class="line">    Collider2D[] array = Physics2D.OverlapCircleAll(transform.TransformPoint(positionOffset), hearingRadius, objectLayerMask);</div><div class="line">    <span class="keyword">bool</span> flag = array != <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">float</span> num = <span class="number">0</span>f;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">float</span> num2 = <span class="number">0</span>f;</div><div class="line">        GameObject gameObject;</div><div class="line">        <span class="keyword">bool</span> flag2 = (gameObject = MovementUtility.WithinHearingRange(transform, positionOffset, audibilityThreshold, array[i].gameObject, <span class="keyword">ref</span> num2)) != <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (flag2)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">bool</span> flag3 = num2 &gt; num;</div><div class="line">          <span class="keyword">if</span> (flag3)</div><div class="line">          &#123;</div><div class="line">            num = num2;</div><div class="line">            result = gameObject;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">WithinSight</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, LayerMask objectLayerMask, Vector3 targetOffset, LayerMask ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    GameObject result = <span class="literal">null</span>;</div><div class="line">    Collider[] array = Physics.OverlapSphere(transform.position, viewDistance, objectLayerMask);</div><div class="line">    <span class="keyword">bool</span> flag = array != <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">float</span> num = <span class="keyword">float</span>.PositiveInfinity;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">float</span> num2;</div><div class="line">        GameObject gameObject;</div><div class="line">        <span class="keyword">bool</span> flag2 = (gameObject = MovementUtility.WithinSight(transform, positionOffset, fieldOfViewAngle, viewDistance, array[i].gameObject, targetOffset, <span class="literal">false</span>, <span class="number">0</span>f, <span class="keyword">out</span> num2, ignoreLayerMask)) != <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (flag2)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">bool</span> flag3 = num2 &lt; num;</div><div class="line">          <span class="keyword">if</span> (flag3)</div><div class="line">          &#123;</div><div class="line">            num = num2;</div><div class="line">            result = gameObject;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">WithinSight</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, GameObject targetObject, Vector3 targetOffset, LayerMask ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">float</span> num;</div><div class="line">    <span class="keyword">return</span> MovementUtility.WithinSight(transform, positionOffset, fieldOfViewAngle, viewDistance, targetObject, targetOffset, <span class="literal">false</span>, <span class="number">0</span>f, <span class="keyword">out</span> num, ignoreLayerMask);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GameObject <span class="title">WithinSight</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, GameObject targetObject, Vector3 targetOffset, <span class="keyword">bool</span> usePhysics2D, <span class="keyword">float</span> angleOffset2D, <span class="keyword">out</span> <span class="keyword">float</span> angle, <span class="keyword">int</span> ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    Vector3 vector = targetObject.transform.position - transform.TransformPoint(positionOffset);</div><div class="line">    <span class="keyword">if</span> (usePhysics2D)</div><div class="line">    &#123;</div><div class="line">      angle = Vector3.Angle(vector, transform.up) + angleOffset2D;</div><div class="line">      vector.z = <span class="number">0</span>f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      angle = Vector3.Angle(vector, transform.forward);</div><div class="line">      vector.y = <span class="number">0</span>f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> flag = vector.magnitude &lt; viewDistance &amp;&amp; angle &lt; fieldOfViewAngle * <span class="number">0.5</span>f;</div><div class="line">    GameObject result;</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">bool</span> flag2 = MovementUtility.LineOfSight(transform, positionOffset, targetObject, targetOffset, usePhysics2D, ignoreLayerMask) != <span class="literal">null</span>;</div><div class="line">      <span class="keyword">if</span> (flag2)</div><div class="line">      &#123;</div><div class="line">        result = targetObject;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">bool</span> flag3 = targetObject.GetComponent&lt;Collider&gt;() == <span class="literal">null</span> &amp;&amp; targetObject.GetComponent&lt;Collider2D&gt;() == <span class="literal">null</span>;</div><div class="line">      <span class="keyword">if</span> (flag3)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">bool</span> activeSelf = targetObject.gameObject.activeSelf;</div><div class="line">        <span class="keyword">if</span> (activeSelf)</div><div class="line">        &#123;</div><div class="line">          result = targetObject;</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    result = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">WithinSight2D</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, LayerMask objectLayerMask, Vector3 targetOffset, <span class="keyword">float</span> angleOffset2D, LayerMask ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    GameObject result = <span class="literal">null</span>;</div><div class="line">    Collider2D[] array = Physics2D.OverlapCircleAll(transform.position, viewDistance, objectLayerMask);</div><div class="line">    <span class="keyword">bool</span> flag = array != <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">float</span> num = <span class="keyword">float</span>.PositiveInfinity;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">float</span> num2;</div><div class="line">        GameObject gameObject;</div><div class="line">        <span class="keyword">bool</span> flag2 = (gameObject = MovementUtility.WithinSight(transform, positionOffset, fieldOfViewAngle, viewDistance, array[i].gameObject, targetOffset, <span class="literal">true</span>, angleOffset2D, <span class="keyword">out</span> num2, ignoreLayerMask)) != <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (flag2)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">bool</span> flag3 = num2 &lt; num;</div><div class="line">          <span class="keyword">if</span> (flag3)</div><div class="line">          &#123;</div><div class="line">            num = num2;</div><div class="line">            result = gameObject;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">WithinSight2D</span>(<span class="params">Transform transform, Vector3 positionOffset, <span class="keyword">float</span> fieldOfViewAngle, <span class="keyword">float</span> viewDistance, GameObject targetObject, Vector3 targetOffset, <span class="keyword">float</span> angleOffset2D, LayerMask ignoreLayerMask</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">float</span> num;</div><div class="line">    <span class="keyword">return</span> MovementUtility.WithinSight(transform, positionOffset, fieldOfViewAngle, viewDistance, targetObject, targetOffset, <span class="literal">true</span>, angleOffset2D, <span class="keyword">out</span> num, ignoreLayerMask);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分享一个技围检测脚本，用来判定范围内是否有目标，或者是线性范围内是否可见目标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/ScreenShot2017-12-17.png&quot; alt=&quot;简洁范围检测&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="Physics" scheme="http://vrast.cn/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>解决NavmeshAgent寻路边界的判定</title>
    <link href="http://vrast.cn/posts/e53ade9f/"/>
    <id>http://vrast.cn/posts/e53ade9f/</id>
    <published>2017-12-15T14:36:00.000Z</published>
    <updated>2017-12-22T14:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天群里有兄弟问: “我看到navmeshagent里面有个方法叫什么获取网格边缘点的，我打算首先判断目标点在不在网格上。在的话正常逻辑，不在的话判断当前agent的位置有没有到那个边缘点 “ 。我想这样应该能解决这个问题。</p>
</blockquote>
<p><img src="/uploads/FC9B64C1057D31F1B4692EF0EC22A08B.jpg" alt="解决边界点的判定"></p>
<a id="more"></a>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">1</span>))</div><div class="line">&#123;</div><div class="line">    NavMeshHit hit;</div><div class="line">    NavMesh.Raycast(transform.position, target.position, <span class="keyword">out</span> hit, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hit.hit)</div><div class="line">    &#123;</div><div class="line">        NavMeshPath path = <span class="keyword">new</span> NavMeshPath();</div><div class="line">        <span class="keyword">if</span> (agent.CalculatePath(hit.position, path))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> pos = path.corners[path.corners.Length - <span class="number">1</span>];</div><div class="line">            <span class="keyword">var</span> o = GameObject.CreatePrimitive(PrimitiveType.Sphere);</div><div class="line">            o.transform.localScale = Vector3.one * <span class="number">0.1</span>f;</div><div class="line">            o.transform.position = pos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天群里有兄弟问: “我看到navmeshagent里面有个方法叫什么获取网格边缘点的，我打算首先判断目标点在不在网格上。在的话正常逻辑，不在的话判断当前agent的位置有没有到那个边缘点 “ 。我想这样应该能解决这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/FC9B64C1057D31F1B4692EF0EC22A08B.jpg&quot; alt=&quot;解决边界点的判定&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="NavmeshAgent" scheme="http://vrast.cn/tags/NavmeshAgent/"/>
    
  </entry>
  
  <entry>
    <title>High-level NavMesh Building Components</title>
    <link href="http://vrast.cn/posts/98dfcd51/"/>
    <id>http://vrast.cn/posts/98dfcd51/</id>
    <published>2017-12-07T12:49:15.000Z</published>
    <updated>2017-12-08T03:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>高级 NavMesh 组件说明文档</p>
</blockquote>
<p>NavMesh Surface 脚本 ，在此之前 我看了网络上的一篇介绍 <a href="http://forum.china.unity3d.com/thread-25421-1-1.html" target="_blank" rel="external">进击的新版NavMesh系统：看我飞檐走壁</a> 效果非常好。我一边测试一边记录关于Surface的用法。</p>
<p>NavMesh Surcefa组件表示特定NavMeshAgent类型的可行走区域，并定义应该构建NavMesh的场景的一部分。</p>
<p>NavMesh Surface组件不在标准Unity安装中; 有关如何访问它的信息，<a href="https://docs.unity3d.com/Manual/class-NavMeshSurface.html" target="_blank" rel="external">请参阅高级NavMesh构建组件的文档</a>。</p>
<p>要使用NavMesh Surface组件，导航到GameObject&gt; AI&gt; NavMesh Surface。 这将创建一个空的GameObject，并附带一个NavMesh Surface组件。 一个场景可以包含多个NavMesh表面。</p>
<a id="more"></a>
<p><img src="/uploads/class-NavMeshSurface-0.png" alt="嗯 就是这货了"></p>
<p><img src="/uploads/QQ20171207-161002@2x.png" alt="针对与这个组件的使用说明"></p>
<p><img src="/uploads/QQ20171207-162319.png" alt="NavMesh Surface参数说明"></p>
<blockquote>
<p>NavMesh Off-Link &amp;  Off-mesh-Link 我们通常用第一种。在两个不可行走区域之间 使用跨越点+动画 实现定点跳跃。</p>
</blockquote>
<p><img src="/uploads/QQ20171207-194954.png" alt="Off Link"><br><img src="/uploads/QQ20171207-195557.png" alt="Off Link"></p>
<blockquote>
<p>NavMesh Modifier &amp; NavMesh Modifier Volume 在烘培之前修改区域是否行走</p>
</blockquote>
<p>先说 NavMesh Modifier volume,你可以在烘培之前选定区域设置区域类型，例子将某个Agent设置成该区域不能行走。</p>
<p><img src="/uploads/class-NavMesh-ModifierVolume-4.png" alt="NavMesh Modifier Volume效果图"></p>
<!-- more -->
<p><img src="/uploads/QQ20171207-193142@2x.png" alt="NavMesh Modifier Volume使用方法"></p>
<p>如果知道了 NavMesh Modifier Volume 那么可以猜得到  NavMesh Modifier 就是给附着这个脚本的mesh上的区域设置区域类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;高级 NavMesh 组件说明文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NavMesh Surface 脚本 ，在此之前 我看了网络上的一篇介绍 &lt;a href=&quot;http://forum.china.unity3d.com/thread-25421-1-1.html&quot;&gt;进击的新版NavMesh系统：看我飞檐走壁&lt;/a&gt; 效果非常好。我一边测试一边记录关于Surface的用法。&lt;/p&gt;
&lt;p&gt;NavMesh Surcefa组件表示特定NavMeshAgent类型的可行走区域，并定义应该构建NavMesh的场景的一部分。&lt;/p&gt;
&lt;p&gt;NavMesh Surface组件不在标准Unity安装中; 有关如何访问它的信息，&lt;a href=&quot;https://docs.unity3d.com/Manual/class-NavMeshSurface.html&quot;&gt;请参阅高级NavMesh构建组件的文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要使用NavMesh Surface组件，导航到GameObject&amp;gt; AI&amp;gt; NavMesh Surface。 这将创建一个空的GameObject，并附带一个NavMesh Surface组件。 一个场景可以包含多个NavMesh表面。&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="Navigation" scheme="http://vrast.cn/tags/Navigation/"/>
    
  </entry>
  
</feed>
