<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazybones Kill PLAN</title>
  <subtitle>In me the tiger sniffs the rose</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vrast.cn/"/>
  <updated>2017-03-29T08:15:08.000Z</updated>
  <id>http://vrast.cn/</id>
  
  <author>
    <name>keyle xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Python 2</title>
    <link href="http://vrast.cn/posts/c74605d/"/>
    <id>http://vrast.cn/posts/c74605d/</id>
    <published>2017-03-28T10:55:43.000Z</published>
    <updated>2017-03-29T08:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为准备开始写自动化打包工具了，磨刀不误砍柴功，这里再加深一些Python基础<br><a id="more"></a></p>
</blockquote>
<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>OOP浅而言之就是继承封装与多态,再要深入的说那可就说不完了。</p>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>定义一个类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">	num1 = mun2 = <span class="number">0</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,arg1,arg2)</span>:</span></div><div class="line">		self.num1 = arg1</div><div class="line">		self.num2 = arg2</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Calc</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> self.num1+self.num2</div><div class="line"></div><div class="line"></div><div class="line">a = A(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">print(a.Calc())</div></pre></td></tr></table></figure>
<h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>:</span></div><div class="line">	__Content = <span class="string">"slef content"</span>  <span class="comment">#使用双下划线开头的私有属性</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">"do something"</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">"init method"</span>)</div><div class="line"></div><div class="line"></div><div class="line">t = test()</div><div class="line">t.func()</div><div class="line"></div><div class="line"></div><div class="line">print(t._test__Content)<span class="comment">#只能透过这种方式来访问私有属性</span></div></pre></td></tr></table></figure>
<h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p><img src="/uploads/WX20170328-191931@2x.png" alt="ClassB继承ClassA"></p>
<h2 id="基础重载方法"><a href="#基础重载方法" class="headerlink" title="基础重载方法"></a>基础重载方法</h2><p>下表列出了一些通用的功能，你可以在自己的类重写：<br>|序号|    方法, 描述 &amp; 简单的调用|<br>|—|————————|<br>|1|    <strong>init</strong> ( self [,args…] )构造函数 简单的调用方法: obj = className(args)|<br>|2|    <strong>del</strong>( self ) 析构方法, 删除一个对象 简单的调用方法 : dell obj|<br>|3|    <strong>repr</strong>( self )转化为供解释器读取的形式 简单的调用方法 : repr(obj)|<br>|4|    <strong>str</strong>( self ) 用于将值转化为适于人阅读的形式 简单的调用方法 : str(obj)|<br>|5|    <strong>cmp</strong> ( self, x ) 对象比较 简单的调用方法 : cmp(obj, x)|</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为准备开始写自动化打包工具了，磨刀不误砍柴功，这里再加深一些Python基础&lt;br&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Python" scheme="http://vrast.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python相关的环境问题</title>
    <link href="http://vrast.cn/posts/b3941f7a/"/>
    <id>http://vrast.cn/posts/b3941f7a/</id>
    <published>2017-03-28T07:28:20.000Z</published>
    <updated>2017-03-29T08:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/31DCA46C-6CBD-4A2B-91A3-457BF9D92B89.png" alt="使用远程调试"></p>
<blockquote>
<p>记录一些python相关的环境配置问题,包括使用PyCharm远程调试Python。其实杂七杂八的还很多，这里记录一些比较难记的东西。</p>
</blockquote>
<a id="more"></a>
<h1 id="查看python安装路径"><a href="#查看python安装路径" class="headerlink" title="查看python安装路径"></a>查看python安装路径</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> python3</div></pre></td></tr></table></figure>
<h1 id="更换pycharm"><a href="#更换pycharm" class="headerlink" title="更换pycharm"></a>更换pycharm</h1><p><img src="/uploads/WX20170328-152544@2x.png" alt="更换python版本"></p>
<h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><p>使用PyCharm远程调试树莓派上的Py脚本</p>
<p><img src="/uploads/WX20170329-161333@2x.png" alt="添加树莓派主机信息"></p>
<p><img src="/uploads/WX20170329-161435@2x.png" alt="添加树莓派调试环境"></p>
<p><a href="https://www.jetbrains.com/help/pycharm/2017.1/project-and-ide-settings.html?utm_medium=help_link&amp;utm_source=from_product&amp;utm_campaign=PY&amp;utm_content=2017.1" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/31DCA46C-6CBD-4A2B-91A3-457BF9D92B89.png&quot; alt=&quot;使用远程调试&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一些python相关的环境配置问题,包括使用PyCharm远程调试Python。其实杂七杂八的还很多，这里记录一些比较难记的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Python" scheme="http://vrast.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello Python 1</title>
    <link href="http://vrast.cn/posts/957d31e7/"/>
    <id>http://vrast.cn/posts/957d31e7/</id>
    <published>2017-03-27T07:41:04.000Z</published>
    <updated>2017-03-28T10:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为我的树莓派只要开机风扇就会不停的转为了控制风扇的转速我需要写一些脚本来控制gpio接口。所以作为兴趣就学习了一下python语言，当然python的实际作用远不止此，先看看基础的再深入的了解下吧。MacOS自带的Python是2.7x，但是我使用的是3.x 。当然这两者是有差异的，即使你不懂python也可以从版本号上看出来这个差异。<br><a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html" target="_blank" rel="external">The key differences between Python 2.7.x and Python 3.x with examples</a> &lt;-这篇博客详细说明了2.x与3.x的区别。因为本人是从3.x学习python的所以后面的博文都会以3.x作为案例。</p>
</blockquote>
<a id="more"></a>
<h1 id="环境相关"><a href="#环境相关" class="headerlink" title="环境相关"></a>环境相关</h1><ol>
<li>使用<code>which python3</code>查看当前python安装地址</li>
<li>Xcode配置系列博文<ul>
<li><a href="http://www.cnblogs.com/zzy0471/p/5717002.html" target="_blank" rel="external">用VS Code写Python程序</a></li>
<li><a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="external">Python on Visual Studio Code</a></li>
</ul>
</li>
<li><a href="https://www.tutorialspoint.com/python3/python_basic_syntax.htm" target="_blank" rel="external">Python 3 Basic Syntax(原版)</a></li>
<li><a href="http://www.runoob.com/python3/python3-basic-operators.html" target="_blank" rel="external">Python3 运算符(翻译)</a></li>
</ol>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>###可更改(mutable)与不可更改(immutable)对象<br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。<br>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。<br>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。<br>python 函数的参数传递：<br>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。<br>可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p>
<h2 id="Keyword"><a href="#Keyword" class="headerlink" title="Keyword"></a>Keyword</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">and	exec	not</div><div class="line">as	finally	or</div><div class="line">assert	for	pass</div><div class="line">break	from	print</div><div class="line">class	global	raise</div><div class="line">continue	if	return</div><div class="line">def	import	try</div><div class="line">del	in	while</div><div class="line">elif	is	with</div><div class="line">else	lambda	yield</div><div class="line">except</div></pre></td></tr></table></figure>
<h2 id="Lines-and-Indentation"><a href="#Lines-and-Indentation" class="headerlink" title="Lines and Indentation"></a>Lines and Indentation</h2><p>Python用缩进代表代码块，同一个代码块的语句必须包含相同的缩进空格数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">True</span>:</div><div class="line">   <span class="keyword">print</span> (<span class="string">"True"</span>)</div><div class="line"></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> (<span class="string">"False"</span>)</div><div class="line"></div><div class="line"><span class="comment">#如果要在当前语句换行直接用\</span></div><div class="line">total = item_one + \</div><div class="line">    item_two + \</div><div class="line">    item_three</div></pre></td></tr></table></figure></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">print(sys.version) <span class="comment">#查看系统版本</span></div><div class="line"></div><div class="line">print(<span class="string">'helloworld   -0'</span>);print(<span class="string">'helloworld   -1'</span>)</div><div class="line">print(<span class="string">"helloworld   -2"</span>)</div><div class="line">print(<span class="string">"""helloworld   -3</span></div><div class="line"></div><div class="line">    End .</div><div class="line"></div><div class="line">""",end = <span class="string">"&gt;&gt;"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"&lt;&lt;"</span>)</div><div class="line"></div><div class="line"><span class="comment">#Output:</span></div><div class="line"><span class="comment">#3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) </span></div><div class="line"><span class="comment">#[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]</span></div><div class="line"><span class="comment">#helloworld   -0</span></div><div class="line"><span class="comment">#helloworld   -1</span></div><div class="line"><span class="comment">#helloworld   -2</span></div><div class="line"><span class="comment">#helloworld   -3</span></div><div class="line"><span class="comment">#    End .</span></div><div class="line"><span class="comment">#&gt;&gt;&lt;&lt;</span></div></pre></td></tr></table></figure>
<h3 id="Formate-String"><a href="#Formate-String" class="headerlink" title="Formate String"></a>Formate String</h3><p>字符串格式化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dic = &#123;<span class="number">1</span>:<span class="string">"one"</span>,<span class="number">2</span>:<span class="string">"two"</span>&#125; <span class="comment">#定义字典</span></div><div class="line">print(dic[<span class="number">1</span>])  <span class="comment">#取值</span></div><div class="line"></div><div class="line">print(<span class="string">"%d &lt; %s"</span> % (len(dic),<span class="string">"length"</span>)) <span class="comment">#格式化字符串</span></div><div class="line"><span class="keyword">del</span> dic[<span class="number">1</span>]   <span class="comment">#删除一个key-value</span></div><div class="line">print(len(dic)) <span class="comment">#检测字典长度</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>格式化字符及其ASCII码</td>
</tr>
<tr>
<td>%s</td>
<td>格式化字符串</td>
</tr>
<tr>
<td>%d</td>
<td>格式化整数</td>
</tr>
<tr>
<td>%u</td>
<td>格式化无符号整型</td>
</tr>
<tr>
<td>%o</td>
<td>格式化无符号八进制数</td>
</tr>
<tr>
<td>%x</td>
<td>格式化无符号十六进制数</td>
</tr>
<tr>
<td>%X</td>
<td>格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td>%f</td>
<td>格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td>%e</td>
<td>用科学计数法格式化浮点数</td>
</tr>
<tr>
<td>%E</td>
<td>作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td>%g</td>
<td>%f和%e的简写</td>
</tr>
<tr>
<td>%G</td>
<td>%f 和 %E 的简写</td>
</tr>
<tr>
<td>%p</td>
<td>用十六进制数格式化变量的地址</td>
</tr>
</tbody>
</table>
<p>字符串辅助功能符：<br>|符号 |功能|<br>|—-|—|<br>|*    |定义宽度或者小数点精度|<br>|-|    用做左对齐|<br>|+|    在正数前面显示加号( + )|<br>|<sp>|    在正数前面显示空格|<br>|#    |在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)|<br>|0    |显示的数字前面填充’0’而不是默认的空格|<br>|%    |’%%’输出一个单一的’%’|<br>|(var)|    映射变量(字典参数)|<br>|m.n.|    m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)|</sp></p>
<h3 id="字符串的运算"><a href="#字符串的运算" class="headerlink" title="字符串的运算"></a>字符串的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"></div><div class="line">str = <span class="string">'HelloWorld!'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (str)          <span class="comment"># Prints complete string</span></div><div class="line"><span class="keyword">print</span> (str[<span class="number">0</span>])       <span class="comment"># Prints first character of the string</span></div><div class="line"><span class="keyword">print</span> (str[<span class="number">2</span>:<span class="number">5</span>])     <span class="comment"># Prints characters starting from 3rd to 5th</span></div><div class="line"><span class="keyword">print</span> (str[<span class="number">2</span>:])      <span class="comment"># Prints string starting from 3rd character</span></div><div class="line"><span class="keyword">print</span> (str * <span class="number">2</span>)      <span class="comment"># Prints string two times</span></div><div class="line"><span class="keyword">print</span> (str + <span class="string">"TEST"</span>) <span class="comment"># Prints concatenated string</span></div><div class="line"></div><div class="line"><span class="comment">#HelloWorld!</span></div><div class="line"><span class="comment">#H</span></div><div class="line"><span class="comment">#llo</span></div><div class="line"><span class="comment">#lloWorld!</span></div><div class="line"><span class="comment">#HelloWorld!HelloWorld!</span></div><div class="line"><span class="comment">#HelloWorld!TEST</span></div></pre></td></tr></table></figure>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>python支持四种类型 int、float、bool、complex(复数类型)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="keyword">True</span>, <span class="number">4</span>+<span class="number">3j</span></div><div class="line">print(type(a), type(b), type(c), type(d))</div><div class="line"><span class="comment"># &lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt;</span></div><div class="line"></div><div class="line">print(isinstance(a, int)) <span class="comment">#True</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>int</th>
<th style="text-align:center">float</th>
<th style="text-align:right">complex</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td style="text-align:center">0.0</td>
<td style="text-align:right">3.14j</td>
<td></td>
</tr>
<tr>
<td>100</td>
<td style="text-align:center">15.20</td>
<td style="text-align:right">45.j</td>
</tr>
<tr>
<td>-786</td>
<td style="text-align:center">-21.9</td>
<td style="text-align:right">9.322e-36j</td>
</tr>
<tr>
<td>080</td>
<td style="text-align:center">32.3+e18</td>
<td style="text-align:right">.876j</td>
</tr>
<tr>
<td>-0490</td>
<td style="text-align:center">-90.</td>
<td style="text-align:right">-.6545+0J</td>
</tr>
<tr>
<td>-0x260</td>
<td style="text-align:center">-32.54e100</td>
<td style="text-align:right">3e+26J</td>
</tr>
<tr>
<td>0x69</td>
<td style="text-align:center">70.2-E12</td>
<td style="text-align:right">4.53e-7j</td>
</tr>
</tbody>
</table>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul>
<li>type()不会认为子类是一种父类类型。</li>
<li>isinstance()会认为子类是一种父类类型。</li>
<li><a href="https://www.tutorialspoint.com/python3/python_command_line_arguments.htm" target="_blank" rel="external">使用python3接受命令行的多个参数</a></li>
</ul>
<h2 id="Tuples-元组"><a href="#Tuples-元组" class="headerlink" title="Tuples(元组)"></a>Tuples(元组)</h2><p>Tuples can be thought of as read-only lists. 元组是只读的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>  )</div><div class="line">tinytuple = (<span class="number">123</span>, <span class="string">'john'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (tuple)           <span class="comment"># Prints complete tuple</span></div><div class="line"><span class="keyword">print</span> (tuple[<span class="number">0</span>])        <span class="comment"># Prints first element of the tuple</span></div><div class="line"><span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])      <span class="comment"># Prints elements starting from 2nd till 3rd </span></div><div class="line"><span class="keyword">print</span> (tuple[<span class="number">2</span>:])       <span class="comment"># Prints elements starting from 3rd element</span></div><div class="line"><span class="keyword">print</span> (tinytuple * <span class="number">2</span>)   <span class="comment"># Prints tuple two times</span></div><div class="line"><span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># Prints concatenated tuple</span></div><div class="line"></div><div class="line"><span class="comment">#('abcd', 786, 2.23, 'john', 70.2)</span></div><div class="line"><span class="comment">#abcd</span></div><div class="line"><span class="comment">#(786, 2.23)</span></div><div class="line"><span class="comment">#(2.23, 'john', 70.2)</span></div><div class="line"><span class="comment">#(123, 'john', 123, 'john')</span></div><div class="line"><span class="comment">#('abcd', 786, 2.23, 'john', 70.2, 123, 'john')</span></div></pre></td></tr></table></figure>
<p>无关闭分隔符<br>任意无符号的对象，以逗号隔开，默认为元组，如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'abc'</span>, <span class="number">-4.24e93</span>, <span class="number">18</span>+<span class="number">6.6j</span>, <span class="string">'xyz'</span>;</div><div class="line">x, y = <span class="number">1</span>, <span class="number">2</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"Value of x , y : "</span>, x,y;</div></pre></td></tr></table></figure></p>
<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>通过花括号定义一个字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">dict = &#123;&#125;</div><div class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></div><div class="line">dict[<span class="number">2</span>]     = <span class="string">"This is two"</span></div><div class="line"></div><div class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:<span class="number">6734</span>, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># Prints value for 'one' key</span></div><div class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># Prints value for 2 key</span></div><div class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># Prints complete dictionary</span></div><div class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># Prints all the keys</span></div><div class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># Prints all the values</span></div><div class="line"><span class="comment">#This is one</span></div><div class="line"><span class="comment">#This is two</span></div><div class="line"><span class="comment">#&#123;'name': 'john', 'code': 6734, 'dept': 'sales'&#125;</span></div><div class="line"><span class="comment">#dict_keys(['name', 'code', 'dept'])</span></div><div class="line"><span class="comment">#dict_values(['john', 6734, 'sales'])</span></div></pre></td></tr></table></figure></p>
<h2 id="Data-Type-Conversion-类型转换"><a href="#Data-Type-Conversion-类型转换" class="headerlink" title="Data Type Conversion(类型转换)"></a>Data Type Conversion(类型转换)</h2><p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type-names as a function. 需要类型转换的时候只需要用类型名称作为一个方法就可以转换</p>
<table>
<thead>
<tr>
<th>S.No.</th>
<th>Function &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>int(x [,base]) Converts x to an integer. The base specifies the base if x is a string.</td>
</tr>
<tr>
<td>2</td>
<td>float(x) Converts x to a floating-point number.</td>
</tr>
<tr>
<td>3</td>
<td>complex(real [,imag])Creates a complex number.</td>
</tr>
<tr>
<td>4</td>
<td>str(x) Converts object x to a string representation.</td>
</tr>
<tr>
<td>5</td>
<td>repr(x)Converts object x to an expression string.</td>
</tr>
<tr>
<td>6</td>
<td>eval(str)Evaluates a string and returns an object.</td>
</tr>
<tr>
<td>7</td>
<td>tuple(s)Converts s to a tuple.</td>
</tr>
<tr>
<td>8</td>
<td>list(s)Converts s to a list.</td>
</tr>
<tr>
<td>9</td>
<td>set(s)Converts s to a set.</td>
</tr>
<tr>
<td>10</td>
<td>dict(d)Creates a dictionary. d must be a sequence of (key,value) tuples.</td>
</tr>
<tr>
<td>11</td>
<td>frozenset(s)Converts s to a frozen set.</td>
</tr>
<tr>
<td>12</td>
<td>chr(x)Converts an integer to a character.</td>
</tr>
<tr>
<td>13</td>
<td>unichr(x)Converts an integer to a Unicode character.</td>
</tr>
<tr>
<td>14</td>
<td>ord(x)Converts a single character to its integer value.</td>
</tr>
<tr>
<td>15</td>
<td>hex(x)Converts an integer to a hexadecimal string.</td>
</tr>
<tr>
<td>16</td>
<td>oct(x)Converts an integer to an octal string.</td>
</tr>
</tbody>
</table>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="Decision-Making-amp-amp-Loop"><a href="#Decision-Making-amp-amp-Loop" class="headerlink" title="Decision Making &amp;&amp; Loop"></a>Decision Making &amp;&amp; Loop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">""</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> item  <span class="keyword">in</span> a:</div><div class="line">  <span class="keyword">if</span> item == <span class="string">""</span> :</div><div class="line">     print(<span class="string">"The Item is Empty"</span>)</div><div class="line">  <span class="keyword">else</span>:       </div><div class="line">    print(item)</div><div class="line">print(<span class="string">"over"</span>)</div><div class="line"><span class="comment">#a</span></div><div class="line"><span class="comment">#b</span></div><div class="line"><span class="comment">#c</span></div><div class="line"><span class="comment">#The Item is Empty</span></div><div class="line"><span class="comment">#over</span></div></pre></td></tr></table></figure>
<h3 id="Iterator-and-Generator"><a href="#Iterator-and-Generator" class="headerlink" title="Iterator and Generator"></a>Iterator and Generator</h3><p>这块是伪代码，核心是  iter() 与 next()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">it = iter(list) <span class="comment"># this builds an iterator object</span></div><div class="line"><span class="keyword">print</span> (next(it)) <span class="comment">#prints next available element in iterator</span></div><div class="line">Iterator object can be traversed using regular <span class="keyword">for</span> statement</div><div class="line">!usr/bin/python3</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</div><div class="line">   <span class="keyword">print</span> (x, end=<span class="string">" "</span>)</div><div class="line"><span class="keyword">or</span> using next() function</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">   <span class="keyword">try</span>:</div><div class="line">      <span class="keyword">print</span> (next(it))</div><div class="line">   <span class="keyword">except</span> StopIteration:</div><div class="line">      sys.exit() <span class="comment">#you have to import sys module for this</span></div></pre></td></tr></table></figure></p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>使用可变参数 *args 使用星号修饰<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionA</span><span class="params">(content,*args)</span>:</span></div><div class="line">    print(content)</div><div class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> args:</div><div class="line">        <span class="keyword">print</span> (var)</div><div class="line">    <span class="keyword">return</span> content</div><div class="line"></div><div class="line">functionA(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div></pre></td></tr></table></figure></p>
<p>使用lambda匿名函数，后面只可以跟一句话… (我有点想吐槽)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sum = <span class="keyword">lambda</span> arg1, arg2:arg1+arg2</div><div class="line"></div><div class="line">print(<span class="string">"%d %s"</span> % (sum(<span class="number">2</span>,<span class="number">3</span>), <span class="string">" &lt;&lt;&lt;"</span>))</div></pre></td></tr></table></figure></p>
<h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>初始化脚本在引用这个包的时候会自动被调用。只有拥有了初始化脚本才会被python认为这是一个包。<br><img src="/uploads/WX20170328-173343@2x.png" alt="创建包的时候自动添加了__init__.py脚本"></p>
<p><img src="/uploads/WX20170328-173643@2x.png" alt="我在这个脚本里引入这个包,输出结果"></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    fh = open(<span class="string">"testfile"</span>, <span class="string">"w"</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fh.write(<span class="string">"这是一个测试文件，用于测试异常!!"</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"关闭文件"</span></div><div class="line">        fh.close()</div><div class="line"><span class="keyword">except</span> IOError:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Error: 没有找到文件或读取文件失败"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为我的树莓派只要开机风扇就会不停的转为了控制风扇的转速我需要写一些脚本来控制gpio接口。所以作为兴趣就学习了一下python语言，当然python的实际作用远不止此，先看看基础的再深入的了解下吧。MacOS自带的Python是2.7x，但是我使用的是3.x 。当然这两者是有差异的，即使你不懂python也可以从版本号上看出来这个差异。&lt;br&gt;&lt;a href=&quot;http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html&quot;&gt;The key differences between Python 2.7.x and Python 3.x with examples&lt;/a&gt; &amp;lt;-这篇博客详细说明了2.x与3.x的区别。因为本人是从3.x学习python的所以后面的博文都会以3.x作为案例。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Python" scheme="http://vrast.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Lua Script 2</title>
    <link href="http://vrast.cn/posts/abb621db/"/>
    <id>http://vrast.cn/posts/abb621db/</id>
    <published>2017-03-23T01:53:10.000Z</published>
    <updated>2017-03-23T08:09:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这一篇记录一些关于Lua的更深入一些的东西主要是table的使用。但是不涉及IO,Debug，垃圾回收,OOP,数据库访问。这些东西我觉得可以单独放在一个专题写。<br><a id="more"></a></p>
</blockquote>
<h1 id="lua调用其他平台库这里不做介绍"><a href="#lua调用其他平台库这里不做介绍" class="headerlink" title="lua调用其他平台库这里不做介绍"></a>lua调用其他平台库这里不做介绍</h1><p><a href="http://www.runoob.com/lua/lua-modules-packages.html" target="_blank" rel="external">调用C库</a></p>
<h1 id="包概念"><a href="#包概念" class="headerlink" title="包概念"></a>包概念</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>.bash_profile 文件中直接配置测试目录的路径，这样lua编译器会自动到这个目录寻找需要的文件。<br>这里是我用的目录<code>Users/keyle/Desktop/LuaPlayground/?.lua</code> 。<br>添加如下信息至 bash_profile 文件。<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#LU<span class="built_in">A_PATH</span></div><div class="line">export LU<span class="built_in">A_PATH</span>=<span class="string">"~/lua/?.lua;/Users/keyle/Desktop/LuaPlayground/?.lua;"</span></div></pre></td></tr></table></figure></p>
<p>使用 <code>source .bash_profile</code> 命令使其生效</p>
<h2 id="定义使用包"><a href="#定义使用包" class="headerlink" title="定义使用包"></a>定义使用包</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/<span class="keyword">local</span>/bin/lua</div><div class="line"></div><div class="line">complex = &#123;&#125; <span class="comment">--包名需要与文件名同名</span></div><div class="line"></div><div class="line"><span class="comment">-- 私有函数</span></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">ptMethod</span><span class="params">(x)</span></span></div><div class="line">	<span class="built_in">print</span>(x)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">--实例函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex.pt</span><span class="params">(content)</span></span></div><div class="line">	<span class="keyword">if</span> content == <span class="keyword">nil</span> <span class="keyword">then</span>		</div><div class="line">		ptMethod(complex.content)</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">print</span>(content)</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">--实例变量</span></div><div class="line">complex.content = <span class="string">"helloworld"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> complex</div></pre></td></tr></table></figure>
<h2 id="使用包"><a href="#使用包" class="headerlink" title="使用包"></a>使用包</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/usr/<span class="keyword">local</span>/bin/lua</div><div class="line"></div><div class="line"><span class="keyword">local</span> c = <span class="built_in">require</span>(<span class="string">"complex"</span>) <span class="comment">-- 使用require函数引入，我定义了一个局部变量 c 来接受这个包</span></div><div class="line"></div><div class="line">c.pt() <span class="comment">-- 调用别名为c的包内函数pt</span></div><div class="line">c.pt(<span class="string">"keyle"</span>)</div></pre></td></tr></table></figure>
<h1 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h1><h2 id="定义元表"><a href="#定义元表" class="headerlink" title="定义元表"></a>定义元表</h2><p>方式一<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">table1 = &#123;&#125;</div><div class="line">table1_meta = &#123;&#125;</div><div class="line"><span class="built_in">setmetatable</span>(table1,table1_meta)</div></pre></td></tr></table></figure></p>
<p>方式二<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">setmetatable</span>(&#123;&#125;,&#123;&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="使用元表查找"><a href="#使用元表查找" class="headerlink" title="使用元表查找"></a>使用元表查找</h2><p>如果__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">setmetatable</span>(table1,table1_meta)</div><div class="line"></div><div class="line">table_test = <span class="built_in">setmetatable</span>(&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="string">"three"</span>,<span class="number">2</span>&#125;,&#123;</div><div class="line">    __index = <span class="function"><span class="keyword">function</span> <span class="params">(table,key)</span></span></div><div class="line">        <span class="built_in">print</span>(key .. <span class="string">"&lt;&lt;&lt;&lt;"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> key==<span class="string">"great"</span> <span class="keyword">then</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"meta_table_t"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="built_in">table</span>[key]</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(table_test.great)</div><div class="line"><span class="built_in">print</span>(table_test[<span class="number">2</span>])</div><div class="line"><span class="built_in">print</span>(table_test[<span class="number">3</span>])</div><div class="line"></div><div class="line"><span class="comment">--great&lt;&lt;&lt;&lt;</span></div><div class="line"><span class="comment">--meta_table_t</span></div><div class="line"><span class="comment">--1</span></div><div class="line"><span class="comment">--three</span></div></pre></td></tr></table></figure></p>
<h2 id="使用元表赋值"><a href="#使用元表赋值" class="headerlink" title="使用元表赋值"></a>使用元表赋值</h2><p>这里使用元表提供的函数提前拦截赋值的地方。然后使用rawset进行赋值<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">table_test =<span class="built_in">setmetatable</span>(&#123;&#125;,</div><div class="line">&#123;</div><div class="line">	    __newindex = <span class="function"><span class="keyword">function</span><span class="params">(tb,key,value)</span></span></div><div class="line">		<span class="built_in">print</span>(key .. <span class="string">" &lt;-UPDATE-&gt; "</span> .. value)</div><div class="line">		<span class="built_in">rawset</span>(tb,key,value)</div><div class="line">	<span class="keyword">end</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">table_test.key = <span class="string">"key1"</span></div><div class="line"><span class="built_in">print</span>(table_test.key)</div><div class="line"></div><div class="line"><span class="comment">-- 输出结果</span></div><div class="line"><span class="comment">-- key &lt;-UPDATE-&gt; key1</span></div><div class="line"><span class="comment">-- key1</span></div></pre></td></tr></table></figure></p>
<h2 id="元表运算符重载"><a href="#元表运算符重载" class="headerlink" title="元表运算符重载"></a>元表运算符重载</h2><p>可供重载的运算符列表</p>
<ul>
<li>__add    对应的运算符 ‘+’.</li>
<li>__sub    对应的运算符 ‘-‘.</li>
<li>__mul    对应的运算符 ‘*’.</li>
<li>__div    对应的运算符 ‘/‘.</li>
<li>__mod    对应的运算符 ‘%’.</li>
<li>__unm    对应的运算符 ‘-‘.</li>
<li>__concat    对应的运算符 ‘..’.</li>
<li>__eq    对应的运算符 ‘==’.</li>
<li>__lt    对应的运算符 ‘&lt;’.</li>
<li>__le    对应的运算符 ‘&lt;=’.</li>
</ul>
<p>重载了+运算符 ，其他的同理<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">table_test =<span class="built_in">setmetatable</span>(&#123;<span class="number">66</span>,<span class="number">99</span>,<span class="number">77</span>&#125;,</div><div class="line">&#123;</div><div class="line">	__add = <span class="function"><span class="keyword">function</span><span class="params">(tb1,tb2)</span></span></div><div class="line">		<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tb2) <span class="keyword">do</span></div><div class="line">			<span class="built_in">table</span>.insert(tb1,k,v)</div><div class="line">		<span class="keyword">end</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">table3 = table_test+&#123;<span class="number">33</span>,<span class="number">44</span>,<span class="number">11</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(table_test) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(k,v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="重载元表的-call-与-tostring"><a href="#重载元表的-call-与-tostring" class="headerlink" title="重载元表的 call 与 tostring"></a>重载元表的 <strong>call 与 </strong>tostring</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">table_test =<span class="built_in">setmetatable</span>(&#123;<span class="number">66</span>,<span class="number">99</span>,<span class="number">77</span>&#125;,</div><div class="line">&#123;</div><div class="line">	__call = <span class="function"><span class="keyword">function</span><span class="params">(tb1,tb2)</span></span></div><div class="line">		<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tb2) <span class="keyword">do</span></div><div class="line">			<span class="built_in">table</span>.insert(tb1,k,v)</div><div class="line">		<span class="keyword">end</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">table_test(&#123;<span class="number">33</span>,<span class="number">44</span>,<span class="number">11</span>&#125;)</div><div class="line"></div><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(table_test) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(k,v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">table1 = <span class="built_in">setmetatable</span>(&#123;<span class="number">33</span>,<span class="number">44</span>,<span class="number">11</span>&#125;,&#123;</div><div class="line">	__tostring = <span class="function"><span class="keyword">function</span><span class="params">(tb1)</span></span></div><div class="line">		total = <span class="number">0</span></div><div class="line">		<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tb1) <span class="keyword">do</span></div><div class="line">			total = total + v</div><div class="line">		<span class="keyword">end</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"value total &gt;&gt; "</span> .. total .. <span class="string">"&lt;&lt;&lt;"</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(table1)</div></pre></td></tr></table></figure>
<h1 id="coroutine-协程"><a href="#coroutine-协程" class="headerlink" title="coroutine 协程"></a>coroutine 协程</h1><p><a href="http://www.runoob.com/lua/lua-coroutine.html" target="_blank" rel="external">Lua 协同程序(coroutine) - 来自 RUNOOB.COM</a></p>
<ul>
<li>coroutine.create()    创建coroutine，返回coroutine， 参数是一个函数，当和resume配合使用的时候就唤醒函数调用</li>
<li>coroutine.resume()    重启coroutine，和create配合使用</li>
<li>coroutine.yield()    挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果</li>
<li>coroutine.status()    查看coroutine的状态<br>注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序</li>
<li>coroutine.wrap（）    创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复</li>
<li>coroutine.running()    返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#!/usr/<span class="keyword">local</span>/bin/lua</div><div class="line"></div><div class="line"><span class="comment">-- coroutine_test.lua 文件</span></div><div class="line">co = <span class="built_in">coroutine</span>.create(</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></div><div class="line">        <span class="built_in">print</span>(i);</div><div class="line">    <span class="keyword">end</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="built_in">coroutine</span>.resume(co, <span class="number">1</span>)   <span class="comment">-- 1</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.status(co))  <span class="comment">-- dead</span></div><div class="line"> </div><div class="line"><span class="built_in">print</span>(<span class="string">"----------"</span>)</div><div class="line"> </div><div class="line">co = <span class="built_in">coroutine</span>.wrap(</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></div><div class="line">        <span class="built_in">print</span>(i);</div><div class="line">    <span class="keyword">end</span></div><div class="line">)</div><div class="line"> </div><div class="line">co(<span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="built_in">print</span>(<span class="string">"----------"</span>)</div><div class="line"> </div><div class="line">co2 = <span class="built_in">coroutine</span>.create(</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">        <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">10</span> <span class="keyword">do</span></div><div class="line">            <span class="built_in">print</span>(i)</div><div class="line">            <span class="keyword">if</span> i == <span class="number">3</span> <span class="keyword">then</span></div><div class="line">                <span class="built_in">print</span>(<span class="built_in">coroutine</span>.status(co2))  <span class="comment">--running</span></div><div class="line">                <span class="built_in">print</span>(<span class="built_in">coroutine</span>.running()) <span class="comment">--thread:XXXXXX</span></div><div class="line">            <span class="keyword">end</span></div><div class="line">            <span class="built_in">coroutine</span>.yield()</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="built_in">coroutine</span>.resume(co2) <span class="comment">--1</span></div><div class="line"><span class="built_in">coroutine</span>.resume(co2) <span class="comment">--2</span></div><div class="line"><span class="built_in">coroutine</span>.resume(co2) <span class="comment">--3</span></div><div class="line"> </div><div class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.status(co2))   <span class="comment">-- suspended</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.running())</div><div class="line"> </div><div class="line"><span class="built_in">print</span>(<span class="string">"----------"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这一篇记录一些关于Lua的更深入一些的东西主要是table的使用。但是不涉及IO,Debug，垃圾回收,OOP,数据库访问。这些东西我觉得可以单独放在一个专题写。&lt;br&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Lua" scheme="http://vrast.cn/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua Script 1</title>
    <link href="http://vrast.cn/posts/32bf7061/"/>
    <id>http://vrast.cn/posts/32bf7061/</id>
    <published>2017-03-22T08:50:24.000Z</published>
    <updated>2017-03-24T08:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>总结Lua基础语法，与简单运用 这里并不涉及深入内容<br><a id="more"></a></p>
</blockquote>
<p><a href="http://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="external">推荐一个快速学习LUA的网站</a> ，这个网站的内容写的短有些细节忽略了。有时间最好还是要看下面推荐的书<br>推荐书籍 Programming in Lua third edition.pdf</p>
<h1 id="总结一点学习编程语言的技巧"><a href="#总结一点学习编程语言的技巧" class="headerlink" title="总结一点学习编程语言的技巧"></a>总结一点学习编程语言的技巧</h1><ol>
<li><p>学习一个新的语言难免会涉及到大量的内置限定词。这时候就需要使用一个合适的开发工具(重要)，智能提示可以帮助我们快速输入和记忆这些重要且不好记忆的文法。</p>
</li>
<li><p>类比之前的语言 总是可以找到大量的特性的，这时候就免去的重复的记忆</p>
</li>
</ol>
<h1 id="关于lua语言一些难搞的概念"><a href="#关于lua语言一些难搞的概念" class="headerlink" title="关于lua语言一些难搞的概念"></a>关于lua语言一些难搞的概念</h1><p>这个可以放到最后看</p>
<ol>
<li><a href="http://www.runoob.com/lua/lua-iterators.html" target="_blank" rel="external">迭代器</a></li>
</ol>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>我在桌面新建了一个 a.lua 脚本 ， 第一行代码是让这个脚本去寻找解释器</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/<span class="keyword">local</span>/bin/lua</div><div class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>);</div></pre></td></tr></table></figure>
<p>因为权限问题 我先给脚本授权，然后直接调用了这个脚本<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">keyle@keyles-MacBook-Pro  ~/Desktop  chmod a+x /Users/keyle/Desktop/<span class="selector-tag">a</span><span class="selector-class">.lua</span></div><div class="line">keyle@keyles-MacBook-Pro  ~/Desktop  ./<span class="selector-tag">a</span><span class="selector-class">.lua</span></div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<h1 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">and</span>	<span class="keyword">break</span>	<span class="keyword">do</span>	<span class="keyword">else</span></div><div class="line"><span class="keyword">elseif</span>	<span class="keyword">end</span>	<span class="keyword">false</span>	<span class="keyword">for</span></div><div class="line"><span class="function"><span class="keyword">function</span>	<span class="title">if</span>	<span class="title">in</span>	<span class="title">local</span></span></div><div class="line"><span class="title">nil</span>	<span class="title">not</span>	<span class="title">or</span>	<span class="title">repeat</span></div><div class="line"><span class="title">return</span>	<span class="title">then</span>	<span class="title">true</span>	<span class="title">until</span></div><div class="line"><span class="title">while</span></div></pre></td></tr></table></figure>
<h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h1><p>nil、boolean、number、string、userdata、function、thread和table</p>
<h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><p>最后一个输出结果 type(nil) 之后 得到了一个 string。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(<span class="string">"Hello world"</span>))</span>      --&gt;</span> string</div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(<span class="number">10.4</span>*<span class="number">3</span>))</span>             --&gt;</span> number</div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(<span class="built_in">print</span>))</span>              --&gt;</span> <span class="keyword">function</span></div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(type))</span>               --&gt;</span> <span class="keyword">function</span></div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(<span class="literal">true</span>))</span>               --&gt;</span> boolean</div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(nil))</span>                --&gt;</span> nil</div><div class="line"><span class="built_in">print</span><span class="function"><span class="params">(type(type(X)))</span>            --&gt;</span> string</div></pre></td></tr></table></figure></p>
<h3 id="nil的特性"><a href="#nil的特性" class="headerlink" title="nil的特性"></a>nil的特性</h3><p>使用nil 可以删除table里面的key-value<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tab1 = &#123; key1 = <span class="string">"val1"</span>, key2 = <span class="string">"val2"</span>, <span class="string">"val3"</span> &#125;</div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(k .. <span class="string">" - "</span> .. v)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(<span class="string">""</span>)</div><div class="line">tab1.key1 = <span class="keyword">nil</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(k .. <span class="string">" - "</span> .. v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><code>key1 - val1</code>已经被删除了。在table里如果默认没有声明 key ，则默认从1开始自增<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> - val3</div><div class="line">key1 - val1</div><div class="line">key2 - val2</div><div class="line"></div><div class="line"><span class="number">1</span> - val3</div><div class="line">key2 - val2</div></pre></td></tr></table></figure></p>
<h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><p>boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是”假”，其他的都为”真”<br>在其他语言也是如此</p>
<h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>Lua 默认只有一种 number 类型 – double（双精度）类型（默认类型可以修改 luaconf.h 里的定义）</p>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>字符串由一对双引号或单引号来表示。也可以用 2 个方括号 “[[]]” 来表示”一块”字符串。<br>在lua里使用<code>#</code>来计算字符串长度。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(#<span class="string">"123"</span>)</span></span></div></pre></td></tr></table></figure></p>
<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ol>
<li>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。</li>
<li>在 Lua 里表的默认初始索引一般以 1 开始。</li>
<li>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 创建一个空的 table</span></div><div class="line"><span class="keyword">local</span> tbl1 = &#123;&#125;</div><div class="line"> </div><div class="line"><span class="comment">-- 直接初始表</span></div><div class="line"><span class="keyword">local</span> tbl2 = &#123;<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"grape"</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(tbl2) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i,v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> ⚙  keyle@keyles-MacBook-Pro  ~/Desktop  ./a.lua</div><div class="line"><span class="number">1</span>	apple</div><div class="line"><span class="number">2</span>	pear</div><div class="line"><span class="number">3</span>	orange</div><div class="line"><span class="number">4</span>	grape</div></pre></td></tr></table></figure></p>
<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><ul>
<li>支持作为变量传递</li>
<li>支持以匿名的方式使用</li>
<li>支持多个返回值</li>
</ul>
<h3 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h3><p>支持多个返回值，比如string.find，其返回匹配串”开始和结束的下标”（如果不存在匹配串返回nil）。<br>举个例子：返回字符串的开始|结束下表<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s, e = <span class="built_in">string</span>.find(<span class="string">"just test for you"</span>, <span class="string">"test"</span>) </div><div class="line"><span class="built_in">print</span>(s, e)</div><div class="line"></div><div class="line"><span class="comment">--测试函数的多个返回值</span></div><div class="line">func1  =  <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">			<span class="keyword">return</span> <span class="string">"keyle"</span>,<span class="string">"666"</span></div><div class="line">		  <span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(func1())</div></pre></td></tr></table></figure></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>	<span class="number">9</span></div><div class="line">keyle	<span class="number">666</span></div></pre></td></tr></table></figure>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>lua支持不固定参数的传入<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func1  =  <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></div><div class="line">			<span class="keyword">local</span> args = &#123;...&#125;</div><div class="line">			<span class="keyword">local</span> result = <span class="number">0</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span> i=<span class="number">1</span>,#args <span class="keyword">do</span></div><div class="line">				result = result + args[i]</div><div class="line">			<span class="keyword">end</span></div><div class="line"></div><div class="line">			<span class="keyword">return</span> result,#args</div><div class="line">		  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(func1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</div><div class="line"><span class="comment">-- 返回结果 15	5</span></div></pre></td></tr></table></figure></p>
<h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>lua使用的是协程（coroutine） 与 unity3d的机制几乎一样。 这个也好理解。</p>
<h2 id="userdata"><a href="#userdata" class="headerlink" title="userdata"></a>userdata</h2><p>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。ulua就是通过扩展userdata来实现调用unity3d的各种属性。</p>
<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><ul>
<li>Lua 变量有三种类型：全局变量、局部变量、表中的域。</li>
<li>Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。</li>
<li>局部变量的作用域为从声明位置开始到所在语句块结束。</li>
<li>变量的默认值均为 nil。<br>尽可能使用局部变量，因为访问速度快<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> </div><div class="line">	<span class="keyword">local</span> a = <span class="number">123</span></div><div class="line">	<span class="built_in">print</span>(a)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">--超出了作用域 print -&gt; nil</span></div><div class="line"><span class="built_in">print</span>(a)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>简单形象的赋值方式，第二第三两行是交换两个变量的值。免去写交换算法了<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a, b = <span class="number">10</span>, <span class="number">2</span> * x           <span class="comment">--&gt; a=10; b=2*x</span></div><div class="line">x, y = y, x                <span class="comment">-- swap 'x' for 'y'</span></div><div class="line">a[i], a[j] = a[j], a[i]    <span class="comment">-- swap 'a[i]' for 'a[j]'</span></div></pre></td></tr></table></figure></p>
<p>左右两边要对称,如果不对称参看下文<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：</div><div class="line"><span class="selector-tag">a</span>. 变量个数 &gt; 值的个数             按变量个数补足nil</div><div class="line"><span class="selector-tag">b</span>. 变量个数 &lt; 值的个数             多余的值会被忽略</div></pre></td></tr></table></figure></p>
<p>这里直接使用 [table].key 的方式取出了 “321”<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>&#125;</div><div class="line">a[<span class="string">"key"</span>] = <span class="string">"321"</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(a.key)</div><div class="line"><span class="built_in">print</span>(a[<span class="number">1</span>])</div><div class="line"><span class="built_in">print</span>(a[<span class="number">4</span>]) </div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"-----"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i,v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>控制台输出 ：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">321</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">9</span></div><div class="line">-----</div><div class="line"><span class="number">1</span>	<span class="number">3</span></div><div class="line"><span class="number">2</span>	<span class="number">2</span></div><div class="line"><span class="number">3</span>	<span class="number">1</span></div><div class="line"><span class="number">4</span>	<span class="number">9</span></div></pre></td></tr></table></figure></p>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>其他的方式类似 for while所有一样都一样，下面这个do while循环这里取个例子</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repeat</span></div><div class="line">   statements</div><div class="line"><span class="keyword">until</span>( condition )</div></pre></td></tr></table></figure>
<p>输出1 – 10<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">i</span> = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> true</div><div class="line">do</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">i</span>&gt;<span class="number">10</span>) then</div><div class="line">		<span class="keyword">break</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">	print(<span class="built_in">i</span>)</div><div class="line">	<span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><ol>
<li>不允许类似 a ++ , a/=1 之类的写法</li>
<li>不允许类似c#里的&amp;&amp;(and)符号，这里需要用 and</li>
<li>使用 .. 连接字符串 .. </li>
<li><code>#</code>用来计算字符或者table长度 </li>
<li>~=这是个不等于符</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结Lua基础语法，与简单运用 这里并不涉及深入内容&lt;br&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Lua" scheme="http://vrast.cn/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Install Lua on MACOS</title>
    <link href="http://vrast.cn/posts/2b34f5ba/"/>
    <id>http://vrast.cn/posts/2b34f5ba/</id>
    <published>2017-03-22T08:13:11.000Z</published>
    <updated>2017-03-22T11:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>简单记录下LUA在macOS上的安装。Lua的解释引擎很小 所以安装也很方便，我直接在 lua.org 上下载了lua的源码在macOS上进行编译。</p>
</blockquote>
<a id="more"></a>
<h1 id="Install-Lua"><a href="#Install-Lua" class="headerlink" title="Install Lua"></a>Install Lua</h1><p><a href="http://www.lua.org/download.html" target="_blank" rel="external">下载页面</a></p>
<p>下载的文件叫做 lua-5.3.4.tar 。直接解压 cd 到 文件夹下的 src 目录。然后执行下面命令安装完毕。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">make</span> macosx</div><div class="line"><span class="keyword">cd</span> ..</div><div class="line">sudo <span class="keyword">make</span> install</div></pre></td></tr></table></figure></p>
<h1 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h1><p>使用lua命令直接进入lua脚本编辑模式<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> keyle@keyles-MacBook-Pro  ~  lua</div><div class="line">Lua <span class="number">5.3</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2017</span> Lua.org, PUC-Rio</div></pre></td></tr></table></figure></p>
<h1 id="Environment-Setting"><a href="#Environment-Setting" class="headerlink" title="Environment Setting"></a>Environment Setting</h1><p>我使用 sublime text3 作为编辑器，当然可以直接使用vscode，或者Xamarin Studio.<br>这里贴出 sublime text3 的配置方法。</p>
<ol>
<li><p>进入如下目录<br>~/Library/Application Support/Sublime Text 3/Packages/User</p>
</li>
<li><p>添加配置信息 <code>lua_setting.sublime-build</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;    </div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"/usr/local/bin/lua"</span>, <span class="string">"$file"</span>],   </div><div class="line">  <span class="attr">"file_regex"</span>: <span class="string">"^(?:lua:)?[\t ](...*?):([0-9]*):?([0-9]*)"</span>,  </div><div class="line">  <span class="attr">"selector"</span>: <span class="string">"source.lua"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编译时选择 Lua 即可在命令行看到编译结果。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单记录下LUA在macOS上的安装。Lua的解释引擎很小 所以安装也很方便，我直接在 lua.org 上下载了lua的源码在macOS上进行编译。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Script" scheme="http://vrast.cn/categories/Script/"/>
    
    
      <category term="Lua" scheme="http://vrast.cn/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>句子的构成</title>
    <link href="http://vrast.cn/posts/e62162e2/"/>
    <id>http://vrast.cn/posts/e62162e2/</id>
    <published>2017-03-20T13:45:03.000Z</published>
    <updated>2017-03-22T13:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录一些关于句子构成的语法。以前上学的时候没有用心学现在回头看应该还来的及吧。</p>
</blockquote>
<a id="more"></a>
<h1 id="主语"><a href="#主语" class="headerlink" title="主语"></a>主语</h1><ol>
<li>名词作主语</li>
<li>代词作主语</li>
<li>动名词作主语或不定式作主语(动词不能做主语，需变成动名词或不定式)，不定式或动名词作主语有时候造成句子过长这时候用代词it作主语，动名词移到句尾一般改成不定式。</li>
</ol>
<h1 id="从句"><a href="#从句" class="headerlink" title="从句"></a>从句</h1><h2 id="名词性从句作主语"><a href="#名词性从句作主语" class="headerlink" title="名词性从句作主语"></a>名词性从句作主语</h2><p>例句：他不学习令我生气<br>翻译：that he doesn’t study makes me angry.<br>这里不能翻译成 he doesn’t study makes me angry.的原因是 <code>he doesn’t study </code>是个句子。句子是不能充当主语的。</p>
<h2 id="从句种类"><a href="#从句种类" class="headerlink" title="从句种类"></a>从句种类</h2><p>从句可充当 宾 ， 主 ， 表  ，从 ， 同(位语)</p>
<h3 id="that引导"><a href="#that引导" class="headerlink" title="that引导"></a>that引导</h3><p>任何一个主语起首的句子冠以that即为that从句。</p>
<h3 id="whether引导"><a href="#whether引导" class="headerlink" title="whether引导"></a>whether引导</h3><p>能用yes/no回答的句子(一般疑问句)，可以使用 whether<br>问句一般有助动词，这时候需要特殊处理：</p>
<h4 id="be动词"><a href="#be动词" class="headerlink" title="be动词"></a>be动词</h4><p>主语/动词还原，句首冠以 whether引导</p>
<h4 id="一般助动词"><a href="#一般助动词" class="headerlink" title="一般助动词"></a>一般助动词</h4><p>主语/助动词还原，句首冠以 whether引导</p>
<h4 id="do-does-did等助动词"><a href="#do-does-did等助动词" class="headerlink" title="do,does,did等助动词"></a>do,does,did等助动词</h4><p>主语/动词还原,将 do,does,did 去掉，后面的单词依据人称和时态变化。</p>
<h3 id="疑问词引导"><a href="#疑问词引导" class="headerlink" title="疑问词引导"></a>疑问词引导</h3><h4 id="be动词-1"><a href="#be动词-1" class="headerlink" title="be动词"></a>be动词</h4><p>主语/be动词还原，前面保留疑问</p>
<h4 id="一般助动词-1"><a href="#一般助动词-1" class="headerlink" title="一般助动词"></a>一般助动词</h4><p>主语/助动词还原，前面保留疑问</p>
<h4 id="do-does-did等助动词-1"><a href="#do-does-did等助动词-1" class="headerlink" title="do,does,did等助动词"></a>do,does,did等助动词</h4><p>主语/助动词还原，前面保留疑问,将 do,does,did 去掉，后面的单词依据人称和时态变化。</p>
<h1 id="需要记忆的概念"><a href="#需要记忆的概念" class="headerlink" title="需要记忆的概念"></a>需要记忆的概念</h1><p>以下的概念均搜集来自百度百科。</p>
<h2 id="不定式-infinitive"><a href="#不定式-infinitive" class="headerlink" title="不定式[infinitive]"></a>不定式[infinitive]</h2><p>在语法中，动词不定式是指动词的一种不带词形变化从而不指示人称、数量、时态的形式。它之所以被叫做不定式，是因为动词不被限定，或者说不被词形变化所局限。不定式属于非谓语动词。</p>
<h2 id="非谓语动词-the-Non-Finite-Verbs"><a href="#非谓语动词-the-Non-Finite-Verbs" class="headerlink" title="非谓语动词[the Non-Finite Verbs]"></a>非谓语动词[the Non-Finite Verbs]</h2><p>非谓语动词，又叫非限定动词，非谓语动词是指在句子中不是谓语的动词，主要包括不定式、动名词和分词（现在分词和过去分词），即动词的非谓语形式。非谓语动词除了不能独立作谓语外，可以承担句子的其他成分。</p>
<h2 id="助动词"><a href="#助动词" class="headerlink" title="助动词"></a>助动词</h2><p>最常用的助动词有：be， have， has， do， does， shall， did， will， should， would等。助动词可以协助主要动词构成时态或者语态，也可构成疑问句和否定句，构成否定句时与否定副词not连用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一些关于句子构成的语法。以前上学的时候没有用心学现在回头看应该还来的及吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://vrast.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="语法" scheme="http://vrast.cn/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GCD in iOS</title>
    <link href="http://vrast.cn/posts/71d7254d/"/>
    <id>http://vrast.cn/posts/71d7254d/</id>
    <published>2017-03-16T07:39:11.000Z</published>
    <updated>2017-03-22T11:14:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果想用Thread的话，就试试GCD吧。</p>
</blockquote>
<p>我找了几篇写的比较好的GCD介绍：<br><a href="http://blog.csdn.net/totogo2010/article/details/8016129" target="_blank" rel="external">iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用</a></p>
<p><a href="https://www.objc.io/issues/2-concurrency/low-level-concurrency-apis/" target="_blank" rel="external">Low-Level Concurrency APIs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果想用Thread的话，就试试GCD吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我找了几篇写的比较好的GCD介绍：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/801
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="GCD" scheme="http://vrast.cn/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>当下 工作之余的学习</title>
    <link href="http://vrast.cn/posts/44494be0/"/>
    <id>http://vrast.cn/posts/44494be0/</id>
    <published>2017-03-11T13:55:53.000Z</published>
    <updated>2017-03-20T13:46:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我在YouTube的频道上看了一个关于英语的讲座，对我来说有一些感触。我在这里记录下来<br><a href="https://www.youtube.com/watch?v=BENA8QSPmLY" target="_blank" rel="external">视频连接如下</a></p>
</blockquote>
<a id="more"></a>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ol>
<li>下意识学习语言需要沟通</li>
<li>靠阅读练习听力是失败的</li>
<li>学东西不能熬夜需要休息</li>
<li>学外语是生理训练的过程</li>
<li>兴奋快乐好奇学的比较快</li>
<li>从跟你有关联的内容开始</li>
<li>把外语当成工具每天说用</li>
</ol>
<h1 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h1><ol>
<li>大量去听是基本功</li>
<li>练好语感(泡脑子，节奏 旋律)</li>
<li>学会外语思维</li>
<li>泡脑子，节奏 旋律</li>
<li>先窄后宽,听到能猜到下句为止。</li>
<li>身体语言(不同的地域有差异)</li>
<li>注意力放在核心</li>
<li>混合已经会的词汇去用</li>
<li>语言家长</li>
<li>模仿面部</li>
<li>外语声音直接连接到心目中的画面</li>
</ol>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>合理的态度，要求和母语相比不要太苛刻</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我在YouTube的频道上看了一个关于英语的讲座，对我来说有一些感触。我在这里记录下来&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BENA8QSPmLY&quot;&gt;视频连接如下&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://vrast.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="English" scheme="http://vrast.cn/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>关于学习,工作与生活</title>
    <link href="http://vrast.cn/posts/b0ffa5e0/"/>
    <id>http://vrast.cn/posts/b0ffa5e0/</id>
    <published>2017-03-11T13:33:38.000Z</published>
    <updated>2017-03-13T05:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近期我的生活看似有规律实则一团乱麻。需要做的事情我也正在做，需要达成的目标也正在继续中。</p>
</blockquote>
<a id="more"></a>
<h1 id="关于今天上课我所遇到的问题，我做了如下的总结"><a href="#关于今天上课我所遇到的问题，我做了如下的总结" class="headerlink" title="关于今天上课我所遇到的问题，我做了如下的总结"></a>关于今天上课我所遇到的问题，我做了如下的总结</h1><p>3月11日。今天早上上听力课，发现自己不懂的句子真的很多，发现了，原来不是那么容易。下午则上高综又被语法和单词形态碾压一边。有点头疼。关于原因我自身反省了一下，我自身认为有以下几点我确实有问题：</p>
<ol>
<li>没有做课前预习</li>
<li>词汇量积累不够</li>
<li>语法懂得少</li>
<li>过于注重平时的训练，没有把上课的事情放在心上</li>
</ol>
<p>回忆今天上课过程中的问题：</p>
<ol>
<li>注意力没集中</li>
<li>没有带笔，全部依赖电脑记录</li>
</ol>
<h1 id="规避上面的问题"><a href="#规避上面的问题" class="headerlink" title="规避上面的问题"></a>规避上面的问题</h1><ol>
<li>预习课本，现在上课的压力并不大，两本书各一个unit</li>
<li>准备纸和笔</li>
<li>做好每日学习计划</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近期我的生活看似有规律实则一团乱麻。需要做的事情我也正在做，需要达成的目标也正在继续中。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://vrast.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="计划与时间管理" scheme="http://vrast.cn/tags/%E8%AE%A1%E5%88%92%E4%B8%8E%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Use COCOAPODS in XCode</title>
    <link href="http://vrast.cn/posts/6fc31101/"/>
    <id>http://vrast.cn/posts/6fc31101/</id>
    <published>2017-03-09T09:15:01.000Z</published>
    <updated>2017-03-15T10:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以前常用VS的 Nuget管理项目的外部类库与一些小插件。在xocde里有类似的东西，它就是Cocopods。</p>
</blockquote>
<a id="more"></a>
<h1 id="如何安装Cocopods"><a href="#如何安装Cocopods" class="headerlink" title="如何安装Cocopods"></a>如何安装Cocopods</h1><p><a href="https://vrast.cn/posts/35d56e26/">MACOS开发环境配置</a></p>
<h1 id="Get-Start"><a href="#Get-Start" class="headerlink" title="Get Start"></a>Get Start</h1><p><a href="https://cocoapods.org" target="_blank" rel="external">原文直接来自官网</a></p>
<p>上面的内容是在pods里搜索，在xcode的项目目录的一个叫<code>Podfile</code>的文件中列出依赖项<br>Search for pods (above). Then list the dependencies in a text file named Podfile in your Xcode project directory:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">platform :ios, <span class="string">'8.0'</span></div><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target <span class="string">'MyApp'</span> <span class="keyword">do</span></div><div class="line">  pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.6'</span></div><div class="line">  pod <span class="string">'ORStackView'</span>, <span class="string">'~&gt; 3.0'</span></div><div class="line">  pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>提示：CocoaPods提供了一个<code>pod init</code>命令来创建一个灵活的默认<code>Podfile</code>，你会用到它的。<br>Tip: CocoaPods provides a pod init command to create a Podfile with smart defaults. You should use it.</p>
<p>现在你可以在项目里安装依赖项了<br>Now you can install the dependencies in your project:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod install</div></pre></td></tr></table></figure>
<p>确保在构建项目时始终打开Xcode工作区(xcworkspace文件)而不是项目文件：<br>Make sure to always open the Xcode workspace instead of the project file when building your project:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ open App.xcworkspace</div></pre></td></tr></table></figure>
<p>现在您可以导入依赖关系，例如：<br>Now you can import your dependencies e.g.:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Reachability/Reachability.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod COMMAND</div><div class="line"></div><div class="line">      CocoaPods, the Cocoa library package manager.</div><div class="line"></div><div class="line">Commands:</div><div class="line"></div><div class="line">    + <span class="keyword">cache</span>      Manipulate the CocoaPods <span class="keyword">cache</span></div><div class="line">    + env        Display pod environment</div><div class="line">    + init       Generate a Podfile <span class="keyword">for</span> the <span class="keyword">current</span> <span class="keyword">directory</span></div><div class="line">    + <span class="keyword">install</span>    <span class="keyword">Install</span> <span class="keyword">project</span> dependencies according <span class="keyword">to</span> <span class="keyword">versions</span> <span class="keyword">from</span> a</div><div class="line">                 Podfile.lock</div><div class="line">    + ipc        Inter-process communication</div><div class="line">    + lib        Develop pods</div><div class="line">    + <span class="keyword">list</span>       <span class="keyword">List</span> pods</div><div class="line">    + outdated   <span class="keyword">Show</span> outdated <span class="keyword">project</span> dependencies</div><div class="line">    + repo       Manage spec-repositories</div><div class="line">    + setup      Setup the CocoaPods environment</div><div class="line">    + spec       Manage pod specs</div><div class="line">    + <span class="keyword">update</span>     <span class="keyword">Update</span> outdated <span class="keyword">project</span> dependencies <span class="keyword">and</span> <span class="keyword">create</span> <span class="keyword">new</span></div><div class="line">                 Podfile.lock</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">    <span class="comment">--silent     Show nothing</span></div><div class="line">    <span class="comment">--version    Show the version of the tool</span></div><div class="line">    <span class="comment">--verbose    Show more debugging information</span></div><div class="line">    <span class="comment">--no-ansi    Show output without ANSI codes</span></div><div class="line">    <span class="comment">--help       Show help banner of specified command</span></div><div class="line">	<span class="keyword">from</span> /<span class="keyword">Library</span>/Ruby/Gems/<span class="number">2.0</span><span class="number">.0</span>/gems/cocoapods<span class="number">-1.2</span><span class="number">.0</span>/lib/cocoapods/command.rb:<span class="number">47</span>:<span class="keyword">in</span> <span class="string">`run'</span></div><div class="line">	from /Library/Ruby/Gems/2.0.0/gems/cocoapods-1.2.0/bin/pod:55:in `&lt;top (<span class="keyword">required</span>)&gt;<span class="string">'</span></div><div class="line">	from /usr/local/bin/pod:23:in `load'</div><div class="line">	<span class="keyword">from</span> /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/pod:<span class="number">23</span>:<span class="keyword">in</span> <span class="string">`&lt;main&gt;'</span></div></pre></td></tr></table></figure>
<h1 id="为自己的开源项目添加pod支持"><a href="#为自己的开源项目添加pod支持" class="headerlink" title="为自己的开源项目添加pod支持"></a>为自己的开源项目添加pod支持</h1><p><a href="http://www.jianshu.com/p/d7d1942dd3f1" target="_blank" rel="external">iOS开发– 创建podspec文件，为自己的项目添加pod支持</a></p>
<h1 id="Setup报错"><a href="#Setup报错" class="headerlink" title="Setup报错"></a>Setup报错</h1><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --<span class="keyword">global</span> <span class="keyword">http</span>.postBuffer <span class="number">24288000</span></div><div class="line">$ git config --<span class="keyword">list</span></div></pre></td></tr></table></figure>
<p>若输出 http.postbuffer=24288000, 就 OK了</p>
<p><a href="http://blog.csdn.net/wangyanchang21/article/details/51437934" target="_blank" rel="external">cocoapods:常见错误总结</a></p>
<h1 id="可视化CocoaPods"><a href="#可视化CocoaPods" class="headerlink" title="可视化CocoaPods"></a>可视化CocoaPods</h1><p>我使用 <a href="http://alcatraz.io" target="_blank" rel="external">alcatraz</a>来可视化CocoaPods操作。因为有时候用命令行不是很方便。</p>
<p>安装命令如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -fsSL http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/supermarin/Alcatraz/deploy/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></div></pre></td></tr></table></figure></p>
<p>卸载命令如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf <span class="regexp">~/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins/Alcatraz.xcplugin</div><div class="line">rm -rf <span class="regexp">~/Library/</span>Application\ Support/Alcatraz</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/XVimProject/XVim/blob/master/INSTALL_Xcode8.md" target="_blank" rel="external">XCode  8.X 需要 usign 才能使用插件</a></p>
<h1 id="解决插件升级不能使用的问题"><a href="#解决插件升级不能使用的问题" class="headerlink" title="解决插件升级不能使用的问题"></a>解决插件升级不能使用的问题</h1><p>在xcode版本更新的之后，或者从package manager新下载了插件，有时候不可用。这时候就需要找到下面目录<br><code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code><br>然后找到新下载的插件 ShowContent 。打开plist文件，在DVTPlugInCompatibilityUUIDs列表中新增一串ID。</p>
<p>下面是这串ID的获取方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults <span class="keyword">read</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Info DVTPlugInCompatibilityUUID</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以前常用VS的 Nuget管理项目的外部类库与一些小插件。在xocde里有类似的东西，它就是Cocopods。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Cocopods" scheme="http://vrast.cn/tags/Cocopods/"/>
    
  </entry>
  
  <entry>
    <title>Foundation framework in iOS</title>
    <link href="http://vrast.cn/posts/1e092c72/"/>
    <id>http://vrast.cn/posts/1e092c72/</id>
    <published>2017-03-08T03:29:55.000Z</published>
    <updated>2017-03-08T09:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>objective-c不像CSharpe有一个标准库 他的标准有很多,想象一下33年前的编程语言 他都经历了什么，因为早期objective-c的一套工具库是乔老头子出走时Next-step公司写的，后来回苹果之后接着维护了。bjective-c一般常用的就是 Foundation framework。这里稍微介绍一些基础工具类。点到即止 API 太多了，我也没时间花大篇幅翻译。用到哪儿就找哪儿的API。<a href="https://developer.apple.com" target="_blank" rel="external">https://developer.apple.com</a> </p>
</blockquote>
<a id="more"></a>
<h1 id="NSString-amp-NSMutableString"><a href="#NSString-amp-NSMutableString" class="headerlink" title="NSString &amp; NSMutableString"></a>NSString &amp; NSMutableString</h1><p>NSString是不可变的，NSMutbaleString是可变的。二者在类型上是不同的，但是存储的字符串是可以做对比的。<br>NSMutbaleString就有点类似C#的StringBuild这个类，可以做一些字符串的增删改操作。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="built_in">NSMutableString</span>* content1 =[[<span class="built_in">NSMutableString</span> alloc] initWithString:<span class="string">@"hello"</span>];</div><div class="line">    <span class="built_in">NSString</span>* content2 = <span class="string">@"hello"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableString</span>* content3 = <span class="string">@"hello"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(content1 == content2)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"true1"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="built_in">NSLog</span>(<span class="string">@"false1"</span>);&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>([content1 isEqualToString:content2])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"true2"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="built_in">NSLog</span>(<span class="string">@"false2"</span>);&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(content2 == content3)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"true3"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="built_in">NSLog</span>(<span class="string">@"false3"</span>);&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">10.983555</span> oc[<span class="number">21186</span>:<span class="number">821911</span>] false1</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">10.983740</span> oc[<span class="number">21186</span>:<span class="number">821911</span>] true2</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">10.983756</span> oc[<span class="number">21186</span>:<span class="number">821911</span>] true3</div><div class="line">Program ended with exit code: <span class="number">0</span></div></pre></td></tr></table></figure>
<p><a href="http://www.cocoachina.com/ios/20150724/12722.html" target="_blank" rel="external">NSString&amp;NSMutableString常用操作梳理 - 来自CocoaChina</a></p>
<h1 id="NSArray-amp-NSMutableArray"><a href="#NSArray-amp-NSMutableArray" class="headerlink" title="NSArray &amp; NSMutableArray"></a>NSArray &amp; NSMutableArray</h1><p>和上面的<code>NSString &amp; NSMutableString</code>类似。NSArray是不可变的，NSMutableArray是可变的。二者在类型上是不同的。如果需要操作数组还是用NSMutableString，这个版本的array。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">   </div><div class="line">    <span class="built_in">NSMutableDictionary</span>* ary = [[<span class="built_in">NSMutableDictionary</span> alloc]init];</div><div class="line">    [ary setObject:<span class="string">@"helloworld"</span> forKey:<span class="string">@"123"</span>];</div><div class="line">    [ary setObject:<span class="string">@"helloworld"</span> forKey:<span class="string">@"1233"</span>];</div><div class="line">    [ary removeObjectForKey:<span class="string">@"1233"</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ + count %lu"</span>,[ary valueForKey:<span class="string">@"123"</span>],(<span class="keyword">unsigned</span> <span class="keyword">long</span>) ary.count);</div><div class="line">   </div><div class="line">    [ary removeAllObjects];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/qingjoin/archive/2012/09/29/2708117.html" target="_blank" rel="external">NSMutableDictionary 与 NSMutableArray注意的地方 - 来自博客园</a></p>
<h1 id="NSSet"><a href="#NSSet" class="headerlink" title="NSSet"></a>NSSet</h1><p>特点比较明显，无序，不重复。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSSet</span> *set1 = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"c"</span>, <span class="string">@"d"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSSet</span> *set2 = [[<span class="built_in">NSSet</span> alloc] initWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"c"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSSet</span> *set3 = [<span class="built_in">NSSet</span> setWithArray:array];</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"set1 :%@"</span>, set1);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"set2 :%@"</span>, set2);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"set3 :%@"</span>, set3);</div><div class="line"></div><div class="line"><span class="comment">//获取集合个数</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"set1 count :%d"</span>, set1.count);</div><div class="line"></div><div class="line"><span class="comment">//以数组的形式获取集合中的所有对象</span></div><div class="line"><span class="built_in">NSArray</span> *allObj = [set2 allObjects];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"allObj :%@"</span>, allObj);</div><div class="line"></div><div class="line"><span class="comment">//获取任意一对象</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"anyObj :%@"</span>, [set3 anyObject]);</div><div class="line"></div><div class="line"><span class="comment">//是否包含某个对象</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"contains :%d"</span>, [set3 containsObject:<span class="string">@"obj2"</span>]);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//是否包含指定set中的对象</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"intersect obj :%d"</span>, [set1 intersectsSet:set3]);</div><div class="line"></div><div class="line"><span class="comment">//是否完全匹配</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"isEqual :%d"</span>, [set2 isEqualToSet:set3]);</div><div class="line"></div><div class="line"><span class="comment">//是否是子集合</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"isSubSet :%d"</span>, [set3 isSubsetOfSet:set1]);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">NSSet</span> *set4 = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSArray</span> *ary = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSSet</span> *set5 = [set4 setByAddingObjectsFromArray:ary];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"addFromArray :%@"</span>, set5);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">NSMutableSet</span> *mutableSet1 = [<span class="built_in">NSMutableSet</span> setWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSMutableSet</span> *mutableSet2 = [<span class="built_in">NSMutableSet</span> setWithObjects:<span class="string">@"a"</span>, <span class="string">@"2"</span>, <span class="string">@"b"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSMutableSet</span> *mutableSet3 = [<span class="built_in">NSMutableSet</span> setWithObjects:<span class="string">@"1"</span>, <span class="string">@"c"</span>, <span class="string">@"b"</span>, <span class="literal">nil</span>];</div><div class="line"></div><div class="line"><span class="comment">//集合元素相减</span></div><div class="line">[mutableSet1 minusSet:mutableSet2];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"minus :%@"</span>, mutableSet1);</div><div class="line"></div><div class="line"><span class="comment">//只留下相等元素</span></div><div class="line">[mutableSet1 intersectSet:mutableSet3];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"intersect :%@"</span>, mutableSet1);</div><div class="line"></div><div class="line"><span class="comment">//合并集合</span></div><div class="line">[mutableSet2 unionSet:mutableSet3];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"union :%@"</span>, mutableSet2);</div><div class="line"></div><div class="line"><span class="comment">//删除指定元素</span></div><div class="line">[mutableSet2 removeObject:<span class="string">@"a"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"removeObj :%@"</span>, mutableSet2);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//删除所有数据</span></div><div class="line">[mutableSet2 removeAllObjects];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"removeAll :%@"</span>, mutableSet2);</div></pre></td></tr></table></figure>
<p>控制台输出：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.567792</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] set1 :&#123;(</div><div class="line">    d,</div><div class="line">    b,</div><div class="line">    c,</div><div class="line">    a</div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568507</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] set2 :&#123;(</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    <span class="number">3</span></div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568550</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] set3 :&#123;(</div><div class="line">    a,</div><div class="line">    b,</div><div class="line">    c</div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568570</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] set1 count :<span class="number">4</span></div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568688</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] allObj :(</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    <span class="number">3</span></div><div class="line">)</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568749</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] anyObj :a</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568773</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] contains :<span class="number">0</span></div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568794</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] intersect obj :<span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568812</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] isEqual :<span class="number">0</span></div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568828</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] isSubSet :<span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568876</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] addFromArray :&#123;(</div><div class="line">    <span class="number">3</span>,</div><div class="line">    b,</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">4</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    a</div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568940</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] minus :&#123;(</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">3</span></div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.568978</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] intersect :&#123;(</div><div class="line">    <span class="number">1</span></div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.569003</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] <span class="keyword">union</span> :&#123;(</div><div class="line">    b,</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    a,</div><div class="line">    c</div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.569025</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] removeObj :&#123;(</div><div class="line">    b,</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    c</div><div class="line">)&#125;</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">04.569043</span> oc[<span class="number">49686</span>:<span class="number">2060915</span>] removeAll :&#123;(</div><div class="line">)&#125;</div><div class="line">Program ended with exit code: <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/ms2146/article/details/8657011" target="_blank" rel="external">NSSet使用小结 - 来自CNBLOG</a></p>
<h1 id="NSValue-amp-NSNumber-amp-NSData"><a href="#NSValue-amp-NSNumber-amp-NSData" class="headerlink" title="NSValue &amp; NSNumber &amp; NSData"></a>NSValue &amp; NSNumber &amp; NSData</h1><p>由于集合里只能存放对象，不可以存放基本数据类型,所以我们有时候需要讲一些对象比如基本数据类型，结构体等存到NSDictionary NSArray中，我们就需要将这些数据类型或结构体包装成OC对象，以便集合能访问到。常用的用来包装这些类型的有NSNumber NSValue</p>
<h2 id="NSValue"><a href="#NSValue" class="headerlink" title="NSValue"></a>NSValue</h2><p>NSValue可以包装任意一个对象，包括系统自定义的数据结构，结构体等等</p>
<p>将结构体包装成OC对象:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGPoint</span> p = <span class="built_in">CGPointMake</span>(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"><span class="built_in">NSValue</span> *val = [<span class="built_in">NSValue</span> valueWithPoint:p];<span class="comment">//将结构体p包装成NSValue对象</span></div><div class="line"></div><div class="line"><span class="comment">//拆</span></div><div class="line">[value pointValue]</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jianshu.com/p/cb7524567fc5" target="_blank" rel="external">NSNumber 与NSValue -来自简书</a></p>
<h2 id="NSNumber"><a href="#NSNumber" class="headerlink" title="NSNumber"></a>NSNumber</h2><ol>
<li>NSNumber是NSValue的一个子类</li>
<li>NSNumber只能包装基本数据类型，比如int, float,char,BOOL等<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包装</span></div><div class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line"><span class="built_in">NSNumber</span> *num = [<span class="built_in">NSNumber</span> numberWithInt:age];<span class="comment">//将基本数据类型int对象age 包装成NSNumber对象</span></div><div class="line">@(age);<span class="comment">//直接包装</span></div><div class="line"></div><div class="line"><span class="comment">//拆封</span></div><div class="line">［num intValue］;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://www.jianshu.com/p/cb7524567fc5" target="_blank" rel="external">NSNumber 与NSValue -来自简书</a></p>
<h2 id="NSData"><a href="#NSData" class="headerlink" title="NSData"></a>NSData</h2><p><a href="http://www.360doc.com/content/15/0925/09/12282510_501389046.shtml" target="_blank" rel="external">NSData和NSMutableData -来自360doc</a></p>
<p>NSData和NSMutableData存储的是二进制数据，在文件操作，网络，以及核心图形图像中使用较广泛。NSData创建后不可以再修改，NSMutableData可以再次修改。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">1、NSString和NSData之间的转换</div><div class="line">    NSString *string = @“哎我去上市了！";</div><div class="line">    //1、字符串转换成NSData</div><div class="line">    NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">    //2、NSData转换成字符串</div><div class="line">    NSString * inString = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line"></div><div class="line"></div><div class="line"> 2、UIImage和NSData之间的转换</div><div class="line"></div><div class="line"></div><div class="line">    //获取图片路径</div><div class="line">    NSString *imgPath = [[NSBundle mainBundle] pathForResource:@"01loading.png" ofType:nil];</div><div class="line">    NSData *imgData = [NSData dataWithContentsOfFile:imgPath];</div><div class="line">    //直接使用，也可写入文件</div><div class="line">    self.imageView.image = [UIImage imageWithData:imgData];</div><div class="line">     1&gt;.数据库里存储图片 存储图片路径 /images/car@2x.png；</div><div class="line">     2&gt;.如果图片是较小的 可以将UIImage转换成NSData存数据库。</div><div class="line"></div><div class="line"> 3、NSNumber、NSArray、NSDictionary和NSData之间的转换</div><div class="line"> </div><div class="line"></div><div class="line">     数组转NSData是建立在归档的基础上，归档也称为序列化，OC中NSString 对象、NSNumber对象、NSArray对象</div><div class="line">NSDictionary字典对象、NSData 数据对象、这些类要进行数据保存时可以通过NSKeyedArchive 类来实现。</div><div class="line">     Foundtaion框架&lt;Foundation/NSKeyedArchiver.h&gt;提供归档和解归档的方式，也叫做序列化和反序列化的过程。</div><div class="line">     1&gt;.把字典或数组用归档形式直接保存到某一个文件中</div><div class="line">    //初始化一个字典</div><div class="line">    NSDictionary *dict = @&#123;</div><div class="line">                           @"key1":@"hahahah1",</div><div class="line">                           @"key2":@"hahahah2",</div><div class="line">                           @"key3":@"hahahah3",</div><div class="line">                           @"key4":@"hahahah4",</div><div class="line">                           @"key5":@"hahahah5",</div><div class="line">                           @"key6":@"hahahah6",</div><div class="line">                           @"key7":@"hahahah7"&#125;;</div><div class="line">    //归档路径</div><div class="line">    NSString *docPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@"dict.plist"];</div><div class="line">    //归档后直接保存到文件中</div><div class="line">    [NSKeyedArchiver archiveRootObject:dict toFile:docPath];</div><div class="line"></div><div class="line">     2&gt;.把字典或数组先转换成NSData，再保存到某一个文件中</div><div class="line">    //初始化一个字典</div><div class="line">    NSDictionary *dict = @&#123;</div><div class="line">                           @"key1":@"hahahah1",</div><div class="line">                           @"key2":@"hahahah2",</div><div class="line">                           @"key3":@"hahahah3",</div><div class="line">                           @"key4":@"hahahah4",</div><div class="line">                           @"key5":@"hahahah5",</div><div class="line">                           @"key6":@"hahahah6",</div><div class="line">                           @"key7":@"hahahah7"&#125;;</div><div class="line">    //归档路径</div><div class="line">    NSString *docPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@"dict.plist"];</div><div class="line">    //转换成NSData</div><div class="line">    NSData *dictData = [NSKeyedArchiver archivedDataWithRootObject:dict];</div><div class="line">    //保存到文件中</div><div class="line">    NSFileManager *fm = [NSFileManager defaultManager];</div><div class="line">    [fm createFileAtPath:docPath contents:dictData attributes:nil];</div><div class="line">     3&gt;.解归档</div><div class="line">          直接从文件解归档</div><div class="line">    NSDictionary *Undict = [NSKeyedUnarchiver unarchiveObjectWithFile:docPath];</div><div class="line">     将文件转换成NSData，在从NSData解归档</div><div class="line">    NSData *UndictData = [fm contentsAtPath:docPath];</div><div class="line">    NSDictionary *Undict = [NSKeyedUnarchiver unarchiveObjectWithData:UndictData];</div></pre></td></tr></table></figure>
<h1 id="iO操作"><a href="#iO操作" class="headerlink" title="iO操作"></a>iO操作</h1><p><a href="http://blog.csdn.net/swingpyzf/article/details/15185767" target="_blank" rel="external">Objective-C文件和目录操作,IOS文件操作,NSFileManager使用文件操作 -来自CSDN</a><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">Objective-C文件和目录操作,IOS文件操作,<span class="built_in">NSFileManager</span>使用文件操作:</div><div class="line"></div><div class="line">objective-c通过使用<span class="built_in">NSFileManager</span>类来管理和操作文件、目录，<span class="built_in">NSFileManager</span>,文件或目录是使用文件的路径名的唯一标示。每个路径名都是一个<span class="built_in">NSString</span>对象。</div><div class="line"><span class="built_in">NSFileManager</span>对象通过defaultManager方法来创建实例</div><div class="line">列如：</div><div class="line"><span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line"></div><div class="line">删除某个文件</div><div class="line">[fm removeItemAtPath:<span class="string">@"filename"</span> error:<span class="literal">NULL</span>];</div><div class="line">error:参数是一个指向<span class="built_in">NSError</span>对象的指针，能够提供错误的信息。如果指定为<span class="literal">NULL</span>的话就会使用默认的行为，返回值是<span class="built_in">BOOL</span>类型的方法，操作成功返回<span class="literal">YES</span>反之返回<span class="literal">NO</span></div><div class="line"></div><div class="line">判断文件是否被删除</div><div class="line"><span class="keyword">if</span>([fm removeItemAtPath:<span class="string">@"filename"</span> error:<span class="literal">NULL</span>]==<span class="literal">NO</span>)&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"文件删除失败"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSFileManager</span>常用的文件方法：</div><div class="line"></div><div class="line">-(<span class="built_in">NSData</span>*)contentsAtPath:path 从一个文件中读取数据</div><div class="line"></div><div class="line">-(BOLL)createFileAtPath:path contents:(<span class="built_in">NSData</span>*)data attributes: attr 向一个文件写入数据</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)removeItemAtPath:path error:err 删除一个文件</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)moveItemAtPath:from toPath:to error:err 重命名或移动一个文件(to 不能是已存在的)</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)copyItemAtPath:from toPath:to error:err 复制文件(to 不能是已存在的)</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)contentsEqualAtPath:path1 andPath:path2 比较这两个文件的内容</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)fileExistsAtPath:path 测试文件是否存在</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)isReadableFileAtPath:path 测试文件是否存在，并且是否能执行读操作</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)isWritableFileAtPath:path 测试文件是否存在，并且是否能执行写操作</div><div class="line"></div><div class="line">-(<span class="built_in">NSDictionary</span>*)attributesOfItemAtPath:path error:err 获取文件的属性</div><div class="line">属性字典允许你指定要创建的文件的权限，如果将该参数指定为<span class="literal">nil</span>，该文件会被设置为默认权限。</div><div class="line"></div><div class="line"><span class="number">1</span>、通过一段程序来对文件进行操作：</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  main.m</span></div><div class="line"><span class="comment">//  NSFileManager_01</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by swinglife on 13-11-10.</span></div><div class="line"><span class="comment">//  Copyright (c) 2013年 swinglife. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">//文件名</span></div><div class="line">        <span class="built_in">NSString</span> *fileName = <span class="string">@"testFile"</span>;</div><div class="line">        <span class="built_in">NSString</span> *fileContent = <span class="string">@"这是文件内容!!!!"</span>;</div><div class="line">        <span class="built_in">NSData</span> *fileData = [fileContent dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//创建NSFileManager实例</span></div><div class="line">        <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        </div><div class="line">        <span class="comment">//创建文件</span></div><div class="line">        [fm createFileAtPath:fileName contents:fileData attributes:<span class="literal">nil</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//判断文件是否存在 不存在就结束程序</span></div><div class="line">        <span class="keyword">if</span>([fm fileExistsAtPath:fileName]==<span class="literal">NO</span>)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"文件不存在"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//拷贝文件</span></div><div class="line">        <span class="keyword">if</span>([fm copyItemAtPath:fileName toPath:<span class="string">@"newFile"</span> error:<span class="literal">NULL</span>]==<span class="literal">NO</span>)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"复制失败"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//测试两个文件是否相同</span></div><div class="line">        <span class="keyword">if</span>([fm contentsEqualAtPath:fileName andPath:<span class="string">@"newFile"</span>]==<span class="literal">NO</span>)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"文件不相同"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//重命名newFile</span></div><div class="line">        [fm moveItemAtPath:<span class="string">@"newFile"</span> toPath:<span class="string">@"newFile2"</span> error:<span class="literal">NULL</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//获取newFile2的大小</span></div><div class="line">        <span class="built_in">NSDictionary</span> *fileAttr = [fm attributesOfItemAtPath:<span class="string">@"newFile2"</span> error:<span class="literal">NULL</span>];</div><div class="line">        <span class="keyword">if</span>(fileAttr!=<span class="literal">nil</span>)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"文件大小:%llu bytes"</span>,[[fileAttr objectForKey:<span class="built_in">NSFileSize</span>] unsignedLongLongValue]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//删除文件</span></div><div class="line">        [fm removeItemAtPath:fileName error:<span class="literal">NULL</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//显示newFile2的内容</span></div><div class="line">        <span class="built_in">NSString</span> *data = [<span class="built_in">NSString</span> stringWithContentsOfFile:<span class="string">@"newFile2"</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,data);</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSFileManager</span>常用的目录方法</div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span>*)currentDirectoryPath 获取当前目录</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)changeCurrentDirectoryPath:path 更改当前目录</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)copyItemAtPath:from toPath:to error:err 复制目录结构</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)createDirectoryAtPath:path withIntermediateDirectories:(<span class="built_in">BOOL</span>)flag attributes:attr 创建一个新目录</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)fileExistsAtPath:path isDirectory:(<span class="built_in">BOOL</span>*)flag 测试文件是不是目录(flag中存储结果)</div><div class="line"></div><div class="line">-(<span class="built_in">NSArray</span>*)contentsOfDirectoryAtPath:path error:err 列出目录内容</div><div class="line"></div><div class="line">-(<span class="built_in">NSDirectoryEnumerator</span>*)enumeratorAtPath:path 枚举目录的内容</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)removeItemAtPath:path error:err 删除空目录</div><div class="line"></div><div class="line">-(<span class="built_in">BOOL</span>)moveItemAtPath:from toPath:to error:err 重命名或移动一个目录</div><div class="line"></div><div class="line"><span class="number">2</span>、通过一段程序来对目录进行操作：</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  main.m</span></div><div class="line"><span class="comment">//  NSFileManager_02</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by swinglife on 13-11-10.</span></div><div class="line"><span class="comment">//  Copyright (c) 2013年 swinglife. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">//文件目录</span></div><div class="line">        <span class="built_in">NSString</span> *dirName = <span class="string">@"testDir"</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//创建NSFileManager实例</span></div><div class="line">        <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        </div><div class="line">        <span class="comment">//获取当前目录</span></div><div class="line">        <span class="built_in">NSString</span> *path = [fm currentDirectoryPath];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Path:%@"</span>,path);</div><div class="line">        </div><div class="line">        <span class="comment">//创建新目录</span></div><div class="line">        [fm createDirectoryAtPath:dirName withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">NULL</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//重命名新的目录</span></div><div class="line">        [fm moveItemAtPath:dirName toPath:<span class="string">@"newDir"</span> error:<span class="literal">NULL</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//更改当前目录到新的目录</span></div><div class="line">        [fm changeCurrentDirectoryPath:<span class="string">@"newDir"</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//获取当前工作目录</span></div><div class="line">        path = [fm currentDirectoryPath];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Path:%@"</span>,path);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;objective-c不像CSharpe有一个标准库 他的标准有很多,想象一下33年前的编程语言 他都经历了什么，因为早期objective-c的一套工具库是乔老头子出走时Next-step公司写的，后来回苹果之后接着维护了。bjective-c一般常用的就是 Foundation framework。这里稍微介绍一些基础工具类。点到即止 API 太多了，我也没时间花大篇幅翻译。用到哪儿就找哪儿的API。&lt;a href=&quot;https://developer.apple.com&quot;&gt;https://developer.apple.com&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="ExcFoundation framework" scheme="http://vrast.cn/tags/ExcFoundation-framework/"/>
    
  </entry>
  
  <entry>
    <title>Exception in iOS</title>
    <link href="http://vrast.cn/posts/372264d9/"/>
    <id>http://vrast.cn/posts/372264d9/</id>
    <published>2017-03-06T08:59:21.000Z</published>
    <updated>2017-03-06T13:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>每一种语言都有自己的异常处理机制，几乎都类似有一个 Exception 类型，和一个 throw 的动作。</p>
</blockquote>
<a id="more"></a>
<h1 id="使用NSExpection系统"><a href="#使用NSExpection系统" class="headerlink" title="使用NSExpection系统"></a>使用NSExpection系统</h1><p>通过Expection的 exceptionWithName 定义一个异常说明。使用 @throw 抛出这个异常<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSException</span>* ex =[<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"error happen ..."</span> reason:<span class="string">@"haha.."</span> userInfo:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">@try</span> &#123;</div><div class="line">        <span class="keyword">@throw</span> ex;</div><div class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"catch expection %@"</span>,exception.name);</div><div class="line">    &#125; <span class="keyword">@finally</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"finally ..."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>控制台输出如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-06</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">29.790786</span> oc[<span class="number">56297</span>:<span class="number">1862847</span>] catch expection error happen ...</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-06</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">29.791746</span> oc[<span class="number">56297</span>:<span class="number">1862847</span>] finally ...</div><div class="line">Program ended with exit code: <span class="number">0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每一种语言都有自己的异常处理机制，几乎都类似有一个 Exception 类型，和一个 throw 的动作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Exception" scheme="http://vrast.cn/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Extension in iOS</title>
    <link href="http://vrast.cn/posts/f84fd914/"/>
    <id>http://vrast.cn/posts/f84fd914/</id>
    <published>2017-03-06T06:43:32.000Z</published>
    <updated>2017-03-06T08:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>通过扩展类来增强类的扩展性。非常好用的一个增强类功能的方式，可以参考C#的 <code>partial</code> 部分类。<br><a id="more"></a></p>
</blockquote>
<p>下面的例子直接使用扩展类。不修改原类型 <code>Foo</code>的前提下，给  <code>Foo</code> 添加了一个 <code>GetDescription</code> 实例方法。并且访问了 <code>Foo</code> 的 <code>stringOnFoo</code> 属性。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Foo</span> (<span class="title">Print</span>)</span></div><div class="line">-(<span class="built_in">NSString</span>*)GetDescription;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Foo</span> (<span class="title">Print</span>)</span></div><div class="line">-(<span class="built_in">NSString</span>*)GetDescription</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.stringOnFoo) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="keyword">self</span>.stringOnFoo);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.stringOnFoo;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">@""</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    </div><div class="line">    Foo* fo = [[Foo alloc]init];</div><div class="line">    fo.stringOnFoo = <span class="string">@"helloworld"</span>;</div><div class="line">    [fo GetDescription];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展类型的时候记得要加上属于自己的前缀，因为在原类型中可能后续会追加与扩展类的重名的方法签名，导致无法调用，即被扩展类的方法覆盖。</p>
<h1 id="匿名类扩展"><a href="#匿名类扩展" class="headerlink" title="匿名类扩展"></a>匿名类扩展</h1><p>我在这里声明了一个匿名的扩展类型。然后在 Foo.m 中进行了实现。这个接口声明对使用者隐藏了。所以也不用 import 这个匿名头文件，可以直接调用。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Foo</span>()</span></div><div class="line">-(<span class="keyword">void</span>)InvokePrivateMethod;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    </div><div class="line">    Foo* fo = [[Foo alloc]init];</div><div class="line">    [fo InvokePrivateMethod];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过扩展类来增强类的扩展性。非常好用的一个增强类功能的方式，可以参考C#的 &lt;code&gt;partial&lt;/code&gt; 部分类。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Extension" scheme="http://vrast.cn/tags/Extension/"/>
    
  </entry>
  
  <entry>
    <title>Protocal in iOS</title>
    <link href="http://vrast.cn/posts/cdd77a74/"/>
    <id>http://vrast.cn/posts/cdd77a74/</id>
    <published>2017-03-06T02:39:18.000Z</published>
    <updated>2017-03-06T07:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录关于协议在objectivec中的用法以及类比。之前我认为 objectivec 所谓的协议就是C#里的接口。oc里的协议支持继承，支持可选实现，支持嵌套的结构(在A协议使用B协议) 的意思。</p>
</blockquote>
<a id="more"></a>
<h1 id="像c-使用接口那样使用协议"><a href="#像c-使用接口那样使用协议" class="headerlink" title="像c#使用接口那样使用协议"></a>像c#使用接口那样使用协议</h1><p>我创建了一个默认的协议，继承了NSObject的协议，这个协议当然是可选的。不正经的说这里就像是C#的泛型约束(where class)。<br>我在这里标记了 @required ,这也是可选的，因为默认都是 @required。<br>@optional 也是可选的，标记了 @optional 就可以不必在继承此协议的类中使用。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">PrintLine</span></span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line">-(<span class="keyword">void</span>)Log:(<span class="built_in">NSString</span>*) content;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line">-(<span class="keyword">void</span>)SayHello:(<span class="built_in">NSString</span>*) content;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>可以在尖括号里添加多个协议<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Bar.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PrintLine.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Foo</span> : <span class="title">NSObject</span>&lt;<span class="title">PrintLine</span>,<span class="title">NSObject</span>&gt;</span></div><div class="line">&#123;</div><div class="line">    Bar* bar;</div><div class="line">    <span class="built_in">NSString</span>* stringOnFoo;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) Bar* bar;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span>* stringOnFoo;</div><div class="line"></div><div class="line">+(<span class="keyword">void</span>)sayHello:(<span class="built_in">NSString</span>*) name;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)addObserver;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>如果想要知道一个协议是否被正在使用的类实现了，可以使用 <code>confirmsToProtocal</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PrintLine.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">     Foo* fo = [[Foo alloc]init];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([fo conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">PrintLine</span>)]) </span>&#123;</div><div class="line">        [fo Log:<span class="string">@"protocal"</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录关于协议在objectivec中的用法以及类比。之前我认为 objectivec 所谓的协议就是C#里的接口。oc里的协议支持继承，支持可选实现，支持嵌套的结构(在A协议使用B协议) 的意思。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Protocal" scheme="http://vrast.cn/tags/Protocal/"/>
    
  </entry>
  
  <entry>
    <title>English Grammar 1</title>
    <link href="http://vrast.cn/posts/c511b8c1/"/>
    <id>http://vrast.cn/posts/c511b8c1/</id>
    <published>2017-03-04T12:59:48.000Z</published>
    <updated>2017-03-06T07:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为什么要学外语 ？如果不感兴趣的你可以不用学，嘿嘿。 本文是我阅读文法俱乐部(旋元佑老师著作)的笔记，无笔记不读书。记录一些关键的信息，一共二十二个章节，我打算分11个笔记记录我阅读的过程。那么我们就开始了 😁</p>
</blockquote>
<a id="more"></a>
<h1 id="五种常见基本句型"><a href="#五种常见基本句型" class="headerlink" title="五种常见基本句型"></a>五种常见基本句型</h1><p>主            动          宾           补<br>S : Subject   V : Verb   O：Object   C: Complement</p>
<ul>
<li>S + V </li>
<li>S + V + O</li>
<li>S + V + C</li>
<li>S + V + O + O</li>
<li>S + V + O + C</li>
</ul>
<p>一个完整的句子少不了动词。</p>
<h1 id="补语"><a href="#补语" class="headerlink" title="补语"></a>补语</h1><p>要了解补语，只需要研究那些解释为“是”的动词。基本句型分五种，是因为有五种特性不同的动词而造成的。<br>在所有的英语动词中，只有解释为“是”的动词是空的,完全没有意义。也只有这种动词才需要补语来补足句子的意思。</p>
<p>可以独立发生，不牵涉到别的人或物，这种动词就叫“不及物”动词。不及物动词反之。</p>
<p>一个完整的句子必须能够表达完整的意思。这需要两个以上部分来完成：主语和动词。主语，是这个句子叙述的对象。动词，构成叙述的主要内容。</p>
<p>在中文翻译中，动词“是”完全不见了！<br>The cat is lovely.        这只猫很可爱。<br>The soup is too hot.      汤太烫了<br>Taroko Gorge is beautiful.xx峡谷很美。</p>
<p>我们称“是”为连缀动词。跟在这种动词后面的部分，因为代替了动词所扮演的叙述角色，补足了句子使它获得完整的意思，称之为“补语”。</p>
<p>需要补语的动词有哪些：<br>look , seem , appear , sound , feel . taste , turn , prove , become , make<br>因为这些动词都是空字眼，都还不能构成一个有意义的完整句子，所以需要补语来补足。<br>上面这些动词有一个特点 就是都可以用 is 来替代。</p>
<blockquote>
<p>检验 <code>S + V + O + C </code>的技巧，把宾语与补语拿出来中间加一个be动词。看看能不能改成 <code>S + V + C</code></p>
</blockquote>
<p>补语的词类应该是名词和形容词比较合理。因为主语或宾语都是名词，所以补语也可以是名词，经由“是”连接表达同等的关系。</p>
<p>be动词时最纯粹的linking verb，解释为“是”，后面应该有补语才算完整，如果看到be动词后面没有补语，表示这个be动词并不是当作连缀动词使用。如果看到be动词后面没有补语，表示这个be动词并不是当作连缀动词使用，这时候be动词不解释为“是”，而是要解释为“存在”，用在最单纯的“主语+动词(S+V)”的句型中。<br>A is B’s father . 这里be动词必须翻译出来。<br>To be or not to be .that is the question. –哈姆雷特</p>
<h1 id="双宾语句型"><a href="#双宾语句型" class="headerlink" title="双宾语句型"></a>双宾语句型</h1><p>dog 并不对 him 进行补充,him 与 dog是并列的，所以都是宾语。可以把两个宾语拿出来中间加一个be 哈哈。him is a dog 。骂人就不对了。<br>A’s father gave him a dog.</p>
<p>dog是对him的补充说明。所以满足 SVOC<br>A’s father called him a dog. </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么要学外语 ？如果不感兴趣的你可以不用学，嘿嘿。 本文是我阅读文法俱乐部(旋元佑老师著作)的笔记，无笔记不读书。记录一些关键的信息，一共二十二个章节，我打算分11个笔记记录我阅读的过程。那么我们就开始了 😁&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="English" scheme="http://vrast.cn/categories/English/"/>
    
    
      <category term="Grammar" scheme="http://vrast.cn/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>KVO in iOS</title>
    <link href="http://vrast.cn/posts/d0d6deab/"/>
    <id>http://vrast.cn/posts/d0d6deab/</id>
    <published>2017-03-02T11:20:52.000Z</published>
    <updated>2017-03-03T08:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果我更改了一个属性的值，KVO会帮助我们检测这个值的变化，从而通知我们这个值改变了。典型的观察者模式。当然我想起在UNITY3D中，如果检视面板的数值发生改变对应的GameObject发生位移之类的。我曾经实现了一个inspector的编辑器类，值改变直接通知(其实是调用)对应的函数。在iOS这里 一切发生的那么自然。不需要额外实现 这是iOS的特性之一 名曰：KVO 。</p>
</blockquote>
<a id="more"></a>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上一篇 KVC 讲到需要遵循的几条几本规则在 KVO 中同样适用。</p>
<ul>
<li>骆驼命名法,不能数字开头</li>
<li>不能包含空格</li>
<li>键必须是ASCII编码的</li>
<li>使用默认的get/set</li>
</ul>
<p>上一章 只要是针对 object 的元素查询，调用，筛选。本文主要是讲述 KVO 监听(观察者模式) 属性值的变更。</p>
<h1 id="添加／移除-一个监听"><a href="#添加／移除-一个监听" class="headerlink" title="添加／移除 一个监听"></a>添加／移除 一个监听</h1><p>addObserver 函数签名如下</p>
<ul>
<li>addObserver：监听的接受脚本的类</li>
<li>context：    随便传入任何值都可以，最后取出来的时候需要强转</li>
<li>forKeyPath:  选择一个需要监听的属性</li>
<li>options：    可选项</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Bar.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    Foo* foo = [[Foo alloc]init];</div><div class="line">    foo.bar = [[Bar alloc]init];</div><div class="line">    [foo.bar addObserver:foo forKeyPath:<span class="string">@"stringOnBar"</span> options:<span class="number">0</span> context: (<span class="keyword">void</span>*)s];</div><div class="line">    </div><div class="line">    foo.bar.stringOnBar = <span class="string">@"test"</span>;</div><div class="line"></div><div class="line">    [foo.bar removeObserver:foo forKeyPath:<span class="string">@"stringOnBar"</span>];</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-03</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">22.085142</span> oc[<span class="number">52721</span>:<span class="number">6279405</span>] helloworld</div><div class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-03</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">22.085371</span> oc[<span class="number">52721</span>:<span class="number">6279405</span>] Value Changed : stringOnBar</div><div class="line">Program ended with exit code: <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h2 id="关于-options-可选项"><a href="#关于-options-可选项" class="headerlink" title="关于 options 可选项"></a>关于 options 可选项</h2><p>上面的代码中 options 是个可选项，这里不需要处理所以填写0，详细的选项如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSKeyValueObservingOptionNew</span>     把更改之前的值提供给处理方法</div><div class="line"><span class="built_in">NSKeyValueObservingOptionOld</span>     把更改之后的值提供给处理方法</div><div class="line"><span class="built_in">NSKeyValueObservingOptionInitial</span> 把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。</div><div class="line"><span class="built_in">NSKeyValueObservingOptionPrior</span>   分<span class="number">2</span>次调用。在值改变之前和值改变之后。</div><div class="line"><span class="number">0</span>                                不带任何参数进去</div></pre></td></tr></table></figure>
<p>传递给监听的值在接受函数<code> ofObject:(id)object </code>可以获取到。</p>
<h2 id="关于监听脚本"><a href="#关于监听脚本" class="headerlink" title="关于监听脚本"></a>关于监听脚本</h2><p>不用担心监听脚本过于复杂。其实是自动生成的 键入 observeValueForKeyPath 则会生成如下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span> *)change context:(<span class="keyword">void</span> *)context</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span>* content = (__bridge <span class="built_in">NSString</span>*)context;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (content) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,content);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"stringOnBar"</span>]) &#123;</div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"Value Changed : stringOnBar"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"stringOnFoo"</span>]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Value Changed : stringOnFoo"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">super</span> observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然结构体里面的内容是我自己些的 😄</p>
<p>当类 dealloc 的时候需要手动移除监听，否则会报错 … 报错信息如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2017-03-03 15:16:02.560251 oc[52593:6273946] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'An instance 0x1004065e0 of class Bar was deallocated while key value observers were still registered with it. Current observation info: &lt;NSKeyValueObservationInfo 0x100406b90&gt; (</div><div class="line">&lt;NSKeyValueObservance 0x100407e80: Observer: 0x1004045e0, Key path: stringOnBar, Options: &lt;New: NO, Old: NO, Prior: NO&gt; Context: 0x1000030c0, Property: 0x100406ac0&gt;</div><div class="line">)'</div><div class="line">*** First throw call stack:</div><div class="line">(</div><div class="line">	0   CoreFoundation                      0x00007fffa311fe7b __exceptionPreprocess + 171</div><div class="line">	1   libobjc.A.dylib                     0x00007fffb7d09cad objc_exception_throw + 48</div><div class="line">	2   CoreFoundation                      0x00007fffa319e99d +[NSException raise:format:] + 205</div><div class="line">	3   Foundation                          0x00007fffa4aff6e4 NSKVODeallocate + 293</div><div class="line">	4   oc                                  0x000000010000278e -[Foo .cxx_destruct] + 78</div><div class="line">	5   libobjc.A.dylib                     0x00007fffb7d05686 _ZL27object_cxxDestructFromClassP11objc_objectP10objc_class + 127</div><div class="line">	6   libobjc.A.dylib                     0x00007fffb7cfe0c6 objc_destructInstance + 92</div><div class="line">	7   libobjc.A.dylib                     0x00007fffb7cfe059 object_dispose + 22</div><div class="line">	8   oc                                  0x000000010000166e main + 398</div><div class="line">	9   libdyld.dylib                       0x00007fffb85ed255 start + 1</div><div class="line">)</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div><div class="line">(lldb)</div></pre></td></tr></table></figure>
<h1 id="手动KVO"><a href="#手动KVO" class="headerlink" title="手动KVO"></a>手动KVO</h1><p>KVO不是万能的，有时候我们在某些条件下不希望接受到KVO的通知，需要重写如下方法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> HP = <span class="number">10</span>;</div><div class="line">+(<span class="built_in">BOOL</span>)automaticallyNotifiesObserversOfStringOnFoo</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(HP&gt;<span class="number">100</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>这里有一个技巧输入 <code>+(BOOL)automatically</code> 之后自动列出可以重写的几个属性的通知。</code></p>
<p>手动触发KVO也是允许的,下面主要使用到了 <code>willChangeValueForKey ／ didChangeValueForKey</code> 这两个函数。即使禁止了自动通知也可以直接在get函数中触发。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> HP = <span class="number">11</span>;</div><div class="line"></div><div class="line">+(<span class="built_in">BOOL</span>)automaticallyNotifiesObserversOfStringOnFoo</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(HP&gt;<span class="number">100</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setStringOnFoo:(<span class="built_in">NSString</span> *) inValue</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"stringOnFoo"</span>];</div><div class="line">    stringOnFoo = inValue;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"stringOnFoo"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果我更改了一个属性的值，KVO会帮助我们检测这个值的变化，从而通知我们这个值改变了。典型的观察者模式。当然我想起在UNITY3D中，如果检视面板的数值发生改变对应的GameObject发生位移之类的。我曾经实现了一个inspector的编辑器类，值改变直接通知(其实是调用)对应的函数。在iOS这里 一切发生的那么自然。不需要额外实现 这是iOS的特性之一 名曰：KVO 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="KVO" scheme="http://vrast.cn/tags/KVO/"/>
    
  </entry>
  
  <entry>
    <title>KVC in iOS</title>
    <link href="http://vrast.cn/posts/8779cbe4/"/>
    <id>http://vrast.cn/posts/8779cbe4/</id>
    <published>2017-03-02T10:24:06.000Z</published>
    <updated>2017-03-02T12:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在 C# 里我们常用 .net reflect 类库配合typeof/getType来反射设置函数与字段等等。在iOS里也有这样的功能，比C#的门槛低的多。只要你合乎规范的定义函数与属性字段，就能方便的使用。</p>
</blockquote>
<a id="more"></a>
<h1 id="使用KVC"><a href="#使用KVC" class="headerlink" title="使用KVC"></a>使用KVC</h1><p>下面的函数 我将接通过KVC的接口 setValue forKey &amp;&amp; setValue forKeyPath ，来设置属性 与 调用方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Bar.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    Foo* foo = [[Foo alloc]init];</div><div class="line">    foo.bar = [[Bar alloc]init];</div><div class="line"></div><div class="line">    </div><div class="line">    [foo setValue:<span class="string">@"blah blah"</span> forKey:<span class="string">@"stringOnFoo"</span>];</div><div class="line">    [foo setValue:<span class="string">@"testforkeyle"</span> forKeyPath:<span class="string">@"bar.stringOnBar"</span>];</div><div class="line">    [foo valueForKeyPath:<span class="string">@"Log"</span>];<span class="comment">//Just Test log 直接访问了实例方法</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,foo.bar.stringOnBar); <span class="comment">//testforkeyle</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,foo.stringOnFoo); <span class="comment">//blah blah</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用KVC在便利数组上尤为方便，下面是使用@sum函数直接给数组的price属性求和。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[foo.bar.array valueForKeyPath:<span class="string">@"@sum.price"</span>];</div></pre></td></tr></table></figure>
<h1 id="KVC的其他函数"><a href="#KVC的其他函数" class="headerlink" title="KVC的其他函数"></a>KVC的其他函数</h1><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对于KVC的一些命令 ，如果要操作 NSArray 之类的字典可以方便的调用。类似C#的Linq for Object</span></div><div class="line">@avg</div><div class="line">@count</div><div class="line">@max</div><div class="line">@min</div><div class="line">@sum</div><div class="line">@unionOfArrays/@distinctUnionOfArrays   <span class="comment">//返回一个包含所有数组的数组 / 返回一个不重复的集合元素</span></div><div class="line">@unionOfSets/@distinctUnionOfSets       <span class="comment">//返回一个包含所有集合的集合 / 返回一个不重复的集合元素</span></div><div class="line">@unionOfObjects/@distinctUnionOfObjects <span class="comment">//返回一个包含所有元素的数组 / 返回一个不重复元素的数组</span></div></pre></td></tr></table></figure>
<h1 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h1><ol>
<li>骆驼命名法,不能数字开头</li>
<li>不能包含空格</li>
<li>键必须是ASCII编码的</li>
<li>使用默认的get/set</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 C# 里我们常用 .net reflect 类库配合typeof/getType来反射设置函数与字段等等。在iOS里也有这样的功能，比C#的门槛低的多。只要你合乎规范的定义函数与属性字段，就能方便的使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="KVC" scheme="http://vrast.cn/tags/KVC/"/>
    
  </entry>
  
  <entry>
    <title>AI Design 1</title>
    <link href="http://vrast.cn/posts/d1301104/"/>
    <id>http://vrast.cn/posts/d1301104/</id>
    <published>2017-03-01T14:35:29.000Z</published>
    <updated>2017-03-24T08:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我阅读 UNITY5.X AI PROGRAMMING COOKBOOK 的笔记。有好又坏 请酌情阅读，有不当之处还请指出。<br><a id="more"></a></p>
<p>本章主要概述让 AI 更智能的移动。对应到原书也就是第一章节。</p>
<h1 id="使AI移动"><a href="#使AI移动" class="headerlink" title="使AI移动"></a>使AI移动</h1><p>这三个类的工作如下。</p>
<ol>
<li>Agent负责 计算当前帧的移动与下一帧的移动。</li>
<li>AgentBehaviour负责抽象Steering的计算过程。</li>
<li>Steering包含了Agent需要计算的数据。</li>
</ol>
<p>每当需要扩展一个新的移动行为，则只需要增加一个 AgentBehaviour 类型的派生即可。</p>
<h2 id="脚本时序"><a href="#脚本时序" class="headerlink" title="脚本时序"></a>脚本时序</h2><p><img src="/uploads/QQ20170302-223554@2x.jpg" alt="脚本调用频率"><br>所有的脚本按照优先级调用。例如 检测与执行AI的移动的Agent脚本调用最频繁。其他由 AgentBehaviour 派生的脚本次之。</p>
<h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><blockquote>
<p>这里详细介绍了利用 <code>Agent/AgentBehaviour/Steering</code> 三个类进行基础的 AI 结构搭建。当然代码里有一些 Bad Smell ,比如 Steering 类的 new ，每个行为返回一个Steering毫无例外的都会new一次。当然这完全是可以规避的，这里并不作代码优化的讨论 所以只是提到。</p>
</blockquote>
<h3 id="Agent-代理"><a href="#Agent-代理" class="headerlink" title="Agent 代理"></a>Agent 代理</h3><p>Agent 通过 Update 与 LateUpdate 来计算当前帧与下一帧的移动速度角度。<br>其中实际给 GameObject 做位移的代码就只有两句 Translate／Rotate 。</p>
<ul>
<li>Update ：执行当前帧的物体的移动与角度</li>
<li>LateUpdate ：计算下一帧的物体的移动与角度数值</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Agent</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxSpeed;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxAccel;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> orientation;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> rotation;</div><div class="line">    <span class="keyword">public</span> Vector3 velocity;</div><div class="line">    <span class="keyword">protected</span> Steering steering;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        velocity = Vector3.zero;</div><div class="line">        steering = <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetSteering</span> (<span class="params">Steering steering</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.steering = steering;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Vector3 displacement = velocity * Time.deltaTime;</div><div class="line">        orientation += rotation * Time.deltaTime;</div><div class="line">        <span class="comment">// we need to limit the orientation values</span></div><div class="line">        <span class="comment">// to be in the range (0 – 360)</span></div><div class="line">        <span class="keyword">if</span> (orientation &lt; <span class="number">0.0</span>f)</div><div class="line">            orientation += <span class="number">360.0</span>f;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">orientation &gt; <span class="number">360.0</span>f</span>)</span></div><div class="line">            orientation -= <span class="number">360.0</span>f;</div><div class="line">        transform.Translate(displacement, Space.World);</div><div class="line">        transform.rotation = <span class="keyword">new</span> Quaternion();</div><div class="line">        transform.Rotate(Vector3.up, orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">LateUpdate</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        velocity += steering.linear * Time.deltaTime;</div><div class="line">        rotation += steering.angular * Time.deltaTime;</div><div class="line">        <span class="keyword">if</span> (velocity.magnitude &gt; maxSpeed)</div><div class="line">        &#123;</div><div class="line">            velocity.Normalize();</div><div class="line">            velocity = velocity * maxSpeed;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (steering.angular == <span class="number">0.0</span>f)</div><div class="line">        &#123;</div><div class="line">            rotation = <span class="number">0.0</span>f;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (steering.linear.sqrMagnitude == <span class="number">0.0</span>f)</div><div class="line">        &#123;</div><div class="line">            velocity = Vector3.zero;</div><div class="line">        &#125;</div><div class="line">        steering = <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Steering-数据载体"><a href="#Steering-数据载体" class="headerlink" title="Steering 数据载体"></a>Steering 数据载体</h3><p>Steering 承载了代理(Agent)需要计算的原始数据。数据的表现直接会影响到计算的<code>AgentBehaviour / Agent </code> 的计算结果。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Steering</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> angular;</div><div class="line">    <span class="keyword">public</span> Vector3 linear;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Steering</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        angular = <span class="number">0.0</span>f;</div><div class="line">        linear = <span class="keyword">new</span> Vector3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AgentBehaviour-代理行为"><a href="#AgentBehaviour-代理行为" class="headerlink" title="AgentBehaviour 代理行为"></a>AgentBehaviour 代理行为</h3><p>由于 gentBehaviour 是Agent的数据提供方。所以他主要的职责就是派生与扩展。<br>新的类型将会继承自 AgentBehaviour 并且会重写 GetSteering() 函数来丰富表现。<br>接下来都是介绍 AgentBehaviour 脚本派生的行为。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AgentBehaviour</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> GameObject target;</div><div class="line">    <span class="keyword">protected</span> Agent agent;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        agent = gameObject.GetComponent&lt;Agent&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        agent.SetSteering(GetSteering());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Steering <span class="title">GetSteering</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="更加智能的移动"><a href="#更加智能的移动" class="headerlink" title="更加智能的移动"></a>更加智能的移动</h2><h3 id="Seek-搜索"><a href="#Seek-搜索" class="headerlink" title="Seek 搜索"></a>Seek 搜索</h3><p>上面说到 AgentBehaviour 代理行为，是可以派生的。我们可以直接重写其 GetSteering 函数，来增加不同的表现。<br>这里干了两件事</p>
<ol>
<li>获取朝向目标的向量</li>
<li>目标朝向目标的向量归一化，乘以当前速度。也就是获得了 朝向目标的速度的向量。</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Seek</span> : <span class="title">AgentBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Steering steering = <span class="keyword">new</span> Steering();</div><div class="line">        steering.linear = target.transform.position - transform.position;</div><div class="line"></div><div class="line">        steering.linear.Normalize();</div><div class="line">        steering.linear = steering.linear * agent.maxAccel;</div><div class="line">        <span class="keyword">return</span> steering;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Purse-追逐"><a href="#Purse-追逐" class="headerlink" title="Purse 追逐"></a>Purse 追逐</h3><p>在 GetSteering() 函数中有这样的逻辑存在。<br>追逐的目标 targetAux ， 所以需要预先计算(预判单位时间内) targetAux 可能到达的位置(这里用target表示)。maxPrediction变量在这里用来控制预判的时间。<br>我们知道 任何数值都需要规范化的 例如常用的 Math.Clamp 函数。我们应该尽量将 maxPrediction 值控制在正常范围之内。</p>
<p>通过 <code> speed &lt;= distance / maxPrediction </code></p>
<ul>
<li>speed ：为当前追踪的物体真实速度。</li>
<li>distance ：为当前追踪的物体一共走过的距离。</li>
<li>maxPrediction ：预设的预测时间。</li>
</ul>
<blockquote>
<p>这样可以大胆猜测 为当前追踪的物体 正处于匀速 或者 加速中</p>
</blockquote>
<p><code>distance / maxPrediction </code>我们最终得到的 速度 就是物体的 预测速度。我们拿着 预测速度 与 speed 做一个比较。如果预测的速度小于真实速度，那么这个预测值出乎意料的错误。我们需要重新计算一个更真实合理的预测值。<br><code>prediction = distance / speed; </code> 这里计算了一个中规中矩的预测值。<br>最终通过 <code>targetAgent.velocity * prediction </code>获取 预测时间 内运动的距离。</p>
<blockquote>
<p>对于刚才的猜测结果，有一种条件下是有问题的，那就是当 当前追踪的物体 突然静止／或者本身就是静止的。由于脚本执行的时序问题，追逐到物体的时候会直接穿插过去(追过头了)，然后接着反复运动。这里就要用到 Arraying 脚本了，后文就会介绍到。</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pursue</span> : <span class="title">Seek</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxPrediction;</div><div class="line">    <span class="keyword">private</span> GameObject targetAux;</div><div class="line">    <span class="keyword">private</span> Agent targetAgent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           <span class="keyword">base</span>.Awake();</div><div class="line">           targetAgent = target.GetComponent&lt;Agent&gt;();</div><div class="line">           targetAux = target;</div><div class="line">           target = <span class="keyword">new</span> GameObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           Destroy(targetAux);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           Vector3 direction = targetAux.transform.position - transform.position;</div><div class="line">           <span class="keyword">float</span> distance = direction.magnitude;</div><div class="line">           <span class="keyword">float</span> speed = agent.velocity.magnitude;</div><div class="line">           <span class="keyword">float</span> prediction;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (speed &lt;= distance / maxPrediction)</div><div class="line">               prediction = maxPrediction;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               prediction = distance / speed;</div><div class="line">           target.transform.position = targetAux.transform.position;</div><div class="line">           target.transform.position += targetAgent.velocity * prediction;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">base</span>.GetSteering();</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Flee-逃离"><a href="#Flee-逃离" class="headerlink" title="Flee 逃离"></a>Flee 逃离</h3><p>顾名思义 Flee 肯定和 Seek 相反。事实也正是如此，获取了与目标相反方向的速度的向量。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Flee</span> : <span class="title">AgentBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Steering steering = <span class="keyword">new</span> Steering();</div><div class="line">        steering.linear = transform.position - target.transform.position;</div><div class="line">        steering.linear.Normalize();</div><div class="line">        steering.linear = steering.linear * agent.maxAccel;</div><div class="line">        <span class="keyword">return</span> steering;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Evade-规避"><a href="#Evade-规避" class="headerlink" title="Evade 规避"></a>Evade 规避</h3><p>规避(Evade) 代码与 Pursue 代码一致。在 Flee/Seek 层，二者做了区分。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Evade</span> : <span class="title">Flee</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxPrediction;</div><div class="line">    <span class="keyword">private</span> GameObject targetAux;</div><div class="line">    <span class="keyword">private</span> Agent targetAgent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">base</span>.Awake();</div><div class="line">        targetAgent = target.GetComponent&lt;Agent&gt;();</div><div class="line">        targetAux = target;</div><div class="line">        target = <span class="keyword">new</span> GameObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Vector3 direction = targetAux.transform.position - transform.position;</div><div class="line">        <span class="keyword">float</span> distance = direction.magnitude;</div><div class="line">        <span class="keyword">float</span> speed = agent.velocity.magnitude;</div><div class="line">        <span class="keyword">float</span> prediction;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (speed &lt;= distance / maxPrediction)</div><div class="line">            prediction = maxPrediction;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            prediction = distance / speed;</div><div class="line">        target.transform.position = targetAux.transform.position;</div><div class="line">        target.transform.position += targetAgent.velocity * prediction;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.GetSteering();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Destroy(targetAux);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>本篇到此结束，本文主要介绍了 AI 行为的基础结构 与 其何如派生出来行为。下一篇会着重介绍派生出的其他行为与详细算法(实现)。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列是我阅读 UNITY5.X AI PROGRAMMING COOKBOOK 的笔记。有好又坏 请酌情阅读，有不当之处还请指出。&lt;br&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="AI" scheme="http://vrast.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Properties in iOS</title>
    <link href="http://vrast.cn/posts/f9b2637/"/>
    <id>http://vrast.cn/posts/f9b2637/</id>
    <published>2017-02-28T07:40:00.000Z</published>
    <updated>2017-02-28T11:05:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>翻译一篇iOS平台OC语法中的Properties用法及说明 <a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">原文地址</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><p>一个Object’s的属性可以让其他的Objects来更改它的状态。但是，一个好的面向对对象程序设计中，不可以直接的访问到这个object的状态。作为代替。访问方法(getter &amp; setters)用来抽象与底层的数据交互。</p>
<p><img src="/uploads/accessor-methods.jpg" alt="通过属性操作的方法交互"></p>
<p>@property 命令的目标是通过生成操作函数来更简单的访问。它允许你在语义级别指定公共属性的行为，并且会为你处理实现细节。<br>该模块概括了允许您更改getter和setter行为的各种属性。这些属性中的一些确定属性如何处理其底层内存。所以这个模块也可以作为一个介绍内存管理的实例在Objective-C。 有关更详细的讨论，<a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">请参阅内存管理</a>。</p>
<h1 id="property-命令"><a href="#property-命令" class="headerlink" title="@property 命令"></a>@property 命令</h1><p>首先，让我们看看当我们使用@property指令时发生了什么。思考接下来的 car class的接口与相关实现。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> running;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></div><div class="line"></div><div class="line"><span class="keyword">@synthesize</span> running = _running;    <span class="comment">// Optional for Xcode 4.4+</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>编译器会生成 running 属性的 getter &amp; setter 方法。他默认的命名惯例是使用属性本身(名字)作为getter，setter使用set作为前缀并且使用下划线在这个实例变量上。就像是这样：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)running &#123;</div><div class="line">    <span class="keyword">return</span> _running;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setRunning:(<span class="built_in">BOOL</span>)newValue &#123;</div><div class="line">    _running = newValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用 @property 命令声明属性之后，你可以调用这些方法，就像它已经包含在你的接口与实现类中一样。你可以在 Car.m 重写它们 支持制定 getter/setters.但是他将要强制使用 @synthesize 命令。然而，自从 @property 属性使你在抽象级别上做这些，你很少需要定制访问接口。<br>通过点表示法访问的属性被转换为幕后的上述访问器方法，因此，当您从其中读取值时，下面的 honda.running代码实际上调用setRunning：当你为它赋值和运行时从它读取：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        honda.running = <span class="literal">YES</span>;                <span class="comment">// [honda setRunning:YES]</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, honda.running);        <span class="comment">// [honda running]</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要更改生成的访问器的行为，可以在@property 指令后面的括号中指定属性。 本模块的其余部分介绍可用的属性。</p>
<h1 id="getter-与-setter-属性"><a href="#getter-与-setter-属性" class="headerlink" title="getter= 与 setter= 属性"></a>getter= 与 setter= 属性</h1><p>如果你不喜欢 @property 的命名惯例，你可以使用 getter= and setter= 属性，更改 getter/setter 的方法名。一个常见的用例是 Boolean 属性，它的getter常用前缀是 is。尝试在下面的 Car.h 中更改属性的声明。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isRunning) <span class="built_in">BOOL</span> running;</div></pre></td></tr></table></figure>
<p>现在这个生成的访问器叫 isRunning 与 setRunning. 注意这个访问器 他的公开属性仍旧叫 running 。这是你为什么最好要使用点语法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Car *honda = [[Car alloc] init];</div><div class="line">honda.running = <span class="literal">YES</span>;                <span class="comment">// [honda setRunning:YES]</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, honda.running);        <span class="comment">// [honda isRunning]</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [honda running]);      <span class="comment">// Error: method no longer exists</span></div></pre></td></tr></table></figure>
<p>这些都是只使用一个参数的属性（存取器方法名称） - 其他的都是布尔标志。</p>
<h1 id="The-readonly-Attribute"><a href="#The-readonly-Attribute" class="headerlink" title="The readonly Attribute"></a>The readonly Attribute</h1><p>readonly属性是最简单去设置一个属性的只读。他删除了 setter 方法，阻止点语法进行分配。但是 getter 方法不受影响。在这个例子里面。我们像下面这样更改 Car 的接口。注意 你可以使用多个属性 用逗号 分隔。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isRunning, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> running;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startEngine;</div><div class="line">- (<span class="keyword">void</span>)stopEngine;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>而不是让其他对象更改running属性，我们将通过startEngine和stopEngine方法在内部进行设置。 相应的实现可以在下面找到。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startEngine &#123;</div><div class="line">    _running = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)stopEngine &#123;</div><div class="line">    _running = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>上面直到这一点，属性真的只是方便的快捷方式，让我们避免编写样板getter和setter方法。 剩余的属性不会出现这种情况，这会显着改变属性的行为。 它们也只适用于存储Objective-C对象（与原始C数据类型相反）的属性。</p>
<h1 id="The-nonatomic-Attribute"><a href="#The-nonatomic-Attribute" class="headerlink" title="The nonatomic Attribute"></a>The nonatomic Attribute</h1><p>原子性与属性在线程环境中的行为有关。当你在多于一个线程的情况下可能出现同时读写一个属性。这意味着读写可能被另外一个操作打断。可能损坏数据。<br>原子属性锁定底层对象以防止这种情况发生(google翻译这里)，以防止发生这种情况，保证get或set操作使用完整的值。 然而，重要的是要理解这只是线程安全的一个方面 - 使用原子属性并不一定意味着你的代码是线程安全的。<br>使用 @property 声明的属性在默认情况下是原子的，这会产生一些开销。 所以，如果你不是在多线程环境（或者你正在实现自己的线程安全），你会想要覆盖这个行为与 nonatomic 属性，如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *model;</div></pre></td></tr></table></figure>
<p>还有一个小的，实际的警告与原子属性。 原子属性的访问器必须是生成的或用户定义的。 只有非原子属性允许您将合成存取器与自定义存取器混合和匹配。 你可以通过从上面的代码中删除非原子并在Car.m中添加自定义getter来看到这一点。</p>
<h1 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h1><p>在任何OOP语言中，对象驻留在计算机的内存中，并且尤其是在移动设备上 - 这是一种稀缺的资源。 内存管理系统的目标是通过以有效的方式创建和销毁对象来确保程序不占用任何更多的空间。</p>
<p>许多语言通过垃圾回收实现这一点，但Objective-C使用一种更有效的替代方法称为对象所有权。 当你开始与一个对象进行交互时，你会说它拥有该对象，这意味着只要你使用它就保证存在。 当你完成它，你放弃所有权，如果对象没有其他所有者，操作系统销毁对象和释放底层内存。</p>
<p><img src="/uploads/object-ownership.jpg" alt="所有关系"></p>
<p>随着 <a href="http://rypress.com/tutorials/objective-c/memory-management.html#automatic-reference-counting" target="_blank" rel="external">自动引用计数</a> 的出现，编译器自动管理所有对象所有权。 在大多数情况下，这意味着你永远不会担心内存管理系统如何工作。 但是，你必须了解@property的strong，week和copy属性，因为他们告诉编译器应该有什么样的关系对象。</p>
<h1 id="The-strong-Attribute"><a href="#The-strong-Attribute" class="headerlink" title="The strong Attribute"></a>The strong Attribute</h1><p>strong属性会为分配给属性的任何对象创建一个拥有关系。 这是所有对象属性的隐式行为，这是一个安全的默认值，因为它确保值存在，只要它被分配给属性。<br>让我们通过创建另一个名为Person的类来看看这是如何工作的。 它的接口只是声明一个name属性：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>实现如下所示。 它使用由@property生成的默认访问器。 它还重写了NSObject的description方法，该方法返回对象的字符串表示形式。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>接下来，让我们添加一个Person属性到Car类。 为Car.h更改为以下内容。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *model;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Person *driver;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>然后，思考main.m的以下迭代：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Person *john = [[Person alloc] init];</div><div class="line">        john.name = <span class="string">@"John"</span>;</div><div class="line">        </div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        honda.model = <span class="string">@"Honda Civic"</span>;</div><div class="line">        honda.driver = john;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ is driving the %@"</span>, honda.driver, honda.model);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 driver 是一个 strong 关联，honda对象拥有john的所有权。 这确保它将有效，只要 honda 需要它。</p>
<h1 id="The-weak-Attribute"><a href="#The-weak-Attribute" class="headerlink" title="The weak Attribute"></a>The weak Attribute</h1><p>大多数时候，strong属性直观地是你想要的对象属性。 然而，如果我们需要一个从 driver 到他驾驶的Car对象的引用，强引用会产生问题。 首先，让我们为Person.h添加一个car属性：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Car</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Car *car;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>@class Car行是Car类的提前声明。 这就像告诉编译器，“相信我，Car类存在，所以不要尝试找到它现在。”我们必须这样做，而不是我们通常的#import语句，因为Car还导入 Person.h，我们将 有无限循环的导入。 （编译器不喜欢无尽循环。）接下来，在honda.driver分配之后，将下面的行添加到main.m：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">honda.driver = john;</div><div class="line">john.car = honda;       <span class="comment">// Add this line</span></div></pre></td></tr></table></figure>
<p>现在我们有一个honda到john的所属关系以及另外一个所有关系即john到honda。所以内存管理系统不能销毁它们，如果它们长久的互相需要。</p>
<p><img src="/uploads/retain-cycle.jpg" alt="在Car 与 Person之间循环依赖"></p>
<p>它称之为 循环依赖 ，这就是内存泄漏的出处。内存泄漏是不好的。幸运的是，很容易修复这个问题，只需要在属性中添加 weak reference 。在 Person.h ，修改 car 的声明如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) Car *car;</div></pre></td></tr></table></figure>
<p>weak 属性给 car 创建了一个无所有者的关系。它允许 john 持有一个 honda 的引用 在循环依赖期间。但是，这也意味着 john还持有引用的时候 honda 可能被销毁。如果发生了，weak 属性将会方便的将 car 设置为 nil 来避免 dangling（悬挂指针） 指针。</p>
<p>这里我说明一下悬挂指针，文中没有详细说明：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">如果指针在被释放后，仍然引用原来的内存，就叫做悬挂指针。该指针不指向任何有效的对象。有时称为过早释放。</div><div class="line"></div><div class="line">使用悬挂指针能导致几种不同的问题，包括：</div><div class="line"></div><div class="line">不可预知的行为，如果访问内存</div><div class="line">分段错误，当内存不再是可访问</div><div class="line">潜在的安全风险</div><div class="line">如下情况将产生这些错误：</div><div class="line">释放后访问内存</div><div class="line">一个指针返回到前一个函数调用的自动变量</div></pre></td></tr></table></figure></p>
<p><img src="/uploads/weak-reference.jpg" alt="Person对car持有若引用"></p>
<p>弱属性的常见用例是父子数据结构。 按照惯例，父对象应该使用它的子保持一个强引用，并且子应该存储一个弱引用返回父对象。 弱引用也是代理设计模式的固有部分。要去除的一点是，两个对象应该永远不会有强烈的对方引用。 弱属性使得可以维持周期性关系而不创建保留周期。</p>
<h1 id="The-copy-Attribute"><a href="#The-copy-Attribute" class="headerlink" title="The copy Attribute"></a>The copy Attribute</h1><p>copy属性是strong的替代。 它不是获取现有对象的所有权，而是创建一个分配给该属性的副本，然后拥有该属性的所有权。 只有符合NSCopying协议的对象才能使用此属性。</p>
<p>表示值（与连接或关系相反）的属性是复制的良好候选。 例如，开发人员通常复制NSString属性，而不是强烈引用它们：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *model;</div></pre></td></tr></table></figure>
<p>这里还是看原文吧。<br>Now, Car will store a brand new instance of whatever value we assign to model. If you’re working with mutable values, this has the added perk of freezing the object at whatever value it had when it was assigned. This is demonstrated below:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        <span class="built_in">NSMutableString</span> *model = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"Honda Civic"</span>];</div><div class="line">        honda.model = model;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, honda.model);</div><div class="line">        [model setString:<span class="string">@"Nissa Versa"</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, honda.model);            <span class="comment">// Still "Honda Civic"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NSMutableString是NSString的子类，可以直接编辑。 如果model属性没有创建原始实例的副本，我们将能够在第二个NSLog()输出中看到更改的字符串（Nissan Versa）。</p>
<h1 id="Other-Attributes"><a href="#Other-Attributes" class="headerlink" title="Other Attributes"></a>Other Attributes</h1><p>上面的 @property 属性是现代 Objective-C应用程序（iOS 5+）所需要的，但是你可能会在旧的库或文档中遇到其他一些属性。</p>
<h1 id="The-retain-Attribute"><a href="#The-retain-Attribute" class="headerlink" title="The retain Attribute"></a>The retain Attribute</h1><p>retain属性是strong的手动保留版本，它具有完全相同的效果：声明所分配的值的所有权。 您不应在自动引用计数环境中使用此引用。</p>
<h1 id="The-unsafe-unretained-Attribute"><a href="#The-unsafe-unretained-Attribute" class="headerlink" title="The unsafe_unretained Attribute"></a>The unsafe_unretained Attribute</h1><p>具有unsafe_unretained属性的属性的行为类似于weak属性，但是如果引用的对象被销毁，它们不会自动将其值设置为nil。 你应该需要使用unsafe_unretained的唯一原因是使你的类与不支持weak属性的代码兼容。</p>
<h1 id="The-assign-Attribute"><a href="#The-assign-Attribute" class="headerlink" title="The assign Attribute"></a>The assign Attribute</h1><p>具有unsafe_unretained属性的属性的行为类似于weak属性，但是如果引用的对象被销毁，它们不会自动将其值设置为nil。 你应该需要使用unsafe_unretained的唯一原因是使你的类与不支持weak属性的代码兼容。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>此模块介绍了所有的@property属性选择，我们希望你感觉相对舒服的修改生成的访问器方法的行为。 请记住，所有这些属性的目标是帮助您通过让编译器自动确定其表示方式来关注需要记录的数据。 它们总结如下。</p>
<p>Attribute   Description<br>getter= Use a custom name for the getter method.<br>setter= Use a custom name for the setter method.<br>readonly    Don’t synthesize a setter method.<br>nonatomic   Don’t guarantee the integrity of accessors in a multi-threaded environment. This is more efficient than the default atomic behavior.<br>strong  Create an owning relationship between the property and the assigned value. This is the default for object properties.<br>weak    Create a non-owning relationship between the property and the assigned value. Use this to prevent retain cycles.<br>copy    Create a copy of the assigned value instead of referencing the existing instance.<br>Now that we’ve got properties out of the way, we can take an in-depth look at the other half of Objective-C classes: methods. We’ll explore everything from the quirks behind their naming conventions to dynamic method calls.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译一篇iOS平台OC语法中的Properties用法及说明 &lt;a href=&quot;http://rypress.com/tutorials/objective-c/properties&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://vrast.cn/tags/Objective-C/"/>
    
  </entry>
  
</feed>
