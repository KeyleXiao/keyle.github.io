<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazybones Kill PLAN</title>
  <subtitle>In me the tiger sniffs the rose</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vrast.cn/"/>
  <updated>2019-05-21T08:52:48.096Z</updated>
  <id>http://vrast.cn/</id>
  
  <author>
    <name>keyle xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http下载与ftp下载md5值不一致</title>
    <link href="http://vrast.cn/posts/d2e8872a/"/>
    <id>http://vrast.cn/posts/d2e8872a/</id>
    <published>2019-05-21T08:20:34.000Z</published>
    <updated>2019-05-21T08:52:48.096Z</updated>
    
    <content type="html"><![CDATA[<p>这问题花了四个小时找答案，值得记录下。起因是这样的，我用工具上传一份文件(二进制)到ftp，通过http下载的时候md5值与我原始文件不一致。通过文件比对发现多了17字节。推测是编码问题，随后查找事情的起因。经过同事提醒是否是文件传输过程中造成的。遂检查Filezillia的传输设置。<br>修改为二进制上传，问题解决。</p>
<p><img src="/uploads/WX20190521-163850.png" alt="修改filezillia文件传设置"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这问题花了四个小时找答案，值得记录下。起因是这样的，我用工具上传一份文件(二进制)到ftp，通过http下载的时候md5值与我原始文件不一致。通过文件比对发现多了17字节。推测是编码问题，随后查找事情的起因。经过同事提醒是否是文件传输过程中造成的。遂检查Filezillia
    
    </summary>
    
      <category term="ftp" scheme="http://vrast.cn/categories/ftp/"/>
    
    
      <category term="download" scheme="http://vrast.cn/tags/download/"/>
    
  </entry>
  
  <entry>
    <title>使用ternimal 或 powershell 计算文件md5</title>
    <link href="http://vrast.cn/posts/2a8fe98b/"/>
    <id>http://vrast.cn/posts/2a8fe98b/</id>
    <published>2019-05-14T07:29:39.000Z</published>
    <updated>2019-05-14T07:35:07.484Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近经常会需要临时计算某个文件md5的需求。然后找了下相关命令在此记录下。</p>
</blockquote>
<p>MAC:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md5 you-file-full-path</div></pre></td></tr></table></figure>
<p>powershell</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span>-filehash you-file-full-path -algorithm md5</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近经常会需要临时计算某个文件md5的需求。然后找了下相关命令在此记录下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MAC:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
      <category term="teranimal" scheme="http://vrast.cn/categories/teranimal/"/>
    
    
      <category term="md5" scheme="http://vrast.cn/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio AVD FAQ</title>
    <link href="http://vrast.cn/posts/55eaddde/"/>
    <id>http://vrast.cn/posts/55eaddde/</id>
    <published>2019-05-09T13:19:20.000Z</published>
    <updated>2019-05-09T13:39:38.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇记录一些在Profile APK过程中可能遇到的一些问题。当然我也查了好一会儿。在这里做一下记录。</p>
</blockquote>
<h3 id="Device-File-Explore"><a href="#Device-File-Explore" class="headerlink" title="Device File Explore"></a>Device File Explore</h3><p><img src="/uploads/WX20190509-212231@2x.png" alt="使用 Device File Explore 可以看到当前虚拟机内文件的情况, 在View/TopWindows/Device File Explore你可以找到这个面板的入口。"></p>
<p><img src="/uploads/WX20190509-212133@2x.png" alt="这里有一个点需要注意，你如果使用了含有GooglePlay框架的包，是不可以访问系统保护目录的。所以这里需要安装Google API的包。"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇记录一些在Profile APK过程中可能遇到的一些问题。当然我也查了好一会儿。在这里做一下记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Device-File-Explore&quot;&gt;&lt;a href=&quot;#Device-File-Exp
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://vrast.cn/categories/AndroidStudio/"/>
    
    
      <category term="AVD" scheme="http://vrast.cn/tags/AVD/"/>
    
  </entry>
  
  <entry>
    <title>JIT &amp;&amp; TOC</title>
    <link href="http://vrast.cn/posts/cd9ab0aa/"/>
    <id>http://vrast.cn/posts/cd9ab0aa/</id>
    <published>2019-04-30T04:48:53.000Z</published>
    <updated>2019-05-06T08:26:41.341Z</updated>
    
    <content type="html"><![CDATA[<p>最近受一位蓝朋友影响看了一些项管相关的书，这里做一下记录。记录的内容不多科普文。摘录内容源于wiki。</p>
<a id="more"></a>
<h1 id="JIT-TOC"><a href="#JIT-TOC" class="headerlink" title="JIT   TOC"></a>JIT   TOC</h1><p>了解下 JIT 当然这不是C#或者Java里的JIT .</p>
<p><img src="/uploads/WX20190506-102330.png" alt="wiki词条"></p>
<h1 id="JIT-内容相关"><a href="#JIT-内容相关" class="headerlink" title="JIT 内容相关"></a>JIT 内容相关</h1><h3 id="及时制度（JIT）"><a href="#及时制度（JIT）" class="headerlink" title="及时制度（JIT）"></a>及时制度（JIT）</h3><p>JIT的想法很简单：库存是资源浪费。JIT库存系统认为，库存带来了隐含的成本，因此高效率的企业应该不存在库存。公司需要采取一系列新的管理办法，进行变革。需要采取统计学、工业工程学、生产管理和行为科学中的管理办法。及时库存逻辑阐述了库存的内涵以及与管理的关系。库存会带来成本以及浪费，而不是增加或储存价值，这与传统会计学不同。这不是说，及时系统不需要对生产好的商品进行储存。而是鼓励企业逐步消除库存，以便削减生产流程中的成本。其次，在管理中逐渐适应“零库存”的状态。库存会带来很多附加成本，例如需要建立新的仓库、需要更新设备、减少流程的可变性、缺乏工人和设备灵活性、以及影响产量等。简单来说，及时制度主要的核心是“让正确的物资，在正确的时间，流动到正确的地方，数量是刚刚好的数量。”</p>
<h3 id="环境影响"><a href="#环境影响" class="headerlink" title="环境影响"></a>环境影响</h3><p>在及时制度的诞生初期，很多产品的日常运输还是用自行车，当生产规模加大时，就需要汽车和卡车. 庫蘇馬諾在1994提出了此系統在交通阻塞和石化燃料的使用下會產生及有可能產生的弊端. 而這些弊端這違反了及時制度制訂的三條減少浪費的原則：<br>時間 - 在交通阻塞中所浪費的時間<br>庫存 - 在交通阻塞中滯留的產品<br>廢棄物 - 在交通阻塞中, 無法移動的狀態下, 燃料仍持續的被消耗<br>影响价格<br>及时系统提出，库存让价格变化性大，因为库存让企业需要提前根据产量，采购原材料，原材料的价格又会有波动，因此提高了价格变化性。如果原材料价格提高，库存成本也提高。<br>质量波动<br>及时制度提出，进口零件的质量一般稳定，如果不稳定的话，企业就会增加成本。企业一般会与固定的供应商合作，降低原材料的质量波动和价格。<br>需求波动<br>卡马克 (1989) 提出，相对稳定的需求的重要性是，帮助保证效率、资本利用率。卡马克提出，如果需求不稳定，及时系统就会带来很高的资本成本。<br>供应稳定<br>美国1992年的铁路工人罢工引起了通用电气公司裁掉了7.5万名员工，因为公司的产品供应不出去。</p>
<p>JIT实施方法<br>1) 设计产品流动流程<br>依生產流程重新設計/重新佈置場地與動線<br>减少每个批次的数量<br>合并可以合并的环节<br>平衡產线上下游的產能<br>預防保養<br>降低架設工時<br>2) 全面质量控制<br>提高工人认知度<br>进行自动化检查<br>对质量进行量化测量<br>检测瑕疵产品<br>激发工人的参与<br>3) 稳定生产时间<br>将生产时程平準化<br>建立冻结窗口（freeze windows）<br>保留部份產能<br>4) 看板拉动系统<br>根据需求进行拉动管理<br>Backflush<br>减少每批次数量<br>5) 与供應商合作<br>降低前置时间<br>頻繁但有規律的供貨<br>项目用法需求<br>统一质量<br>6) 进一步降低其他部门的库存<br>降低零售店面库存<br>降低运输过程中库存<br>改善运输工具，减少运输库存<br>利用传送带，降低运输库存<br>7) 改善产品設計<br>產品構型標準化<br>减少零件的数量<br>把产品设计进行流程化<br>统一质量</p>
<h1 id="TOC-内容相关"><a href="#TOC-内容相关" class="headerlink" title="TOC 内容相关"></a>TOC 内容相关</h1><p>限制理論（Theory of Constraints，TOC）是由以色列學者伊利雅胡·高德拉特所發展出來的一種全方面的管理哲學，主張一個複雜的系統隱含著簡單化。即使在任何時間，一個複雜的系統可能是由成千上萬人和一系列設備所組成。但是只有非常少的變數或許只有一個，稱為限制，它會限制（或阻礙）此系統達到更高的目標。<br>TOC的思考程序可協助答覆專注於改善時的主要問題：<br>什麼要改變？<br>要改變成什麼？<br>如何造成改變？<br>有時，另外兩個問題也會被列為思考程序：<br>為什麼要改變？<br>如何保持持續改善的過程（英语：Process of ongoing improvement-POOGI）？<br>TOC主張任何組織或企業成立之時必然有一目標，但同時也存在著許多限制阻礙組織或企業達成這個目標。因此為了達成其更高的績效，就必須打破這些限制，做到持續的改進。</p>
<p>中文wiki内容有限下面是英文内容：</p>
<p>The theory of constraints (TOC) is a management paradigm that views any manageable system as being limited in achieving more of its goals by a very small number of constraints. There is always at least one constraint, and TOC uses a focusing process to identify the constraint and restructure the rest of the organization around it. TOC adopts the common idiom “a chain is no stronger than its weakest link”. This means that processes, organizations, etc., are vulnerable because the weakest person or part can always damage or break them or at least adversely affect the outcome.</p>
<h3 id="The-five-focusing-steps"><a href="#The-five-focusing-steps" class="headerlink" title="The five focusing steps"></a>The five focusing steps</h3><p>Theory of constraints is based on the premise that the rate of goal achievement by a goal-oriented system (i.e., the system’s throughput) is limited by at least one constraint.</p>
<p>The argument by reductio ad absurdum is as follows: If there was nothing preventing a system from achieving higher throughput (i.e., more goal units in a unit of time), its throughput would be infinite — which is impossible in a real-life system.</p>
<p>Only by increasing flow through the constraint can overall throughput be increased.[1]</p>
<p>Assuming the goal of a system has been articulated and its measurements defined, the steps are:</p>
<p>Identify the system’s constraint(s).<br>Decide how to exploit the system’s constraint(s).<br>Subordinate everything else to the above decision(s).<br>Alleviate the system’s constraint(s).<br>Warning! If in the previous steps a constraint has been broken, go back to step 1, but do not allow inertia to cause a system’s constraint.[4]<br>The goal of a commercial organization is: “Make more money now and in the future”,[5] and its measurements are given by throughput accounting as: throughput, inventory, and operating expenses.</p>
<p>The five focusing steps aim to ensure ongoing improvement efforts are centered on the organization’s constraint(s). In the TOC literature, this is referred to as the process of ongoing improvement (POOGI).</p>
<p>These focusing steps are the key steps to developing the specific applications mentioned below.</p>
<h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>A constraint is anything that prevents the system from achieving its goal. There are many ways that constraints can show up, but a core principle within TOC is that there are not tens or hundreds of constraints. There is at least one, but at most only a few in any given system. Constraints can be internal or external to the system. An internal constraint is in evidence when the market demands more from the system than it can deliver. If this is the case, then the focus of the organization should be on discovering that constraint and following the five focusing steps to open it up (and potentially remove it). An external constraint exists when the system can produce more than the market will bear. If this is the case, then the organization should focus on mechanisms to create more demand for its products or services.</p>
<h3 id="Types-of-internal-constraints"><a href="#Types-of-internal-constraints" class="headerlink" title="Types of (internal) constraints"></a>Types of (internal) constraints</h3><p>Equipment: The way equipment is currently used limits the ability of the system to produce more salable goods/services.<br>People: Lack of skilled people limits the system. Mental models held by people can cause behaviour that becomes a constraint.<br>Policy: A written or unwritten policy prevents the system from making more.<br>The concept of the constraint in Theory of Constraints is analogous to but differs from the constraint that shows up in mathematical optimization. In TOC, the constraint is used as a focusing mechanism for management of the system. In optimization, the constraint is written into the mathematical expressions to limit the scope of the solution (X can be no greater than 5).</p>
<p>Please note: organizations have many problems with equipment, people, policies, etc. (A breakdown is just that – a breakdown – and is not a constraint in the true sense of the TOC concept). The constraint is the limiting factor that is preventing the organization from getting more throughput (typically, revenue through sales) even when nothing goes wrong.</p>
<h3 id="Breaking-a-constraint"><a href="#Breaking-a-constraint" class="headerlink" title="Breaking a constraint"></a>Breaking a constraint</h3><p>If a constraint’s throughput capacity is elevated to the point where it is no longer the system’s limiting factor, this is said to “break” the constraint. The limiting factor is now some other part of the system, or may be external to the system (an external constraint). This is not to be confused with a breakdown.</p>
<h3 id="Buffers"><a href="#Buffers" class="headerlink" title="Buffers"></a>Buffers</h3><p>Buffers are used throughout the theory of constraints. They often result as part of the exploit and subordinate steps of the five focusing steps. Buffers are placed before the governing constraint, thus ensuring that the constraint is never starved. Buffers are also placed behind the constraint to prevent downstream failure from blocking the constraint’s output. Buffers used in this way protect the constraint from variations in the rest of the system and should allow for normal variation of processing time and the occasional upset (Murphy) before and behind the constraint.</p>
<p>Buffers can be a bank of physical objects before a work center, waiting to be processed by that work center. Buffers ultimately buy you time, as in the time before work reaches the constraint and are often verbalized as time buffers. There should always be enough (but not excessive) work in the time queue before the constraint and adequate offloading space behind the constraint.</p>
<p>Buffers are not the small queue of work that sits before every work center in a Kanban system although it is similar if you regard the assembly line as the governing constraint. A prerequisite in the theory is that with one constraint in the system, all other parts of the system must have sufficient capacity to keep up with the work at the constraint and to catch up if time was lost. In a balanced line, as espoused by Kanban, when one work center goes down for a period longer than the buffer allows, then the entire system must wait until that work center is restored. In a TOC system, the only situation where work is in danger is if the constraint is unable to process (either due to malfunction, sickness or a “hole” in the buffer – if something goes wrong that the time buffer can not protect).</p>
<p>Buffer management, therefore, represents a crucial attribute of the theory of constraints. There are many ways to apply buffers, but the most often used is a visual system of designating the buffer in three colors: green (okay), yellow (caution) and red (action required). Creating this kind of visibility enables the system as a whole to align and thus subordinate to the need of the constraint in a holistic manner. This can also be done daily in a central operations room that is accessible to everybody.</p>
<h3 id="Plant-types"><a href="#Plant-types" class="headerlink" title="Plant types"></a>Plant types</h3><p>There are four primary types of plants in the TOC lexicon. Draw the flow of material from the bottom of a page to the top, and you get the four types. They specify the general flow of materials through a system, and also provide some hints about where to look for typical problems. This type of analysis is known as VATI analysis[6] as it uses the bottom-up shapes of the letters V, A, T, and I to describe the types of plants. The four types can be combined in many ways in larger facilities, e.g. “an A plant feeding a V plant”.</p>
<p>V-plant: The general flow of material is one-to-many, such as a plant that takes one raw material and can make many final products. Classic examples are meat rendering plants or a steel manufacturer. The primary problem in V-plants is “robbing,” where one operation (A) immediately after a diverging point “steals” materials meant for the other operation (B). Once the material has been processed by A, it cannot come back and be run through B without significant rework.<br>A-plant: The general flow of material is many-to-one, such as in a plant where many sub-assemblies converge for a final assembly. The primary problem in A-plants is in synchronizing the converging lines so that each supplies the final assembly point at the right time.<br>T-plant: The general flow is that of an I-plant (or has multiple lines), which then splits into many assemblies (many-to-many). Most manufactured parts are used in multiple assemblies and nearly all assemblies use multiple parts. Customized devices, such as computers, are good examples. T-plants suffer from both synchronization problems of A-plants (parts aren’t all available for an assembly) and the robbing problems of V-plants (one assembly steals parts that could have been used in another).<br>I-plant: Material flows in a sequence, such as in an assembly line. The primary work is done in a straight sequence of events (one-to-one). The constraint is the slowest operation.<br>From the above list, one can deduce that for non-material systems one could draw the flow of work or the flow of processes, instead of physical flows, and arrive at similar basic V, A, T, or I structures. A project, for example, is an A-shaped sequence of work, culminating in a delivered product (i.e., the intended outcome of the project).</p>
<h1 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h1><p>甘特图我推荐用下面这个，平时我做计划几乎都离不开Omniplan,它支持导出Project格式，同时支持任务排期跳过节假日等。</p>
<p><img src="/uploads/WX20190506-104321.png" alt="Omniplan"></p>
<p><a href="https://en.wikipedia.org/wiki/Theory_of_constraints" target="_blank" rel="external">TOC</a><br><a href="https://en.wikipedia.org/wiki/Just-in-time_manufacturing" target="_blank" rel="external">Just-in-time manufacturing</a><br><a href="https://baike.baidu.com/item/全面质量管理/82450?fromtitle=TQM&amp;fromid=1446922&amp;fr=aladdin" target="_blank" rel="external">TQM</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近受一位蓝朋友影响看了一些项管相关的书，这里做一下记录。记录的内容不多科普文。摘录内容源于wiki。&lt;/p&gt;
    
    </summary>
    
      <category term="gantt chart" scheme="http://vrast.cn/categories/gantt-chart/"/>
    
    
      <category term="project" scheme="http://vrast.cn/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>none内容提纲</title>
    <link href="http://vrast.cn/posts/5b921b24/"/>
    <id>http://vrast.cn/posts/5b921b24/</id>
    <published>2019-04-26T14:29:33.000Z</published>
    <updated>2019-04-26T16:44:44.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一直以来都想把我从业游戏以来的积累转化成体系，直到近期才下定决心整理出一本书，分享给社区。本篇提纲不定期修改。<br><a id="more"></a></p>
<h1 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h1><h3 id="C-Java-与-Objective-C"><a href="#C-Java-与-Objective-C" class="headerlink" title="C# Java 与 Objective-C"></a>C# Java 与 Objective-C</h3><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h3><h3 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h3></blockquote>
<h1 id="辅助脚本语言"><a href="#辅助脚本语言" class="headerlink" title="辅助脚本语言"></a>辅助脚本语言</h1><h3 id="Lua-与-Python"><a href="#Lua-与-Python" class="headerlink" title="Lua 与 Python"></a>Lua 与 Python</h3><h3 id="综合案例-2"><a href="#综合案例-2" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="bat-与-Shell"><a href="#bat-与-Shell" class="headerlink" title="bat 与 Shell"></a>bat 与 Shell</h3><h3 id="综合案例-3"><a href="#综合案例-3" class="headerlink" title="综合案例"></a>综合案例</h3><h1 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h1><h3 id="代码风格与Bug概率之间的关系"><a href="#代码风格与Bug概率之间的关系" class="headerlink" title="代码风格与Bug概率之间的关系"></a>代码风格与Bug概率之间的关系</h3><h3 id="综合案例-4"><a href="#综合案例-4" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><h3 id="综合案例-5"><a href="#综合案例-5" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="代码优化案例"><a href="#代码优化案例" class="headerlink" title="代码优化案例"></a>代码优化案例</h3><h3 id="综合案例-6"><a href="#综合案例-6" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="不同平台的调试技巧"><a href="#不同平台的调试技巧" class="headerlink" title="不同平台的调试技巧"></a>不同平台的调试技巧</h3><h3 id="综合案例-7"><a href="#综合案例-7" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="学会发问"><a href="#学会发问" class="headerlink" title="学会发问"></a>学会发问</h3><h3 id="综合案例-8"><a href="#综合案例-8" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="使用搜索引擎处理现有问题"><a href="#使用搜索引擎处理现有问题" class="headerlink" title="使用搜索引擎处理现有问题"></a>使用搜索引擎处理现有问题</h3><h3 id="综合案例-9"><a href="#综合案例-9" class="headerlink" title="综合案例"></a>综合案例</h3><h1 id="扩展件开发"><a href="#扩展件开发" class="headerlink" title="扩展件开发"></a>扩展件开发</h1><h3 id="编辑器扩展使用技巧"><a href="#编辑器扩展使用技巧" class="headerlink" title="编辑器扩展使用技巧"></a>编辑器扩展使用技巧</h3><h3 id="综合案例-10"><a href="#综合案例-10" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="序列化以及资源处理管道"><a href="#序列化以及资源处理管道" class="headerlink" title="序列化以及资源处理管道"></a>序列化以及资源处理管道</h3><h3 id="综合案例-11"><a href="#综合案例-11" class="headerlink" title="综合案例"></a>综合案例</h3><h3 id="原生层插件的开发方法"><a href="#原生层插件的开发方法" class="headerlink" title="原生层插件的开发方法"></a>原生层插件的开发方法</h3><h3 id="综合案例-12"><a href="#综合案例-12" class="headerlink" title="综合案例"></a>综合案例</h3><p>暂时先写这里 后面的再列</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直以来都想把我从业游戏以来的积累转化成体系，直到近期才下定决心整理出一本书，分享给社区。本篇提纲不定期修改。&lt;br&gt;
    
    </summary>
    
      <category term="新书提纲" scheme="http://vrast.cn/categories/%E6%96%B0%E4%B9%A6%E6%8F%90%E7%BA%B2/"/>
    
    
      <category term="none" scheme="http://vrast.cn/tags/none/"/>
    
  </entry>
  
  <entry>
    <title>使用VisualStudio Code 预览.md文件</title>
    <link href="http://vrast.cn/posts/47642b6e/"/>
    <id>http://vrast.cn/posts/47642b6e/</id>
    <published>2019-04-19T14:44:21.000Z</published>
    <updated>2019-04-26T14:38:40.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇是给一个小朋友看的，原话是这样的：“用VisualStudio Code 看不了Markdown文件 。” 那么按照本篇操作，你将可以方便的在VsCode中预览Markdown文件。</p>
</blockquote>
 <a id="more"></a>
<h1 id="给VisualStudio-Code安装Markdown预览插件"><a href="#给VisualStudio-Code安装Markdown预览插件" class="headerlink" title="给VisualStudio Code安装Markdown预览插件"></a>给VisualStudio Code安装Markdown预览插件</h1><p><img src="/uploads/WX20190419-225136@2x.png" alt="安装插件的步骤"></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>安装完毕之后打开<code> .md </code>文件。就可以使用preview功能了。</p>
<p><img src="/uploads/WX20190419-225136@2x.png" alt="按一次Ctrl + Shift + v 就可以开启preview窗口了。"></p>
<p><img src="/uploads/WX20190419-225734@2x.png" alt="如果想要左右分屏 可以点一下这个小图标"></p>
<p><img src="/uploads/WX20190419-225904@2x.png" alt="分屏效果图"></p>
<p><img src="/uploads/WX20190419-225344@2x.png" alt="快捷键在插件内部也有介绍，非常的简单"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇是给一个小朋友看的，原话是这样的：“用VisualStudio Code 看不了Markdown文件 。” 那么按照本篇操作，你将可以方便的在VsCode中预览Markdown文件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://vrast.cn/categories/Markdown/"/>
    
    
      <category term="tools" scheme="http://vrast.cn/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac平台Debug lua提示缺少socket.http组件</title>
    <link href="http://vrast.cn/posts/d708212d/"/>
    <id>http://vrast.cn/posts/d708212d/</id>
    <published>2019-04-18T02:35:02.000Z</published>
    <updated>2019-04-18T03:19:56.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>起因是这样的我想在Mac上配一下Lua Debug环境，在debug的时候会用到socket链接到调试器。在intelliJ中Debug的时候它提示我“module ‘socket.http’ not found” 然后我就去了解了一下Lua环境的配置，这里着重要提到Lua的包管理工具 <a href="https://luarocks.org" target="_blank" rel="external">luarocks</a>,还真是很方便缺什么直接就装什么。</p>
</blockquote>
<a id="more"></a>
<h1 id="安装luarocks"><a href="#安装luarocks" class="headerlink" title="安装luarocks"></a>安装luarocks</h1><p>直接用Homebrew就能安装，当然可以下载源码编译。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>luarocks</div></pre></td></tr></table></figure></p>
<p>或者</p>
<ol>
<li>下载 <a href="https://luarocks.org/releases/luarocks-3.0.4.tar.gz" target="_blank" rel="external">https://luarocks.org/releases/luarocks-3.0.4.tar.gz</a></li>
<li>解压进入luarocks-3.0.4</li>
<li>编译 ./configure; sudo make bootstrap</li>
<li>安装luasocket sudo luarocks install luasocket</li>
</ol>
<p>这里需要注意如果你和我是使用Mac那么在第4步的时候需要切换到<code>/usr/local/share/lua/5.3</code>这个路径下。这是默认的lua文件存放位置。</p>
<h1 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">luarocks <span class="built_in">help</span></div></pre></td></tr></table></figure>
<h1 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h1><p>我看了下好用的lua扩展还真不少<br><img src="/uploads/WX20190418-104738.png" alt="比如关于Protobuf的库"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/16491242/module-socket-http-not-found-lua-on-imac" target="_blank" rel="external">“module ‘socket.http’ not found:” –Lua on iMac [closed]
</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;起因是这样的我想在Mac上配一下Lua Debug环境，在debug的时候会用到socket链接到调试器。在intelliJ中Debug的时候它提示我“module ‘socket.http’ not found” 然后我就去了解了一下Lua环境的配置，这里着重要提到Lua的包管理工具 &lt;a href=&quot;https://luarocks.org&quot;&gt;luarocks&lt;/a&gt;,还真是很方便缺什么直接就装什么。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="FAQ" scheme="http://vrast.cn/categories/FAQ/"/>
    
    
      <category term="Lua" scheme="http://vrast.cn/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>UNITY Unable to instantiate UnityPlayerActivity</title>
    <link href="http://vrast.cn/posts/80d969f4/"/>
    <id>http://vrast.cn/posts/80d969f4/</id>
    <published>2019-04-11T08:11:24.000Z</published>
    <updated>2019-04-11T10:56:40.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这段时间自从用了UNITY 2018.3.8F1 出现的bug很多，关于构建包的。不知道是不是 Unity 频繁更新导致的。截止到目前为止 我已经在UNITY HUB上看到了 UNITY2018.3.12.F1 这个版本了。我这边的遇到的问题主要体现在使用Gradle构建或者使用内置方式构建都会出现无法找到MainActivity。也就是Unity默认运行的那个Activity.即使我直接创建一个新的工程打包，亦是如此。<br><img src="/uploads/WX20190411-161531.png" alt="无法找到这个 unityplayer.UnityActivity 或者 xxx.xxx.xxx.UnityPlayerActivity"></p>
</blockquote>
<a id="more"></a>
<p><img src="/uploads/WX20190411-183559.png" alt="打开AndroidManifest.xml之后发现这边直接找不到。"></p>
<p><img src="/uploads/WX20190411-183859.png" alt="既然这样我直接用UNITY3D默认的"></p>
<p>好吧 解决了。</p>
<p>当然这并不是引发当前问题的根源，然而为什么会引发这个问题呢 ？ 于是我重新审视了一下代码</p>
<p><img src="/uploads/WX20190411-184808.png" alt="这段代码的继承类是 Activity"></p>
<h1 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h1><p><img src="/uploads/WX20190411-185258.png" alt="在老版本里是这样的，改成继承自UnityPlayerAcitivity问题解决。"></p>
<h1 id="所以-这又是Unity的BUG吗？"><a href="#所以-这又是Unity的BUG吗？" class="headerlink" title="所以 这又是Unity的BUG吗？"></a>所以 这又是Unity的BUG吗？</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这段时间自从用了UNITY 2018.3.8F1 出现的bug很多，关于构建包的。不知道是不是 Unity 频繁更新导致的。截止到目前为止 我已经在UNITY HUB上看到了 UNITY2018.3.12.F1 这个版本了。我这边的遇到的问题主要体现在使用Gradle构建或者使用内置方式构建都会出现无法找到MainActivity。也就是Unity默认运行的那个Activity.即使我直接创建一个新的工程打包，亦是如此。&lt;br&gt;&lt;img src=&quot;/uploads/WX20190411-161531.png&quot; alt=&quot;无法找到这个 unityplayer.UnityActivity 或者 xxx.xxx.xxx.UnityPlayerActivity&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="Android" scheme="http://vrast.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>优化IL2CPP打包速度</title>
    <link href="http://vrast.cn/posts/b5ee8b26/"/>
    <id>http://vrast.cn/posts/b5ee8b26/</id>
    <published>2019-04-10T06:54:16.000Z</published>
    <updated>2019-04-10T07:31:36.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天有同事找我聊了一下关于打包的问题，他说在UNITY IL2CPP下编译速度过慢，切换成 mono 会快三分之一。这个速度有没有办法优化。我倒是没有什么实际优化打包速度的操作经验，让我来做一般就是资源层优化，当然这是最难也最容易做到的。但是他倒是给我提了几个不错的建议。我看了下UNITY的官网确实如此。本篇记录之。</p>
</blockquote>
<ul>
<li>降低硬盘读写(各种方案:关闭杀毒软件/用两块ssd项目与unity分开/等)</li>
<li>增量包构建会加速进程</li>
</ul>
<p>下面是UNITY官方的实践经验：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Optimizing IL2CPP build times</div><div class="line">Project build times can be much longer when building a project with IL2CPP</div><div class="line">. However, there are several ways to reduce the build time significantly:</div><div class="line"></div><div class="line"><span class="keyword">Use</span> incremental building</div><div class="line"></div><div class="line"><span class="keyword">When</span> <span class="keyword">using</span> incremental building, the C++ compiler <span class="keyword">only</span> recompiles files that have <span class="keyword">changed</span> since the <span class="keyword">last</span> build. <span class="keyword">To</span> <span class="keyword">use</span> incremental building, <span class="keyword">build</span> your <span class="keyword">project</span> <span class="keyword">to</span> a previous <span class="keyword">build</span> location (<span class="keyword">without</span> deleting the target <span class="keyword">directory</span>).</div><div class="line"></div><div class="line"><span class="keyword">Exclude</span> <span class="keyword">project</span> <span class="keyword">and</span> target <span class="keyword">build</span> folders <span class="keyword">from</span> anti-malware software scans</div><div class="line"></div><div class="line">You can improve <span class="keyword">build</span> times <span class="keyword">by</span> disabling anti-malware software <span class="keyword">before</span> building your project. (Testing <span class="keyword">by</span> Unity Technologies <span class="keyword">found</span> that <span class="keyword">build</span> times decreased <span class="keyword">by</span> <span class="number">50</span> – <span class="number">66</span>% <span class="keyword">after</span> disabling Windows Defender <span class="keyword">on</span> a <span class="keyword">fresh</span> Windows <span class="number">10</span> installation.)</div><div class="line"></div><div class="line"><span class="keyword">Store</span> your <span class="keyword">project</span> <span class="keyword">and</span> target <span class="keyword">build</span> folder <span class="keyword">on</span> a Solid State Drive (SSD)</div><div class="line"></div><div class="line">Solid State Drives (SSDs) have faster <span class="keyword">read</span>/write speed, <span class="keyword">when</span> compared <span class="keyword">to</span> traditional Hard Disk Drives (HDD). Converting IL code <span class="keyword">to</span> C++ <span class="keyword">and</span> compiling it involves a <span class="keyword">large</span> <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">read</span>/write operations. A faster <span class="keyword">storage</span> device speeds up this process.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天有同事找我聊了一下关于打包的问题，他说在UNITY IL2CPP下编译速度过慢，切换成 mono 会快三分之一。这个速度有没有办法优化。我倒是没有什么实际优化打包速度的操作经验，让我来做一般就是资源层优化，当然这是最难也最容易做到的。但是他倒是
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="BuildTimes" scheme="http://vrast.cn/tags/BuildTimes/"/>
    
  </entry>
  
  <entry>
    <title>安装Unity导出APK显示失败</title>
    <link href="http://vrast.cn/posts/434d7425/"/>
    <id>http://vrast.cn/posts/434d7425/</id>
    <published>2019-04-05T09:45:02.000Z</published>
    <updated>2019-05-14T07:34:50.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>遇到一个非常皮的问题，我更新了Android Studio的SDK Build Tools，直接将 Build Tools 29 rc1 与 rc2 都下载了。<br><img src="/uploads/WX20190405-174643.png" alt="我当时是直接更新到了 29 rc2"><br>直接导出项目在Android Studio中会直接显示  …</p>
</blockquote>
<a id="more"></a>
<p><strong>android studio ERROR: Failed to find Build Tools revision 29.0.0</strong><br>另外如果直接出APK然后安装会显示一个<br><strong>Installation error:INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</strong><br>这个报错信息是十分误导人的，网上的解决方案一般都是更改keystone或直接更改unity的项目导出模版。这样越改越偏。如果你也和我一样不妨试一下下面的方案。</p>
<p>我在Stackoverflow上找到了一解决方案：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">For building a project, Unity3d uses a stable version of the Build Tools and not an rc (<span class="keyword">release</span> candidate).</div><div class="line"></div><div class="line">The Android SDK <span class="keyword">path</span> <span class="keyword">is</span> usually C:\<span class="keyword">Users</span>\&lt;username&gt;\AppData\<span class="keyword">Local</span>\Android\sdk\<span class="keyword">build</span>-tools\ <span class="keyword">delete</span> the <span class="number">29.0</span><span class="number">.0</span>-rc1 folder <span class="keyword">or</span> <span class="keyword">move</span> it <span class="keyword">out</span> <span class="keyword">to</span> anywhere. You could also remove the rc <span class="keyword">version</span> <span class="keyword">of</span> the SDK <span class="keyword">Build</span> Tools via Android Studio<span class="string">'s SDK manager.</span></div><div class="line"></div><div class="line">Doing that the project should build successfully.</div></pre></td></tr></table></figure>
<p>大意就是让我直接将下载的  Build Tools 29 rc1 与 rc2 先删除然后再打包。试了一下成功安装了。</p>
<p><img src="/uploads/WX20190405-175318.png" alt="安装成功了"></p>
<h1 id="UNITY的Build-Tools使用策略猜测"><a href="#UNITY的Build-Tools使用策略猜测" class="headerlink" title="UNITY的Build Tools使用策略猜测"></a>UNITY的Build Tools使用策略猜测</h1><p>经过上面的实力躺坑，可以推断如果你安装了更新的Build Tools，unity导出的时候就会使用最近更新的最新的那个，或许是路径拼接的问题，unity所引用的build tools只会引用前面的版本号 ，就像我遇到的一样 明明下载了 29 rc1 / 29 rc2 ，Unity偏偏不用执着的去找一个叫 29 的 Build Tools。</p>
<p>或许这是一个隐藏bug吧，希望Unity团队早日解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;遇到一个非常皮的问题，我更新了Android Studio的SDK Build Tools，直接将 Build Tools 29 rc1 与 rc2 都下载了。&lt;br&gt;&lt;img src=&quot;/uploads/WX20190405-174643.png&quot; alt=&quot;我当时是直接更新到了 29 rc2&quot;&gt;&lt;br&gt;直接导出项目在Android Studio中会直接显示  …&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="ANDROID" scheme="http://vrast.cn/tags/ANDROID/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio进行APK Profile</title>
    <link href="http://vrast.cn/posts/98741dc2/"/>
    <id>http://vrast.cn/posts/98741dc2/</id>
    <published>2019-04-04T08:02:23.000Z</published>
    <updated>2019-04-05T02:37:51.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很多时候我们需要从Android端获取崩溃日志，但是手动adb比较麻烦。这时候就应该使用AndroidStudio了。</p>
</blockquote>
<a id="more"></a>
<h2 id="使用AndroidStudio进行Profile"><a href="#使用AndroidStudio进行Profile" class="headerlink" title="使用AndroidStudio进行Profile"></a>使用AndroidStudio进行Profile</h2><p><img src="/uploads/WX20190404-160013.png" alt="导入APK到IDE中"></p>
<p><img src="/uploads/WX20190405-100856.png" alt="选择需要启用调试的设备，也可以是真机(需要开启USB调试)"></p>
<p><img src="/uploads/WX20190405-101425.png" alt="使用logcat轻松获取当前Log，如果信息过多 你可以直接用Unity关键字过滤"></p>
<p>还有性能/内存等详细的分析这里有一份参考：<a href="https://blog.csdn.net/niubitianping/article/details/72617864" target="_blank" rel="external">Android studio中android profile（性能分析器）的使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多时候我们需要从Android端获取崩溃日志，但是手动adb比较麻烦。这时候就应该使用AndroidStudio了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android Profile" scheme="http://vrast.cn/categories/Android-Profile/"/>
    
    
      <category term="APK" scheme="http://vrast.cn/tags/APK/"/>
    
  </entry>
  
  <entry>
    <title>UNITY移动端路径的注意事项</title>
    <link href="http://vrast.cn/posts/d425b5d3/"/>
    <id>http://vrast.cn/posts/d425b5d3/</id>
    <published>2019-04-04T06:41:42.000Z</published>
    <updated>2019-04-05T07:12:28.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在移动端加载路径与Windwos或Mac上加载有一些区分,有时候资源文件找不到是在是查起来头疼。这里写一些推荐规范，从非开发角度就能避免这些问题。</p>
</blockquote>
<a id="more"></a>
<h2 id="路径大小写"><a href="#路径大小写" class="headerlink" title="路径大小写"></a>路径大小写</h2><p>在UNITY EDITOR下你不必关注路径大小写问题，⚠️ 注意：但是在移动端大小写是敏感的。</p>
<ul>
<li>建议所有AB包都保持小写的命名方式 </li>
<li>建议在加载文件的地方的留一个可以开关的宏定义用来查路径问题</li>
</ul>
<h2 id="StreamAssets目录的资源加载"><a href="#StreamAssets目录的资源加载" class="headerlink" title="StreamAssets目录的资源加载"></a>StreamAssets目录的资源加载</h2><p>StreamAsset目录中。在移动端File.IO不可用，⚠️ 注意：你需要使用www来加载当前目录下资源</p>
<p>你可以使用下面的代码块进行资源的同步加载，而不必非要放到携程里进行加载。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> (WWW www = <span class="keyword">new</span> WWW(path))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (!www.isDone)</div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream(www.bytes))</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="路径的隐含条件"><a href="#路径的隐含条件" class="headerlink" title="路径的隐含条件"></a>路径的隐含条件</h2><ul>
<li>建议统一使用www加载，避免大量的逻辑判断(比如是否需要拼接”file://“)</li>
<li>在StreamAsset目录下就不要使用 File.exsits 之类位于 System.IO命名空间下函数</li>
</ul>
<p>//在android下<br>Application.streamingAssetsPath = “jar:file://“ + Application.dataPath + “!/assets/“</p>
<p>//在pc &amp; mac端<br>Application.streamingAssetsPath = Application.dataPath + “/StreamingAssets”</p>
<p>//在iOS端<br>Application.streamingAssetsPath = Application.dataPath + “/Raw”</p>
<p><img src="/uploads/WX20190404-160429.png" alt="APK内StreamAsset目录结构"></p>
<p>当然你可以使用下面的代码块直接进行www加载路径的拼接</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">string</span> <span class="title">GetWWWLoadingPathAtStreamingAssetsFolder</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> path;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></div><div class="line">    path = <span class="string">"file:"</span> + Application.dataPath + <span class="string">"/StreamingAssets"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">elif</span> UNITY_ANDROID</span></div><div class="line">    path = <span class="string">"jar:file://"</span>+ Application.dataPath + <span class="string">"!/assets/"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">elif</span> UNITY_IOS</span></div><div class="line">    path = <span class="string">"file:"</span> + Application.dataPath + <span class="string">"/Raw"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">//Desktop (Mac OS or Windows)</span></div><div class="line">    path = <span class="string">"file:"</span>+ Application.dataPath + <span class="string">"/StreamingAssets"</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> path;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在移动端加载路径与Windwos或Mac上加载有一些区分,有时候资源文件找不到是在是查起来头疼。这里写一些推荐规范，从非开发角度就能避免这些问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MOBILE" scheme="http://vrast.cn/tags/MOBILE/"/>
    
  </entry>
  
  <entry>
    <title>XLua Generate Code Log显示代码找不到</title>
    <link href="http://vrast.cn/posts/aee063b0/"/>
    <id>http://vrast.cn/posts/aee063b0/</id>
    <published>2019-04-04T06:27:25.000Z</published>
    <updated>2019-04-05T03:05:19.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>项目内引用了Xlua插件，在Generate代码的时候发现一些函数没有找到。遂发现这是XLua的黑名单需要添加相应的函数。现在这里记录一下。</p>
</blockquote>
<p><img src="/uploads/WX20190404-143356.png" alt="参考Xlua example中Editor目录下的配置文件"></p>
<p>像下面一样将报错的函数添加到黑名单，然后重新生成代码即可</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[BlackList]</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;<span class="keyword">string</span>&gt;&gt; BlackList = <span class="keyword">new</span> List&lt;List&lt;<span class="keyword">string</span>&gt;&gt;()  &#123;</div><div class="line">    <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;()&#123;<span class="string">"UnityEngine.Light"</span>, <span class="string">"shadowRadius"</span>&#125;,</div><div class="line">    <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;()&#123;<span class="string">"UnityEngine.Light"</span>, <span class="string">"shadowAngle"</span>&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目内引用了Xlua插件，在Generate代码的时候发现一些函数没有找到。遂发现这是XLua的黑名单需要添加相应的函数。现在这里记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/WX20190404-14
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="XLua" scheme="http://vrast.cn/tags/XLua/"/>
    
  </entry>
  
  <entry>
    <title>使用Rider为UNITY项目生成DLL</title>
    <link href="http://vrast.cn/posts/b10c71c2/"/>
    <id>http://vrast.cn/posts/b10c71c2/</id>
    <published>2019-03-16T05:23:04.000Z</published>
    <updated>2019-03-16T05:57:31.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>技术中心有同事问我怎么方便的将库文件编译到UNITY中，并且方便调试。今日有空写一下案例. 无论你使用的是否是rider或者是其他(VisualStudio/Mono)，基本上都是这样处理。</p>
</blockquote>
<a id="more"></a>
<h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p><img src="/uploads/WX20190316-132730@2x.png" alt="在与当前项目平行的目录建一个文件夹"></p>
<p><img src="/uploads/WeChat22cd6b5c46c3c16004d366949f7dbd96.png" alt="右键添加现有项目到解决方案，这里需要注意一下相对路径， 我的相对路径是这样的：&lt;code&gt;../../TEST2/Assets/Plugins&lt;/code&gt; "></p>
<p><img src="/uploads/WX20190316-134956@2x.png" alt="现在我们写一个测试函数 看 已经正常进入断点了"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要提前规范命名空间，并且划分好每块代码的职责范围。另外你需要确定当前所使用的.net framework 版本.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;技术中心有同事问我怎么方便的将库文件编译到UNITY中，并且方便调试。今日有空写一下案例. 无论你使用的是否是rider或者是其他(VisualStudio/Mono)，基本上都是这样处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="Plugin" scheme="http://vrast.cn/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>SpriteAtlas 使用FAQ</title>
    <link href="http://vrast.cn/posts/583e3cbd/"/>
    <id>http://vrast.cn/posts/583e3cbd/</id>
    <published>2019-03-12T07:43:31.000Z</published>
    <updated>2019-04-04T06:38:25.320Z</updated>
    
    <content type="html"><![CDATA[<p>这两天详细的看了下U3D的新图集系统 SpriteAtlas ，目前为止觉得这个新系统用起来问题不大。但是在理解上有一些问题，我会在这里做一些记录。<br>在操作上，这个没什么问题。有问题的是SpriteAtlasManager这块，需要去理解一下调用机制。</p>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>UNITY每次更新旧操作方式都会变得更加简单，这次亦是如此。</p>
<h3 id="启用图集打包方式"><a href="#启用图集打包方式" class="headerlink" title="启用图集打包方式"></a>启用图集打包方式</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E<span class="function"><span class="title">dit</span>-&gt;</span> P<span class="function"><span class="title">rojectSettings</span> -&gt;</span> E<span class="function"><span class="title">ditor</span> -&gt;</span> S<span class="function"><span class="title">prite</span> Packer -&gt;</span> Mode</div><div class="line"></div><div class="line"> -&gt;  Enable For Builds：在打包时使用图集</div><div class="line"></div><div class="line"> -&gt;  AlwaysEnabled：保持图集状态</div></pre></td></tr></table></figure>
<h3 id="制作图集"><a href="#制作图集" class="headerlink" title="制作图集"></a>制作图集</h3><p>新建SpriteAtlas文件，将Sprite或者Sprite所在文件夹拖入Objects for Packing，按Pack Preview预览。</p>
<h3 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h3><p><img src="/uploads/spriteatlasdemo.png" alt="使用变体方便的制作低清晰度图集给低性能设备使用"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>SpriteAtlas -&gt; Include in Build : 勾选的话作用于编辑器中。取消后需要在代码中监听SpriteAtlasManager.atlasRequested事件来在程序中加载贴图集。</p>
<p>如果你准备用AB加载图集 或者 直接从Resources加载图集 建议你将 Include in Build 的选中去掉。避免重复的资源出现在包体里。</p>
<h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><h3 id="先加载后取值"><a href="#先加载后取值" class="headerlink" title="先加载后取值"></a>先加载后取值</h3><p>如果现在要在运行时从资源目录或者AB里加载出Prefab,这个时候我们需要先加载这个Prefab的代码上<code>先进行SpriteAtlas的加载工作</code> – 也就是需要保证这个Sprite所属SpriteAtlas已经被Load到运行时。</p>
<p>下面的代码是可以正常工作的：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> UnityEngine.U2D;</div><div class="line"><span class="keyword">using</span> UnityEngine.UI;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestSA</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> GameObject[] objs;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> SpriteAtlas at;</div><div class="line"></div><div class="line">	<span class="comment">// Start is called before the first frame update</span></div><div class="line">	<span class="function">IEnumerator <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		at = Resources.Load&lt;SpriteAtlas&gt;(<span class="string">"NewSpriteAtlas2"</span>);</div><div class="line">		<span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">3</span></span>)</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objs.Length; i++)</div><div class="line">		&#123;</div><div class="line">			objs[i].SetActive(<span class="literal">true</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		objs[<span class="number">0</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">		objs[<span class="number">1</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">		objs[<span class="number">2</span>].GetComponent&lt;Image&gt;().sprite = at.GetSprite(<span class="string">"04"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为没有对 SpriteAtlasManager 中的回调函数进行监听，我们收获了一个Warning , 但是不影响编辑器中的正常显示 。</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⚠️ SpriteAtlasManager.atlasRequested wasn<span class="symbol">'t</span> listened <span class="keyword">to</span> <span class="keyword">while</span> NewSpriteAtlas2 requested.</div></pre></td></tr></table></figure>
<p>如果你考虑上面的做法务必小心你在每次代码调用Sprite加载都已经Load过SpriteAtlas。这应该是需要写一个相应的模块去管理 SpriteAtlas - Sprite 的从属关系。</p>
<h3 id="先注册后取值"><a href="#先注册后取值" class="headerlink" title="先注册后取值"></a>先注册后取值</h3><p>第二种就简单一些了，这也是UNTIY推荐的方法。你不必每次都在代码前检测是否调用过图集加载之类或者其他加载图集相关代码。 你只需要在 SpriteAtlasManager 中注册 atlasRegistered . 在第一次加载相应图集的时候会自动调一次，这时候在该函数的回调中内你可以轻松的写一段加载图集的代码。</p>
<h3 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h3><p>哦对了，这个图集什么时候被加载 ？ 如果你实例化物体关联到Sprite 就会执行 <code>atlasRequested</code> 回调，在UNITY内部做了一个检测，如果该关联到的图集是第一次被关联到，那么才会调用一次。</p>
<p>Trigger when any Sprite was bound to SpriteAtlas but couldn’t locate the atlas asset during runtime.<br>This usually means the sprite was packed to an atlas which is not included in build<br>This callback does not expect an immediate response from the user. Instead, it passes on a System.Action. The user can load the atlas object later and use this System.Action to pass back the loaded atlas.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> UnityEngine.U2D;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AtlasLoader</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        SpriteAtlasManager.atlasRequested += RequestAtlas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        SpriteAtlasManager.atlasRequested -= RequestAtlas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestAtlas</span>(<span class="params"><span class="keyword">string</span> tag, System.Action&lt;SpriteAtlas&gt; callback</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> sa = Resources.Load&lt;SpriteAtlas&gt;(tag);</div><div class="line">        callback(sa);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.litefeel.com/unity-2017-new-sprite-atlas/" target="_blank" rel="external">Unity2017的新spriteAtlas</a><br><a href="https://docs.unity3d.com/ScriptReference/U2D.SpriteAtlasManager.html" target="_blank" rel="external">SpriteAtlasManager</a><br><a href="https://forum.unity.com/threads/about-include-in-build-behaviour.481433/" target="_blank" rel="external">About “Include in Build” behaviour</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天详细的看了下U3D的新图集系统 SpriteAtlas ，目前为止觉得这个新系统用起来问题不大。但是在理解上有一些问题，我会在这里做一些记录。&lt;br&gt;在操作上，这个没什么问题。有问题的是SpriteAtlasManager这块，需要去理解一下调用机制。&lt;/p&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="UI" scheme="http://vrast.cn/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>UNITY新Prefab系统-2018</title>
    <link href="http://vrast.cn/posts/f258ca82/"/>
    <id>http://vrast.cn/posts/f258ca82/</id>
    <published>2019-03-01T01:44:01.000Z</published>
    <updated>2019-03-01T02:31:42.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近看了一下UNITY3D-2018的新Prefab系统，这里做一个记录。目前的情况看下来新Prefab系统还在不断的优化工作流，对于整体的概念应该是敲定下来了。未来应该是在编辑器层面上的优化和编辑细节上的调整。昨天看了UNITY的公开课。还是有点意思的，其中一个比较有趣的一个案例是某个客户由于场景层级太深，导致对某一个Prefab的递归修改卡了几十分钟最后官方出了一版优化到几分钟卡顿。这也从侧面说明了UNITY还是不断对编辑器进行改进的。对于我们来说应该也是一件很友好的事情。这东西需要总结的并不多，作为一个开箱即用的Prefab工作流，我认为UNITY官方处理的还是相当不错，作为美术或者非程序使用都是能很快上手的流程。<br>需要注意的是新Preafab的嵌套在Assetbundle中可不管你是不是嵌套或者变体，只要出现了多份Prefab就会出现多份资源。<br>第二个需要注意的是性能问题，你不能有太深的层级在你的prefab上。尽力告知美术让他多做prefab减少层级。<br>第三个就是尽量在非Assetbundle目录与Resource目录中使用新prefab系统，这样不会出现多份资源重复打包的问题。</p>
</blockquote>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我这边也就顺着之前公开课的PPT大概浏览一遍，从个人的角度写一些笔记。因为前有视频后有PPT我就在这里做一些概念上的总结了。<br>新prefb系统功能如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Nested</span> Prefabs（嵌套式预制件）</div><div class="line">Prefab Overrides（预制件覆盖/重载）</div><div class="line">Prefab Variants（预制件变体）</div></pre></td></tr></table></figure></p>
<h2 id="Nested-Prefabs（嵌套式预制件）"><a href="#Nested-Prefabs（嵌套式预制件）" class="headerlink" title="Nested Prefabs（嵌套式预制件）"></a>Nested Prefabs（嵌套式预制件）</h2><p>嵌套Prefab的做法，让我举例说的话，从程序的角度打个比方。 如果一个prefab看作是一个类的话。那么嵌套prefab就是在一个类里面使用其他的类作为局部变量类似下面:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">PrefabMain</span></div><div class="line">&#123;</div><div class="line">    PrefabA a;</div><div class="line">    PreafaB b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于a,b变量来说 进行的任何更改对于PrefabMain来说都是没有关系的。</p>
<h2 id="Prefab-Overrides（预制件覆盖-重载）"><a href="#Prefab-Overrides（预制件覆盖-重载）" class="headerlink" title="Prefab Overrides（预制件覆盖/重载）"></a>Prefab Overrides（预制件覆盖/重载）</h2><p>这个概念就不提了，记得我们之前使用UNITY3D在场景里修改实例吗？这就叫Override。</p>
<h2 id="Prefab-Variants（预制件变体）"><a href="#Prefab-Variants（预制件变体）" class="headerlink" title="Prefab Variants（预制件变体）"></a>Prefab Variants（预制件变体）</h2><p>对于这个概念程序应该更好理解了。就像下面写的，下面就是PrefabA变体了，他继承了PrefabMain，如果说现在对 PrefabMain 进行了更改，马上就会体现到所有的继承了 PrefabMain 的Prefab上面去。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">PrefabA</span> : <span class="title">PrefabMain</span></div><div class="line">&#123;</div><div class="line">    PreafaB b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看了一下UNITY3D-2018的新Prefab系统，这里做一个记录。目前的情况看下来新Prefab系统还在不断的优化工作流，对于整体的概念应该是敲定下来了。未来应该是在编辑器层面上的优化和编辑细节上的调整。昨天看了UNITY的公开课。还是有点意思的，其中一个比较有趣的一个案例是某个客户由于场景层级太深，导致对某一个Prefab的递归修改卡了几十分钟最后官方出了一版优化到几分钟卡顿。这也从侧面说明了UNITY还是不断对编辑器进行改进的。对于我们来说应该也是一件很友好的事情。这东西需要总结的并不多，作为一个开箱即用的Prefab工作流，我认为UNITY官方处理的还是相当不错，作为美术或者非程序使用都是能很快上手的流程。&lt;br&gt;需要注意的是新Preafab的嵌套在Assetbundle中可不管你是不是嵌套或者变体，只要出现了多份Prefab就会出现多份资源。&lt;br&gt;第二个需要注意的是性能问题，你不能有太深的层级在你的prefab上。尽力告知美术让他多做prefab减少层级。&lt;br&gt;第三个就是尽量在非Assetbundle目录与Resource目录中使用新prefab系统，这样不会出现多份资源重复打包的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY" scheme="http://vrast.cn/categories/UNITY/"/>
    
    
      <category term="NewPrefabSystem" scheme="http://vrast.cn/tags/NewPrefabSystem/"/>
    
  </entry>
  
  <entry>
    <title>XCode 插件自动签名</title>
    <link href="http://vrast.cn/posts/2dde2a0b/"/>
    <id>http://vrast.cn/posts/2dde2a0b/</id>
    <published>2019-02-28T01:25:59.000Z</published>
    <updated>2019-02-28T01:45:32.401Z</updated>
    
    <content type="html"><![CDATA[<p>最近用XCode写一些C++的测试，遇到一个问题，我升级过XCode所以现在看不到所有的旧插件了，网上找了一圈，需要手动创建证书然后重新对之前的插件进行签名。最后我找到一个插件可以很方便的对之前插件进行恢复。<br><a id="more"></a></p>
<h2 id="关闭XCode"><a href="#关闭XCode" class="headerlink" title="关闭XCode"></a>关闭XCode</h2><p>别忘记关XCode，不然过程中还会提醒关闭。</p>
<h2 id="使用Gem下载"><a href="#使用Gem下载" class="headerlink" title="使用Gem下载"></a>使用Gem下载</h2><p>Gem 是Mac自带的Ruby内建的功能，所以Mac用户也不必纠结什么是Gem.就是一个插件下载器，使用下面的命令安装好工具<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">install</span> update_xcode_plugins</div></pre></td></tr></table></figure></p>
<p>当然你同样可以通过github下载 <a href="https://github.com/inket/update_xcode_plugins" target="_blank" rel="external">https://github.com/inket/update_xcode_plugins</a> </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">keyle@xiaonians-MacBook-Pro  ~  sudo gem install update_xcode_plugins</div><div class="line">Password:</div><div class="line">Fetching: colorize-<span class="number">0.8</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Fetching: tins-<span class="number">1.20</span>.<span class="number">2</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Fetching: term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Fetching: inquirer-<span class="number">0.2</span>.<span class="number">1</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Fetching: update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span><span class="selector-class">.gem</span> (<span class="number">100%</span>)</div><div class="line">Successfully installed update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Parsing documentation <span class="keyword">for</span> colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> colorize-<span class="number">0.8</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> tins-<span class="number">1.20</span>.<span class="number">2</span></div><div class="line">Parsing documentation <span class="keyword">for</span> term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> term-ansicolor-<span class="number">1.7</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> inquirer-<span class="number">0.2</span>.<span class="number">1</span></div><div class="line">Parsing documentation <span class="keyword">for</span> update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Installing ri documentation <span class="keyword">for</span> update_xcode_plugins-<span class="number">0.4</span>.<span class="number">0</span></div><div class="line">Done installing documentation <span class="keyword">for</span> colorize, tins, term-ansicolor, inquirer, update_xcode_plugins after <span class="number">1</span> seconds</div><div class="line"><span class="number">5</span> gems installed</div></pre></td></tr></table></figure>
<h2 id="查看本机现有XCode插件"><a href="#查看本机现有XCode插件" class="headerlink" title="查看本机现有XCode插件"></a>查看本机现有XCode插件</h2><p>使用 <code>update_xcode_plugins</code> 命令可以直接更新旧签名插件。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">keyle@xiaonians-MacBook-Pro  ~  update_xcode_plugins</div><div class="line">Found:</div><div class="line">-<span class="ruby"> Xcode (<span class="number">10.1</span>) [D7881182-AD0<span class="number">0</span>-<span class="number">4</span>C36-A94D-F45FC9B0CF85]: <span class="regexp">/Applications/</span>Xcode.app</span></div><div class="line"></div><div class="line">Plugins:</div><div class="line">-<span class="ruby"> AutoIndentWithSave (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> XToDo (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> RSImageOptimPlugin (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> Alcatraz (<span class="number">1.2</span>.<span class="number">1</span>)</span></div><div class="line">-<span class="ruby"> BBUDebuggerTuckAway (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> Auto-Importer (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> VVDocumenter-Xcode (<span class="number">1.0</span>)</span></div><div class="line">-<span class="ruby"> OMQuickHelp (<span class="number">1.0</span>.<span class="number">1</span>)</span></div><div class="line">-<span class="ruby"> AutoHighlightSymbol (<span class="number">1.1</span>)</span></div><div class="line">-<span class="ruby"> OMColorSense (<span class="number">1.0</span>.<span class="number">1</span>)</span></div><div class="line"></div><div class="line">Updating...</div><div class="line"></div><div class="line">Finished! 🎉</div><div class="line"></div><div class="line">It seems that you have Xcode 8+ installed!</div><div class="line">Some plugins might not work on recent versions of Xcode because of library validation.</div><div class="line">See https://github.com/alcatraz/Alcatraz/issues/475</div><div class="line"></div><div class="line">Run `update_xcode_plugins --unsign` to fix this.</div></pre></td></tr></table></figure></p>
<p>在上面他提升我的某些插件可能会有问题需要使用 <code>update_xcode_plugins –unsign</code> 解决一下。<br>执行这条命令之后我忘记关XCode，按照提示关闭XCode后继续。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> keyle@xiaonians-MacBook-Pro  ~  update_xcode_plugins <span class="comment">--unsign</span></div><div class="line">Looking <span class="keyword">for</span> Xcode...</div><div class="line"></div><div class="line">Unsigning Xcode will make <span class="keyword">it</span> skip library validation allowing <span class="keyword">it</span> <span class="keyword">to</span> load plugins.</div><div class="line">However, an unsigned Xcode presents security risks, <span class="keyword">and</span> will be untrusted <span class="keyword">by</span> both Apple <span class="keyword">and</span> your system.</div><div class="line">This tool will create a backup <span class="keyword">and</span> allow you <span class="keyword">to</span> restore Xcode's signature <span class="keyword">by</span> <span class="built_in">running</span></div><div class="line">$ update_xcode_plugins <span class="comment">--restore</span></div><div class="line"></div><div class="line">Choose which Xcode you would like <span class="keyword">to</span> unsign (use arrows): Xcode (<span class="number">10.1</span>) [Signed]: /Applications/Xcode.app</div><div class="line">Unsign xcodebuild too?: Yes</div><div class="line"></div><div class="line">Unsigning...</div><div class="line"></div><div class="line">* Changing ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/MacOS (will be restored <span class="keyword">after</span>)</div><div class="line">* Restored ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/MacOS</div><div class="line"></div><div class="line">* Changing ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/Developer/usr/bin (will be restored <span class="keyword">after</span>)</div><div class="line">* Restored ownership <span class="keyword">of</span> /Applications/Xcode.app/Contents/Developer/usr/bin</div><div class="line">Finish</div></pre></td></tr></table></figure></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这应该是我安装插件以来最轻松愉快的体验了。</p>
<p><img src="/uploads/QQ20190228-094023@2x.png" alt="看到Window菜单下的PackageManager了"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用XCode写一些C++的测试，遇到一个问题，我升级过XCode所以现在看不到所有的旧插件了，网上找了一圈，需要手动创建证书然后重新对之前的插件进行签名。最后我找到一个插件可以很方便的对之前插件进行恢复。&lt;br&gt;
    
    </summary>
    
      <category term="XCode" scheme="http://vrast.cn/categories/XCode/"/>
    
    
      <category term="Plugins" scheme="http://vrast.cn/tags/Plugins/"/>
    
  </entry>
  
  <entry>
    <title>C# 4.0 - 7.0 新语法特性小结</title>
    <link href="http://vrast.cn/posts/594d3124/"/>
    <id>http://vrast.cn/posts/594d3124/</id>
    <published>2019-02-20T09:53:59.000Z</published>
    <updated>2019-02-26T01:03:34.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇总结一些 C# 4.0 - 7.0的语法特性。 如今都是距离5.xUnity盛行的时代都过去两年多了，该看一看新语法不然要落伍啦。</p>
</blockquote>
<p>UNITY版本与C#版本关系<br>Unity 5.5.4  自带的Mono也可以支持C# 6，在mcs.rsp文件中添加一行：-langversion:6即可。<br>Unity 2017.1 C# 6.0 试验性地支持新脚本运行时。This includes Mono 4.8 and IL2CPP with support for C# 6 and .NET 4.6<br>Unity 2018.1 C# 7.2 </p>
<p>总的来说新特性还是在2018的运行环境下比较稳定，所以建议在2018下再去放开使用。下面列出的特性基本上都可以在2018中使用。不能使用的部分已经做了标注,下面是正文:</p>
<a id="more"></a>
<h1 id="比较重要的一些特性"><a href="#比较重要的一些特性" class="headerlink" title="比较重要的一些特性"></a>比较重要的一些特性</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="comment">//---------静态引用，下面用到此命名空间下的函数可以直接调用---------- </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Test1</span></div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> Random random;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Level &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1</span>_000_000;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Hp =&gt; ++Level;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Program();</div><div class="line">            </div><div class="line">            <span class="comment">//------------新属性赋值--------------</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">            &#123;</div><div class="line">                p.PrintLog(p.Hp);</div><div class="line"><span class="comment">//                运行结果:</span></div><div class="line"><span class="comment">//                1000001</span></div><div class="line"><span class="comment">//                1000002</span></div><div class="line"><span class="comment">//                1000003</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">//------------新异常条件与$字符串拼接--------------</span></div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Test Expection"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception e) when (p.Hp == <span class="number">1000004</span>) <span class="comment">//新增条件设置 可以制定捕捉异常的条件</span></div><div class="line">            &#123;</div><div class="line">                WriteLine</div><div class="line">                (</div><div class="line">                    <span class="keyword">string</span>.Format(<span class="string">$"当前信息<span class="subst">&#123;e.Message&#125;</span>,hp为<span class="subst">&#123;p.Hp&#125;</span>"</span>) <span class="comment">//使用$符号即可使用花括号自定义拼接</span></div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">//------------?.空指判断--------------</span></div><div class="line">            p.PrintLog(p.random?.Next(<span class="number">0</span>,<span class="number">10</span>));<span class="comment">//这行代码并不会执行 因为 random为null ,使用 ?. 来控制当前函数是否执行</span></div><div class="line"></div><div class="line">            </div><div class="line">            <span class="comment">//-------------下面两行是等价的，您可以使用下划线代替参数传入，相应也获取不到变更对象-----------------</span></div><div class="line">            <span class="comment">//p.PrintObject(out var test_p);  现在可以直接在括号内定义一个想要传入的参数</span></div><div class="line">            p.PrintObject(<span class="keyword">out</span> _); </div><div class="line">            </div><div class="line"></div><div class="line">            <span class="comment">//-------局部函数----------</span></div><div class="line">            PrintLog(<span class="string">"直接调用下面的局部函数，使用局部函数优于使用lambda"</span>); <span class="comment">//局部函数并未有代码行数上的优先级</span></div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">PrintLog</span>(<span class="params"><span class="keyword">string</span> content</span>) </span>=&gt; WriteLine(content);</div><div class="line">            </div><div class="line">            <span class="comment">//-------使用return ref 减小开销----------</span></div><div class="line"><span class="comment">//            PrintLog(p.Avg(1,2).ToString());</span></div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 使用 ref 减少值类型的复制   在 C#7.3中实现</span></div><div class="line"><span class="comment">//        public ref float Avg(int a, int b)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//             float _avg = (a + b) / 2.0f;</span></div><div class="line"><span class="comment">//             return ref _avg;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        </div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintObject</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">object</span> obj</span>)</span></div><div class="line">        &#123;</div><div class="line">            obj = <span class="keyword">new</span> Program();</div><div class="line">            WriteLine(<span class="keyword">nameof</span>(obj)); <span class="comment">// 使用 nameof 系统关键字来或者当前变量名</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//简略定义函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintLog</span>(<span class="params"><span class="keyword">int</span>? content</span>) </span>=&gt; WriteLine(content); <span class="comment">//静态引用 System.Console 命名空间，直接调用 Console.WriteLine 简写为 WriteLine</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#元组分开列一下<br>元组和Lua,python,swift里的元组几乎大同小异。但是作为C#的最最重要的新工具还是着重测试一下。主要代码您可以直接参考下面列出的类，其中有一点没有描述，就是关于元组<code>== 运算符 </code> 的计算，他是从左到右依次比对的。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Test1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//-----元组的默认定义与访问方式--------</span></div><div class="line">            <span class="keyword">var</span> tuple_2 = (<span class="string">"content1"</span>,<span class="string">"content2"</span>);</div><div class="line">            Console.WriteLine(tuple_2.Item1 + tuple_2.Item2);</div><div class="line">            </div><div class="line">            <span class="comment">//同样的也可以像给变量起名一般自己定一个"变量名"</span></div><div class="line">            <span class="keyword">var</span> tuple_1 = (str1 : <span class="string">"content1"</span>,str2 : <span class="string">"content2"</span>);</div><div class="line">            Console.WriteLine(tuple_1.str1 + tuple_1.str2);</div><div class="line"></div><div class="line">            <span class="comment">//元组可以直接由函数返回</span></div><div class="line">            <span class="keyword">var</span> method_1 = Program.MethodTest();</div><div class="line">            Console.WriteLine(method_1.a + method_1.b);</div><div class="line">            </div><div class="line">            <span class="comment">//-----元组的解构-------</span></div><div class="line">            <span class="keyword">var</span> testCls = <span class="keyword">new</span> MyClass&#123; A = <span class="number">1</span>,B = <span class="number">2</span>,C = <span class="number">3</span>&#125;;</div><div class="line">            <span class="keyword">var</span>(args1, args2, args3) = testCls;</div><div class="line">            Console.WriteLine(<span class="string">$"当前args1:<span class="subst">&#123;args1&#125;</span>,args2:<span class="subst">&#123;args2&#125;</span>,args3:<span class="subst">&#123;args3&#125;</span>"</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//元组解构的优先级默认如果本类中有实现则执行本类内部实现，如果没有则执行外部，如扩展函数</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b) MethodTest()</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> t = (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> A &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> B &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> C &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        </div><div class="line"><span class="comment">//        public void Deconstruct(out int a,out int b,out int c)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//            a = A;</span></div><div class="line"><span class="comment">//            b = B;</span></div><div class="line"><span class="comment">//            c = C;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extension4Tuple</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Deconstruct</span>(<span class="params"><span class="keyword">this</span> MyClass cls, <span class="keyword">out</span> <span class="keyword">int</span> a, <span class="keyword">out</span> <span class="keyword">int</span> b, <span class="keyword">out</span> <span class="keyword">int</span> c</span>)</span></div><div class="line">        &#123;</div><div class="line">            a = <span class="number">10</span>;</div><div class="line">            b = <span class="number">11</span>;</div><div class="line">            c = <span class="number">12</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tuples" target="_blank" rel="external">微软文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇总结一些 C# 4.0 - 7.0的语法特性。 如今都是距离5.xUnity盛行的时代都过去两年多了，该看一看新语法不然要落伍啦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UNITY版本与C#版本关系&lt;br&gt;Unity 5.5.4  自带的Mono也可以支持C# 6，在mcs.rsp文件中添加一行：-langversion:6即可。&lt;br&gt;Unity 2017.1 C# 6.0 试验性地支持新脚本运行时。This includes Mono 4.8 and IL2CPP with support for C# 6 and .NET 4.6&lt;br&gt;Unity 2018.1 C# 7.2 &lt;/p&gt;
&lt;p&gt;总的来说新特性还是在2018的运行环境下比较稳定，所以建议在2018下再去放开使用。下面列出的特性基本上都可以在2018中使用。不能使用的部分已经做了标注,下面是正文:&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Dispose接口的正确使用方法</title>
    <link href="http://vrast.cn/posts/6de8b164/"/>
    <id>http://vrast.cn/posts/6de8b164/</id>
    <published>2019-02-20T07:27:25.000Z</published>
    <updated>2019-02-21T13:14:24.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们知道在代码里自己写 Dispose 来释放一些资源。但是你真的用对了吗 ？ 本篇介绍一些不容易注意到的 GC 相关知识 。</p>
</blockquote>
<a id="more"></a>
<h1 id="到底什么时候需要使用到-IDispose-？"><a href="#到底什么时候需要使用到-IDispose-？" class="headerlink" title="到底什么时候需要使用到 IDispose ？"></a>到底什么时候需要使用到 IDispose ？</h1><p>当前类中出现 IO 操作。或者其他 跨语言调用,窗口和网络连接 之的非托管资源调用，这时才需要自己是实现一个IDispose 接口。其他的时候你并不需要去实现这样一个接口。我的做法是一般的类继承一个 IReset 接口，这个接口内只包含一个 Reset 函数 .<br>Dispose 接口是一个显示的调用，如果我们没有写这个接口，运行时他会在执行析构函数的时候清理资源。</p>
<h1 id="了解析构函数-终结器"><a href="#了解析构函数-终结器" class="headerlink" title="了解析构函数(终结器)"></a>了解析构函数(终结器)</h1><p>在使用Dispose 接口的同时 你或许同时会用到一个终结器。打个比方 如果你忘记显示调用 Dispose 函数的时候，程序还是会帮你清除非托管资源。</p>
<p>先观察以下析构函数<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Car</span> </div><div class="line">&#123;</div><div class="line">    ~Car()  <span class="comment">// finalizer</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// cleanup statements...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很简单，他等价于下面的代码</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finalize</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">try</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// Cleanup statements...  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">finally</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">base</span>.Finalize();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你应该已经观察到这一行代码被隐式调用了,这行代码的意义是将当前运行时 Finalize 队列中创建一个条目，等待回收器来处理该队列。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">base</span>.Finalize();</div></pre></td></tr></table></figure>
<h1 id="正确的-“Dispose”"><a href="#正确的-“Dispose”" class="headerlink" title="正确的 “Dispose”"></a>正确的 “Dispose”</h1><p>我们再观察下面的代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 这里实现了IDispose中的 Dispose方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//执行资源释放 xxxxxxxx</span></div><div class="line"></div><div class="line">        <span class="comment">//告诉GC此对象的Finalize方法不再需要调用</span></div><div class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~MyClass()</div><div class="line">    &#123;</div><div class="line">        Dispose();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面我们使用using使用这个类</span></div><div class="line"><span class="keyword">using</span>(MyClass s = <span class="keyword">new</span> MyClass())&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>上面我们使用了 <code>GC.SuppressFinalize(this);</code> 函数，他会告诉GC的Finalize队列中移除当前，不必在执行 <code>Finalize()</code></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>在非托管资源操作中才去重写dispose接口，否则使用其他自定义接口去实现 Reset 操作</li>
<li>在非托管资源操作中才去重写析构函数，否则空析构函数也会造成不必要的性能损失</li>
<li>重写dispose接口的同时别忘了重写析构函数</li>
</ol>
<h1 id="文外话"><a href="#文外话" class="headerlink" title="文外话"></a>文外话</h1><p>在 C# 语言里对析构函数与终结器的描述似乎是同一个东西，这让我有一点困惑。我查询了一些论文他们是这样说的。如果你感兴趣也可以看一下</p>
<p>In the C# world the terms “destructor” and “finalizer” seem to be used pretty much interchangeably, which I suspect is because the C# specification describes the non-deterministic cleanup functionality using the word “destructor”, whereas the CLR documentation always uses the word “finalizer”, so within the realms of C# they mean the same thing.</p>
<p>However, in the C++/CLI specification there is a distinction made between the two. It allows both deterministic and non-deterministic cleanup, and uses the term “destructor” for the deterministic functionality and “finalizer” for the non-deterministic functionality:</p>
<p>在C＃世界术语“析构函数”和“终结”似乎要使用pretty多互换，我怀疑是因为C＃规范用字“析构函数”，描述了非确定性的清理功能，而CLR的文档始终使用单词“终结”，所以C＃的领域内，他们的意思是一样的。</p>
<p>然而，在C / CLI规范有两者之间作出区分。它同时允许确定性和非确定性的清理，并使用该确定的功能的非确定性的功能的术语“析构”和“终结”：</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/destructors" target="_blank" rel="external">Microsoft 编程指南</a></p>
<p><a href="http://www.it1352.com/382928.html" target="_blank" rel="external">析构函数和终结器的区别？(The difference between a destructor and a finalizer?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们知道在代码里自己写 Dispose 来释放一些资源。但是你真的用对了吗 ？ 本篇介绍一些不容易注意到的 GC 相关知识 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# language version history</title>
    <link href="http://vrast.cn/posts/d763b1b/"/>
    <id>http://vrast.cn/posts/d763b1b/</id>
    <published>2018-10-08T07:01:13.000Z</published>
    <updated>2018-10-08T06:45:48.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>These are the versions of C# known about at the time of this writing:</p>
</blockquote>
<ul>
<li>C# 1.0 released with .NET 1.0 and VS2002 (January 2002)</li>
<li>C# 1.2 (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call Dispose on IEnumerators which implemented IDisposable. A few other small features.</li>
<li>C# 2.0 released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, iterator blocks</li>
<li>C# 3.0 released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (var), query expressions</li>
<li>C# 4.0 released with .NET 4 and VS2010 (April 2010). Major new features: late binding (dynamic), delegate and interface generic variance, more COM support, named arguments, tuple data type and optional parameters</li>
<li>C# 5.0 released with .NET 4.5 and VS2012 (August 2012). Major features: async programming, caller info attributes. Breaking change: loop variable closure.</li>
<li>C# 6.0 released with .NET 4.6 and VS2015 (July 2015). Implemented by Roslyn. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, await in catch and finally, extension Add methods in collection initializers.</li>
<li>C# 7.0 released with .NET 4.7 and VS2017 (March 2017) Major new features: tuples, ref locals and ref return, pattern matching (including pattern-based switch statements), inline out parameter declarations, local functions, binary literals, digit separators, and arbitrary async returns.</li>
<li>C# 7.1 released with VS2017 v15.3 (August 2017) New features: async main, tuple member name inference, default expression, pattern matching with generics.</li>
<li>C# 7.2 released with VS2017 v15.5 (November 2017) New features: private protected access modifier, Span<t>, aka interior pointer, aka stackonly struct, everything else.</t></li>
<li>C# 7.3 released with VS2017 v15.7 (May 2018). New features: enum, delegate and unmanaged generic type constraints. ref reassignment. Unsafe improvements: stackalloc initialization, unpinned indexed fixed buffers, custom fixed statements. Improved overloading resolution. Expression variables in initializers and queries. == and != defined for tuples. Auto-properties’ backing fields can now be targeted by attributes.</li>
<li>C# 8.0 currently in preview. Expected new features: Non-nullable reference-types, IAsyncEnumerable<t> support, Ranges, and default interface methods.</t></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;These are the versions of C# known about at the time of this writing:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;C# 1.0 released with .NET 1
    
    </summary>
    
      <category term="SCRIPT" scheme="http://vrast.cn/categories/SCRIPT/"/>
    
    
      <category term="C#" scheme="http://vrast.cn/tags/C/"/>
    
  </entry>
  
</feed>
