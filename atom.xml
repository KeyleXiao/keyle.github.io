<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazybones Kill PLAN</title>
  <subtitle>In me the tiger sniffs the rose</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vrast.cn/"/>
  <updated>2017-03-02T12:24:26.000Z</updated>
  <id>http://vrast.cn/</id>
  
  <author>
    <name>keyle xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVC in iOS</title>
    <link href="http://vrast.cn/posts/8779cbe4/"/>
    <id>http://vrast.cn/posts/8779cbe4/</id>
    <published>2017-03-02T10:24:06.000Z</published>
    <updated>2017-03-02T12:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在 C# 里我们常用 .net reflect 类库配合typeof/getType来反射设置函数与字段等等。在iOS里也有这样的功能，比C#的门槛低的多。只要你合乎规范的定义函数与属性字段，就能方便的使用。</p>
</blockquote>
<a id="more"></a>
<h1 id="使用KVC"><a href="#使用KVC" class="headerlink" title="使用KVC"></a>使用KVC</h1><p>下面的函数 我将接通过KVC的接口 setValue forKey &amp;&amp; setValue forKeyPath ，来设置属性 与 调用方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Bar.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    Foo* foo = [[Foo alloc]init];</div><div class="line">    foo.bar = [[Bar alloc]init];</div><div class="line"></div><div class="line">    </div><div class="line">    [foo setValue:<span class="string">@"blah blah"</span> forKey:<span class="string">@"stringOnFoo"</span>];</div><div class="line">    [foo setValue:<span class="string">@"testforkeyle"</span> forKeyPath:<span class="string">@"bar.stringOnBar"</span>];</div><div class="line">    [foo valueForKeyPath:<span class="string">@"Log"</span>];<span class="comment">//Just Test log 直接访问了实例方法</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,foo.bar.stringOnBar); <span class="comment">//testforkeyle</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,foo.stringOnFoo); <span class="comment">//blah blah</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用KVC在便利数组上尤为方便，下面是使用@sum函数直接给数组的price属性求和。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[foo.bar.array valueForKeyPath:<span class="string">@"@sum.price"</span>];</div></pre></td></tr></table></figure>
<h1 id="KVC的其他函数"><a href="#KVC的其他函数" class="headerlink" title="KVC的其他函数"></a>KVC的其他函数</h1><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对于KVC的一些命令 ，如果要操作 NSArray 之类的字典可以方便的调用。类似C#的Linq for Object</span></div><div class="line">@avg</div><div class="line">@count</div><div class="line">@max</div><div class="line">@min</div><div class="line">@sum</div><div class="line">@unionOfArrays/@distinctUnionOfArrays   <span class="comment">//返回一个包含所有数组的数组 / 返回一个不重复的集合元素</span></div><div class="line">@unionOfSets/@distinctUnionOfSets       <span class="comment">//返回一个包含所有集合的集合 / 返回一个不重复的集合元素</span></div><div class="line">@unionOfObjects/@distinctUnionOfObjects <span class="comment">//返回一个包含所有元素的数组 / 返回一个不重复元素的数组</span></div></pre></td></tr></table></figure>
<h1 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h1><ol>
<li>骆驼命名法,不能数字开头</li>
<li>不能包含空格</li>
<li>键必须是ASCII编码的</li>
<li>使用默认的get/set</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 C# 里我们常用 .net reflect 类库配合typeof/getType来反射设置函数与字段等等。在iOS里也有这样的功能，比C#的门槛低的多。只要你合乎规范的定义函数与属性字段，就能方便的使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="KVC" scheme="http://vrast.cn/tags/KVC/"/>
    
  </entry>
  
  <entry>
    <title>AI Design 1</title>
    <link href="http://vrast.cn/posts/d1301104/"/>
    <id>http://vrast.cn/posts/d1301104/</id>
    <published>2017-03-01T14:35:29.000Z</published>
    <updated>2017-03-02T15:24:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我阅读 UNITY5.X AI PROGRAMMING COOKBOOK 的笔记。有好又坏 请酌情阅读，有不当之处还请指出。<br><a id="more"></a></p>
<p>本章主要概述如果让AI动起来。对应到原书也就是第一章节。</p>
<h1 id="使AI移动"><a href="#使AI移动" class="headerlink" title="使AI移动"></a>使AI移动</h1><p>这三个类的工作如下。</p>
<ol>
<li>Agent负责 计算当前帧的移动与下一帧的移动。</li>
<li>AgentBehaviour负责抽象Steering的计算过程。</li>
<li>Steering包含了Agent需要计算的数据。</li>
</ol>
<p>每当需要扩展一个新的移动行为，则只需要增加一个 AgentBehaviour 类型的派生即可。</p>
<h2 id="脚本时序"><a href="#脚本时序" class="headerlink" title="脚本时序"></a>脚本时序</h2><p><img src="/uploads/QQ20170302-223554@2x.jpg" alt="脚本调用频率"><br>所有的脚本按照优先级调用。例如 检测与执行AI的移动的Agent脚本调用最频繁。其他由 AgentBehaviour 派生的脚本次之。</p>
<h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><blockquote>
<p>这里详细介绍了利用 Agent/AgentBehaviour/Steering 三个类进行基础的 AI 结构搭建。当然代码里有一些 Bad Smell ,比如 Steering 类的 new ，每个行为返回一个Steering毫无例外的都会new一次。当然这完全是可以规避的，这里并不作代码优化的讨论 所以只是提到。</p>
</blockquote>
<h3 id="Agent-代理"><a href="#Agent-代理" class="headerlink" title="Agent 代理"></a>Agent 代理</h3><p>Agent 通过 Update 与 LateUpdate 来计算当前帧与下一帧的移动速度角度。<br>其中实际给 GameObject 做位移的代码就只有两句 Translate／Rotate 。</p>
<ul>
<li>Update ：执行当前帧的物体的移动与角度</li>
<li>LateUpdate ：计算下一帧的物体的移动与角度数值</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Agent</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxSpeed;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxAccel;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> orientation;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> rotation;</div><div class="line">    <span class="keyword">public</span> Vector3 velocity;</div><div class="line">    <span class="keyword">protected</span> Steering steering;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        velocity = Vector3.zero;</div><div class="line">        steering = <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetSteering</span> (<span class="params">Steering steering</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.steering = steering;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Vector3 displacement = velocity * Time.deltaTime;</div><div class="line">        orientation += rotation * Time.deltaTime;</div><div class="line">        <span class="comment">// we need to limit the orientation values</span></div><div class="line">        <span class="comment">// to be in the range (0 – 360)</span></div><div class="line">        <span class="keyword">if</span> (orientation &lt; <span class="number">0.0</span>f)</div><div class="line">            orientation += <span class="number">360.0</span>f;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">orientation &gt; <span class="number">360.0</span>f</span>)</span></div><div class="line">            orientation -= <span class="number">360.0</span>f;</div><div class="line">        transform.Translate(displacement, Space.World);</div><div class="line">        transform.rotation = <span class="keyword">new</span> Quaternion();</div><div class="line">        transform.Rotate(Vector3.up, orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">LateUpdate</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        velocity += steering.linear * Time.deltaTime;</div><div class="line">        rotation += steering.angular * Time.deltaTime;</div><div class="line">        <span class="keyword">if</span> (velocity.magnitude &gt; maxSpeed)</div><div class="line">        &#123;</div><div class="line">            velocity.Normalize();</div><div class="line">            velocity = velocity * maxSpeed;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (steering.angular == <span class="number">0.0</span>f)</div><div class="line">        &#123;</div><div class="line">            rotation = <span class="number">0.0</span>f;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (steering.linear.sqrMagnitude == <span class="number">0.0</span>f)</div><div class="line">        &#123;</div><div class="line">            velocity = Vector3.zero;</div><div class="line">        &#125;</div><div class="line">        steering = <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Steering-数据载体"><a href="#Steering-数据载体" class="headerlink" title="Steering 数据载体"></a>Steering 数据载体</h3><p>Steering 承载了代理(Agent)需要计算的原始数据。数据的表现直接会影响到计算的 AgentBehaviour / Agent的计算结果。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Steering</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> angular;</div><div class="line">    <span class="keyword">public</span> Vector3 linear;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Steering</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        angular = <span class="number">0.0</span>f;</div><div class="line">        linear = <span class="keyword">new</span> Vector3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AgentBehaviour-代理行为"><a href="#AgentBehaviour-代理行为" class="headerlink" title="AgentBehaviour 代理行为"></a>AgentBehaviour 代理行为</h3><p>由于 gentBehaviour 是Agent的数据提供方。所以他主要的职责就是派生与扩展。<br>新的类型将会继承自 AgentBehaviour 并且会重写 GetSteering() 函数来丰富表现。<br>接下来都是介绍 AgentBehaviour 脚本派生的行为。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AgentBehaviour</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> GameObject target;</div><div class="line">    <span class="keyword">protected</span> Agent agent;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        agent = gameObject.GetComponent&lt;Agent&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        agent.SetSteering(GetSteering());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Steering <span class="title">GetSteering</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Steering();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="更加智能的移动"><a href="#更加智能的移动" class="headerlink" title="更加智能的移动"></a>更加智能的移动</h2><h3 id="Seek-搜索"><a href="#Seek-搜索" class="headerlink" title="Seek 搜索"></a>Seek 搜索</h3><p>上面说到 AgentBehaviour 代理行为，是可以派生的。我们可以直接重写其 GetSteering 函数，来增加不同的表现。<br>这里干了两件事</p>
<ol>
<li>获取朝向目标的向量</li>
<li>目标朝向目标的向量归一化，乘以当前速度。也就是获得了 朝向目标的速度的向量。</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Seek</span> : <span class="title">AgentBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Steering steering = <span class="keyword">new</span> Steering();</div><div class="line">        steering.linear = target.transform.position - transform.position;</div><div class="line"></div><div class="line">        steering.linear.Normalize();</div><div class="line">        steering.linear = steering.linear * agent.maxAccel;</div><div class="line">        <span class="keyword">return</span> steering;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Purse-追逐"><a href="#Purse-追逐" class="headerlink" title="Purse 追逐"></a>Purse 追逐</h3><p>在 GetSteering() 函数中有这样的逻辑存在。<br>追逐的目标 targetAux ， 所以需要预先计算(预判单位时间内) targetAux 可能到达的位置(这里用target表示)。maxPrediction变量在这里用来控制预判的时间。<br>我们知道 任何数值都需要规范化的 例如常用的 Math.Clamp 函数。我们应该尽量将 maxPrediction 值控制在正常范围之内。</p>
<p>通过 speed &lt;= distance / maxPrediction </p>
<ul>
<li>speed ：为当前追踪的物体真实速度。</li>
<li>distance ：为当前追踪的物体一共走过的距离。</li>
<li>maxPrediction ：预设的预测时间。</li>
</ul>
<blockquote>
<p>这样可以大胆猜测 为当前追踪的物体 正处于匀速 或者 加速中</p>
</blockquote>
<p><code>distance / maxPrediction </code>我们最终得到的 速度 就是物体的 预测速度。我们拿着 预测速度 与 speed 做一个比较。如果预测的速度小于真实速度，那么这个预测值出乎意料的错误。我们需要重新计算一个更真实合理的预测值。<br><code>prediction = distance / speed; </code> 这里计算了一个中规中矩的预测值。<br>最终通过 <code>targetAgent.velocity * prediction </code>获取 预测时间 内运动的距离。</p>
<blockquote>
<p>对于刚才的猜测结果，有一种条件下是有问题的，那就是当 当前追踪的物体 突然静止／或者本身就是静止的。由于脚本执行的时序问题，追逐到物体的时候会直接穿插过去(追过头了)，然后接着反复运动。这里就要用到 Arraying 脚本了，后文就会介绍到。</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pursue</span> : <span class="title">Seek</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxPrediction;</div><div class="line">    <span class="keyword">private</span> GameObject targetAux;</div><div class="line">    <span class="keyword">private</span> Agent targetAgent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           <span class="keyword">base</span>.Awake();</div><div class="line">           targetAgent = target.GetComponent&lt;Agent&gt;();</div><div class="line">           targetAux = target;</div><div class="line">           target = <span class="keyword">new</span> GameObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           Destroy(targetAux);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">           Vector3 direction = targetAux.transform.position - transform.position;</div><div class="line">           <span class="keyword">float</span> distance = direction.magnitude;</div><div class="line">           <span class="keyword">float</span> speed = agent.velocity.magnitude;</div><div class="line">           <span class="keyword">float</span> prediction;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (speed &lt;= distance / maxPrediction)</div><div class="line">               prediction = maxPrediction;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               prediction = distance / speed;</div><div class="line">           target.transform.position = targetAux.transform.position;</div><div class="line">           target.transform.position += targetAgent.velocity * prediction;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">base</span>.GetSteering();</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Flee-逃离"><a href="#Flee-逃离" class="headerlink" title="Flee 逃离"></a>Flee 逃离</h3><p>顾名思义 Flee 肯定和 Seek 相反。事实也正是如此，获取了与目标相反方向的速度的向量。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Flee</span> : <span class="title">AgentBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Steering steering = <span class="keyword">new</span> Steering();</div><div class="line">        steering.linear = transform.position - target.transform.position;</div><div class="line">        steering.linear.Normalize();</div><div class="line">        steering.linear = steering.linear * agent.maxAccel;</div><div class="line">        <span class="keyword">return</span> steering;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Evade-规避"><a href="#Evade-规避" class="headerlink" title="Evade 规避"></a>Evade 规避</h3><p>规避(Evade) 代码与 Pursue 代码一致。在 Flee/Seek 层，二者做了区分。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Evade</span> : <span class="title">Flee</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> maxPrediction;</div><div class="line">    <span class="keyword">private</span> GameObject targetAux;</div><div class="line">    <span class="keyword">private</span> Agent targetAgent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">base</span>.Awake();</div><div class="line">        targetAgent = target.GetComponent&lt;Agent&gt;();</div><div class="line">        targetAux = target;</div><div class="line">        target = <span class="keyword">new</span> GameObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Steering <span class="title">GetSteering</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Vector3 direction = targetAux.transform.position - transform.position;</div><div class="line">        <span class="keyword">float</span> distance = direction.magnitude;</div><div class="line">        <span class="keyword">float</span> speed = agent.velocity.magnitude;</div><div class="line">        <span class="keyword">float</span> prediction;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (speed &lt;= distance / maxPrediction)</div><div class="line">            prediction = maxPrediction;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            prediction = distance / speed;</div><div class="line">        target.transform.position = targetAux.transform.position;</div><div class="line">        target.transform.position += targetAgent.velocity * prediction;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.GetSteering();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span> (<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Destroy(targetAux);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>本篇到此结束，本文主要介绍了 AI 行为的基础结构 与 其何如派生出来行为。下一篇会着重介绍派生出的其他行为与详细算法(实现)。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列是我阅读 UNITY5.X AI PROGRAMMING COOKBOOK 的笔记。有好又坏 请酌情阅读，有不当之处还请指出。&lt;br&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="AI" scheme="http://vrast.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Properties in iOS</title>
    <link href="http://vrast.cn/posts/f9b2637/"/>
    <id>http://vrast.cn/posts/f9b2637/</id>
    <published>2017-02-28T07:40:00.000Z</published>
    <updated>2017-02-28T11:05:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>翻译一篇iOS平台OC语法中的Properties用法及说明 <a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">原文地址</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><p>一个Object’s的属性可以让其他的Objects来更改它的状态。但是，一个好的面向对对象程序设计中，不可以直接的访问到这个object的状态。作为代替。访问方法(getter &amp; setters)用来抽象与底层的数据交互。</p>
<p><img src="/uploads/accessor-methods.jpg" alt="通过属性操作的方法交互"></p>
<p>@property 命令的目标是通过生成操作函数来更简单的访问。它允许你在语义级别指定公共属性的行为，并且会为你处理实现细节。<br>该模块概括了允许您更改getter和setter行为的各种属性。这些属性中的一些确定属性如何处理其底层内存。所以这个模块也可以作为一个介绍内存管理的实例在Objective-C。 有关更详细的讨论，<a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">请参阅内存管理</a>。</p>
<h1 id="property-命令"><a href="#property-命令" class="headerlink" title="@property 命令"></a>@property 命令</h1><p>首先，让我们看看当我们使用@property指令时发生了什么。思考接下来的 car class的接口与相关实现。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> running;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></div><div class="line"></div><div class="line"><span class="keyword">@synthesize</span> running = _running;    <span class="comment">// Optional for Xcode 4.4+</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>编译器会生成 running 属性的 getter &amp; setter 方法。他默认的命名惯例是使用属性本身(名字)作为getter，setter使用set作为前缀并且使用下划线在这个实例变量上。就像是这样：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)running &#123;</div><div class="line">    <span class="keyword">return</span> _running;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setRunning:(<span class="built_in">BOOL</span>)newValue &#123;</div><div class="line">    _running = newValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用 @property 命令声明属性之后，你可以调用这些方法，就像它已经包含在你的接口与实现类中一样。你可以在 Car.m 重写它们 支持制定 getter/setters.但是他将要强制使用 @synthesize 命令。然而，自从 @property 属性使你在抽象级别上做这些，你很少需要定制访问接口。<br>通过点表示法访问的属性被转换为幕后的上述访问器方法，因此，当您从其中读取值时，下面的 honda.running代码实际上调用setRunning：当你为它赋值和运行时从它读取：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        honda.running = <span class="literal">YES</span>;                <span class="comment">// [honda setRunning:YES]</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, honda.running);        <span class="comment">// [honda running]</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要更改生成的访问器的行为，可以在@property 指令后面的括号中指定属性。 本模块的其余部分介绍可用的属性。</p>
<h1 id="getter-与-setter-属性"><a href="#getter-与-setter-属性" class="headerlink" title="getter= 与 setter= 属性"></a>getter= 与 setter= 属性</h1><p>如果你不喜欢 @property 的命名惯例，你可以使用 getter= and setter= 属性，更改 getter/setter 的方法名。一个常见的用例是 Boolean 属性，它的getter常用前缀是 is。尝试在下面的 Car.h 中更改属性的声明。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isRunning) <span class="built_in">BOOL</span> running;</div></pre></td></tr></table></figure>
<p>现在这个生成的访问器叫 isRunning 与 setRunning. 注意这个访问器 他的公开属性仍旧叫 running 。这是你为什么最好要使用点语法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Car *honda = [[Car alloc] init];</div><div class="line">honda.running = <span class="literal">YES</span>;                <span class="comment">// [honda setRunning:YES]</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, honda.running);        <span class="comment">// [honda isRunning]</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [honda running]);      <span class="comment">// Error: method no longer exists</span></div></pre></td></tr></table></figure>
<p>这些都是只使用一个参数的属性（存取器方法名称） - 其他的都是布尔标志。</p>
<h1 id="The-readonly-Attribute"><a href="#The-readonly-Attribute" class="headerlink" title="The readonly Attribute"></a>The readonly Attribute</h1><p>readonly属性是最简单去设置一个属性的只读。他删除了 setter 方法，阻止点语法进行分配。但是 getter 方法不受影响。在这个例子里面。我们像下面这样更改 Car 的接口。注意 你可以使用多个属性 用逗号 分隔。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isRunning, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> running;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startEngine;</div><div class="line">- (<span class="keyword">void</span>)stopEngine;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>而不是让其他对象更改running属性，我们将通过startEngine和stopEngine方法在内部进行设置。 相应的实现可以在下面找到。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startEngine &#123;</div><div class="line">    _running = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)stopEngine &#123;</div><div class="line">    _running = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>上面直到这一点，属性真的只是方便的快捷方式，让我们避免编写样板getter和setter方法。 剩余的属性不会出现这种情况，这会显着改变属性的行为。 它们也只适用于存储Objective-C对象（与原始C数据类型相反）的属性。</p>
<h1 id="The-nonatomic-Attribute"><a href="#The-nonatomic-Attribute" class="headerlink" title="The nonatomic Attribute"></a>The nonatomic Attribute</h1><p>原子性与属性在线程环境中的行为有关。当你在多于一个线程的情况下可能出现同时读写一个属性。这意味着读写可能被另外一个操作打断。可能损坏数据。<br>原子属性锁定底层对象以防止这种情况发生(google翻译这里)，以防止发生这种情况，保证get或set操作使用完整的值。 然而，重要的是要理解这只是线程安全的一个方面 - 使用原子属性并不一定意味着你的代码是线程安全的。<br>使用 @property 声明的属性在默认情况下是原子的，这会产生一些开销。 所以，如果你不是在多线程环境（或者你正在实现自己的线程安全），你会想要覆盖这个行为与 nonatomic 属性，如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *model;</div></pre></td></tr></table></figure>
<p>还有一个小的，实际的警告与原子属性。 原子属性的访问器必须是生成的或用户定义的。 只有非原子属性允许您将合成存取器与自定义存取器混合和匹配。 你可以通过从上面的代码中删除非原子并在Car.m中添加自定义getter来看到这一点。</p>
<h1 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h1><p>在任何OOP语言中，对象驻留在计算机的内存中，并且尤其是在移动设备上 - 这是一种稀缺的资源。 内存管理系统的目标是通过以有效的方式创建和销毁对象来确保程序不占用任何更多的空间。</p>
<p>许多语言通过垃圾回收实现这一点，但Objective-C使用一种更有效的替代方法称为对象所有权。 当你开始与一个对象进行交互时，你会说它拥有该对象，这意味着只要你使用它就保证存在。 当你完成它，你放弃所有权，如果对象没有其他所有者，操作系统销毁对象和释放底层内存。</p>
<p><img src="/uploads/object-ownership.jpg" alt="所有关系"></p>
<p>随着 <a href="http://rypress.com/tutorials/objective-c/memory-management.html#automatic-reference-counting" target="_blank" rel="external">自动引用计数</a> 的出现，编译器自动管理所有对象所有权。 在大多数情况下，这意味着你永远不会担心内存管理系统如何工作。 但是，你必须了解@property的strong，week和copy属性，因为他们告诉编译器应该有什么样的关系对象。</p>
<h1 id="The-strong-Attribute"><a href="#The-strong-Attribute" class="headerlink" title="The strong Attribute"></a>The strong Attribute</h1><p>strong属性会为分配给属性的任何对象创建一个拥有关系。 这是所有对象属性的隐式行为，这是一个安全的默认值，因为它确保值存在，只要它被分配给属性。<br>让我们通过创建另一个名为Person的类来看看这是如何工作的。 它的接口只是声明一个name属性：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>实现如下所示。 它使用由@property生成的默认访问器。 它还重写了NSObject的description方法，该方法返回对象的字符串表示形式。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>接下来，让我们添加一个Person属性到Car类。 为Car.h更改为以下内容。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *model;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Person *driver;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>然后，思考main.m的以下迭代：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Person *john = [[Person alloc] init];</div><div class="line">        john.name = <span class="string">@"John"</span>;</div><div class="line">        </div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        honda.model = <span class="string">@"Honda Civic"</span>;</div><div class="line">        honda.driver = john;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ is driving the %@"</span>, honda.driver, honda.model);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 driver 是一个 strong 关联，honda对象拥有john的所有权。 这确保它将有效，只要 honda 需要它。</p>
<h1 id="The-weak-Attribute"><a href="#The-weak-Attribute" class="headerlink" title="The weak Attribute"></a>The weak Attribute</h1><p>大多数时候，strong属性直观地是你想要的对象属性。 然而，如果我们需要一个从 driver 到他驾驶的Car对象的引用，强引用会产生问题。 首先，让我们为Person.h添加一个car属性：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Car</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Car *car;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>@class Car行是Car类的提前声明。 这就像告诉编译器，“相信我，Car类存在，所以不要尝试找到它现在。”我们必须这样做，而不是我们通常的#import语句，因为Car还导入 Person.h，我们将 有无限循环的导入。 （编译器不喜欢无尽循环。）接下来，在honda.driver分配之后，将下面的行添加到main.m：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">honda.driver = john;</div><div class="line">john.car = honda;       <span class="comment">// Add this line</span></div></pre></td></tr></table></figure>
<p>现在我们有一个honda到john的所属关系以及另外一个所有关系即john到honda。所以内存管理系统不能销毁它们，如果它们长久的互相需要。</p>
<p><img src="/uploads/retain-cycle.jpg" alt="在Car 与 Person之间循环依赖"></p>
<p>它称之为 循环依赖 ，这就是内存泄漏的出处。内存泄漏是不好的。幸运的是，很容易修复这个问题，只需要在属性中添加 weak reference 。在 Person.h ，修改 car 的声明如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) Car *car;</div></pre></td></tr></table></figure>
<p>weak 属性给 car 创建了一个无所有者的关系。它允许 john 持有一个 honda 的引用 在循环依赖期间。但是，这也意味着 john还持有引用的时候 honda 可能被销毁。如果发生了，weak 属性将会方便的将 car 设置为 nil 来避免 dangling（悬挂指针） 指针。</p>
<p>这里我说明一下悬挂指针，文中没有详细说明：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">如果指针在被释放后，仍然引用原来的内存，就叫做悬挂指针。该指针不指向任何有效的对象。有时称为过早释放。</div><div class="line"></div><div class="line">使用悬挂指针能导致几种不同的问题，包括：</div><div class="line"></div><div class="line">不可预知的行为，如果访问内存</div><div class="line">分段错误，当内存不再是可访问</div><div class="line">潜在的安全风险</div><div class="line">如下情况将产生这些错误：</div><div class="line">释放后访问内存</div><div class="line">一个指针返回到前一个函数调用的自动变量</div></pre></td></tr></table></figure></p>
<p><img src="/uploads/weak-reference.jpg" alt="Person对car持有若引用"></p>
<p>弱属性的常见用例是父子数据结构。 按照惯例，父对象应该使用它的子保持一个强引用，并且子应该存储一个弱引用返回父对象。 弱引用也是代理设计模式的固有部分。要去除的一点是，两个对象应该永远不会有强烈的对方引用。 弱属性使得可以维持周期性关系而不创建保留周期。</p>
<h1 id="The-copy-Attribute"><a href="#The-copy-Attribute" class="headerlink" title="The copy Attribute"></a>The copy Attribute</h1><p>copy属性是strong的替代。 它不是获取现有对象的所有权，而是创建一个分配给该属性的副本，然后拥有该属性的所有权。 只有符合NSCopying协议的对象才能使用此属性。</p>
<p>表示值（与连接或关系相反）的属性是复制的良好候选。 例如，开发人员通常复制NSString属性，而不是强烈引用它们：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Car.h</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *model;</div></pre></td></tr></table></figure>
<p>这里还是看原文吧。<br>Now, Car will store a brand new instance of whatever value we assign to model. If you’re working with mutable values, this has the added perk of freezing the object at whatever value it had when it was assigned. This is demonstrated below:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        Car *honda = [[Car alloc] init];</div><div class="line">        <span class="built_in">NSMutableString</span> *model = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"Honda Civic"</span>];</div><div class="line">        honda.model = model;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, honda.model);</div><div class="line">        [model setString:<span class="string">@"Nissa Versa"</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, honda.model);            <span class="comment">// Still "Honda Civic"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NSMutableString是NSString的子类，可以直接编辑。 如果model属性没有创建原始实例的副本，我们将能够在第二个NSLog()输出中看到更改的字符串（Nissan Versa）。</p>
<h1 id="Other-Attributes"><a href="#Other-Attributes" class="headerlink" title="Other Attributes"></a>Other Attributes</h1><p>上面的 @property 属性是现代 Objective-C应用程序（iOS 5+）所需要的，但是你可能会在旧的库或文档中遇到其他一些属性。</p>
<h1 id="The-retain-Attribute"><a href="#The-retain-Attribute" class="headerlink" title="The retain Attribute"></a>The retain Attribute</h1><p>retain属性是strong的手动保留版本，它具有完全相同的效果：声明所分配的值的所有权。 您不应在自动引用计数环境中使用此引用。</p>
<h1 id="The-unsafe-unretained-Attribute"><a href="#The-unsafe-unretained-Attribute" class="headerlink" title="The unsafe_unretained Attribute"></a>The unsafe_unretained Attribute</h1><p>具有unsafe_unretained属性的属性的行为类似于weak属性，但是如果引用的对象被销毁，它们不会自动将其值设置为nil。 你应该需要使用unsafe_unretained的唯一原因是使你的类与不支持weak属性的代码兼容。</p>
<h1 id="The-assign-Attribute"><a href="#The-assign-Attribute" class="headerlink" title="The assign Attribute"></a>The assign Attribute</h1><p>具有unsafe_unretained属性的属性的行为类似于weak属性，但是如果引用的对象被销毁，它们不会自动将其值设置为nil。 你应该需要使用unsafe_unretained的唯一原因是使你的类与不支持weak属性的代码兼容。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>此模块介绍了所有的@property属性选择，我们希望你感觉相对舒服的修改生成的访问器方法的行为。 请记住，所有这些属性的目标是帮助您通过让编译器自动确定其表示方式来关注需要记录的数据。 它们总结如下。</p>
<p>Attribute   Description<br>getter= Use a custom name for the getter method.<br>setter= Use a custom name for the setter method.<br>readonly    Don’t synthesize a setter method.<br>nonatomic   Don’t guarantee the integrity of accessors in a multi-threaded environment. This is more efficient than the default atomic behavior.<br>strong  Create an owning relationship between the property and the assigned value. This is the default for object properties.<br>weak    Create a non-owning relationship between the property and the assigned value. Use this to prevent retain cycles.<br>copy    Create a copy of the assigned value instead of referencing the existing instance.<br>Now that we’ve got properties out of the way, we can take an in-depth look at the other half of Objective-C classes: methods. We’ll explore everything from the quirks behind their naming conventions to dynamic method calls.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译一篇iOS平台OC语法中的Properties用法及说明 &lt;a href=&quot;http://rypress.com/tutorials/objective-c/properties&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://vrast.cn/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://vrast.cn/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>在MAC平台体验DotnetCore</title>
    <link href="http://vrast.cn/posts/1f2cd62/"/>
    <id>http://vrast.cn/posts/1f2cd62/</id>
    <published>2017-01-15T03:37:45.000Z</published>
    <updated>2017-01-15T04:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这两天看到有朋友讨论 微软的 .netCore 这个跨平台项目。觉得有点意思，然后简单的了解一下。随后便有了这一篇博文。本文 记录在MACOS下使用 .netCore 开发所需准备与基础知识。</p>
</blockquote>
<a id="more"></a>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="下载所需环境"><a href="#下载所需环境" class="headerlink" title="下载所需环境"></a>下载所需环境</h2><p><img src="/uploads/QQ20170115-0@2x.jpg" alt=""><br>这里列出的所有安装命令可以在项目主页找到。<a href="https://www.microsoft.com/net/core#macos" target="_blank" rel="external">&gt;&gt; dotnetCore 主页 &lt;&lt;</a> 这里可以找到最新的 SDK 安装包。如果是使用的 MAC 直接使用 homeBrew 进行下载。</p>
<h3 id="Mac安装前准备"><a href="#Mac安装前准备" class="headerlink" title="Mac安装前准备"></a>Mac安装前准备</h3><p>这里需要安装并且配置 openssl 。如果配置完毕请看下一步。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install openssl</div><div class="line">mkdir -p /usr/local/<span class="class"><span class="keyword">lib</span></span></div><div class="line">ln -s /usr/local/opt/openssl/<span class="class"><span class="keyword">lib</span>/<span class="title">libcrypto</span>.1.0.0.<span class="title">dylib</span> /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">lib</span>/</span></div><div class="line">ln -s /usr/local/opt/openssl/<span class="class"><span class="keyword">lib</span>/<span class="title">libssl</span>.1.0.0.<span class="title">dylib</span> /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">lib</span>/</span></div></pre></td></tr></table></figure>
<h2 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h2><p><img src="/uploads/QQ20170115-1@2x.jpg" alt="安装SDK"></p>
<h1 id="DotnetCore-Command"><a href="#DotnetCore-Command" class="headerlink" title="DotnetCore Command"></a>DotnetCore Command</h1><p>核心的命令如下。 其中 restore 命令必须要被执行至少一次。如果被你更改或第一次运行 会自动下载或添加所需依赖。这里做的十分的智能。如果是 VSCode 环境则会主动提示需要执行 restore 命令。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Common Commands:</div><div class="line">  new           Initialize <span class="selector-tag">a</span> basic <span class="selector-class">.NET</span> project ／ 创建一个基础项目</div><div class="line">  restore       Restore dependencies specified <span class="keyword">in</span> the <span class="selector-class">.NET</span> project ／ 初始化依赖项目，会重新检查配置中的依赖项。</div><div class="line">  build         Builds <span class="selector-tag">a</span> <span class="selector-class">.NET</span> project ／ 编译项目</div><div class="line">  publish       Publishes <span class="selector-tag">a</span> <span class="selector-class">.NET</span> project <span class="keyword">for</span> deployment (including the runtime) ／ 发布项目</div><div class="line">  run           Compiles and immediately executes <span class="selector-tag">a</span> <span class="selector-class">.NET</span> project ／ 在Launcher配置的输出环境中运行项目</div><div class="line">  test          Runs unit tests using the test runner specified <span class="keyword">in</span> the project ／ 运行单元测试</div><div class="line">  pack          Creates <span class="selector-tag">a</span> NuGet package ／ 创建一个NuGet包</div></pre></td></tr></table></figure>
<h2 id="在-Terminal-中-运行-HelloWorld"><a href="#在-Terminal-中-运行-HelloWorld" class="headerlink" title="在 Terminal 中 运行 HelloWorld"></a>在 Terminal 中 运行 HelloWorld</h2><p>我们在控制台中使用 DotnetCore 的命令，创建一个 HelloWorld 程序。用来检测环境是否 配置完毕。</p>
<p>流程如下：</p>
<ol>
<li>输入此命令创建演示用文件夹 <code>mkdir hwapp &amp;&amp; cd hwapp </code></li>
<li>创建基础项目<br><img src="/uploads/QQ20170115-2@2x.jpg" alt=""></li>
<li>使用dotnet restore命令初始化依赖<br><img src="/uploads/QQ20170115-3@2x.jpg" alt=""></li>
<li>使用dotnet run命令执行此项目<br><img src="/uploads/QQ20170115-4@2x.jpg" alt=""></li>
</ol>
<h1 id="关于-VSCode"><a href="#关于-VSCode" class="headerlink" title="关于 VSCode"></a>关于 VSCode</h1><p>本来这一章我是想介绍下AST.NET项目的。<br>但是这个东西要使用VSCode开发的话还是不现实。主要的原因是需要复杂的配置，不智能化。添加一个 Controller 都很麻烦。<br>所有的 command 都只能通过配置文件进行，还要手动校验那些配置是可用的 哪些需要更改。如果你是第一次使用vscode肯定要懵圈。<br>如果在 visualstudio 上使用直接可以支持发布到某个特定的平台。一个按钮为你省去所有烦恼。</p>
<blockquote>
<p>如果有时间花在配置所有的运行环境，我还是宁愿花时间想想 如何优化自己的代码 。</p>
</blockquote>
<h1 id="关于-VisualStudio-for-Mac"><a href="#关于-VisualStudio-for-Mac" class="headerlink" title="关于 VisualStudio for Mac"></a>关于 VisualStudio for Mac</h1><p>前一阵微软弄了个 visualstudio for mac .未来有很大可能会将 .netcore集成到这个 IDE 上。<br>当然我已经试用过了这个 IDE .这个工具其实就是 XamarinStudio 拿来改的。<br>我用XamarinStudio已经用了快3年了。但是没有见过如此不好用的 XamarinStudio FOR VisualStudio 。<br>举个例子 ： 我使用 tab 键 自动完成代码的时候，居然不能识别我正在编辑的字段，丢失了智能提示。<br>希望未来有改善的一天吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两天看到有朋友讨论 微软的 .netCore 这个跨平台项目。觉得有点意思，然后简单的了解一下。随后便有了这一篇博文。本文 记录在MACOS下使用 .netCore 开发所需准备与基础知识。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DotNetCore" scheme="http://vrast.cn/categories/DotNetCore/"/>
    
    
      <category term="微软跨平台" scheme="http://vrast.cn/tags/%E5%BE%AE%E8%BD%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>MD5withRSA In C#</title>
    <link href="http://vrast.cn/posts/f773f5f3/"/>
    <id>http://vrast.cn/posts/f773f5f3/</id>
    <published>2017-01-12T03:44:52.000Z</published>
    <updated>2017-01-12T13:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本章记录关于Java MD5withRSA加密算法的C#实现。由于C#不提供MD5withRSA的内置实现，所以必须依赖其他的第三方库。这里提供一个简单的sample来演绎[bouncycastle]的加密库。</p>
</blockquote>
<a id="more"></a>
<h1 id="MD5withRSA是什么？"><a href="#MD5withRSA是什么？" class="headerlink" title="MD5withRSA是什么？"></a>MD5withRSA是什么？</h1><ol>
<li>先使用MD5加密(不可逆转) 生成密文。</li>
<li>使用RSA继续加密 上一步的密文。</li>
</ol>
<h2 id="MD5是什么？"><a href="#MD5是什么？" class="headerlink" title="MD5是什么？"></a>MD5是什么？</h2><p>Message Digest Algorithm MD5（中文名为消息摘要算法第五版）为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护。该算法的文件号为RFC 1321（R.Rivest,MIT Laboratory for Computer Science and RSA Data Security Inc. April 1992）。 –<a href="http://baike.baidu.com/link?url=hNIwfVhJGcU5tD8CAqbon1Tc9WsA5YYUcYRR0mYa6F8PgsHOwDmswbrhmszud3DmHllrmm0DfHAAevsbMLXKT_" target="_blank" rel="external">来自百度百科</a></p>
<h2 id="RSA是什么"><a href="#RSA是什么" class="headerlink" title="RSA是什么?"></a>RSA是什么?</h2><p>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。 –<a href="http://baike.baidu.com/link?url=B_ViRIN0m4B7JUU_v4nrz1o78Al5N0KSRofAUZmKgWlR3pfQMr1K9_BDbP1vxlG3700dSk1gnjf7PqgPhJUbPH660i5vMi-Ysuv-RXPjhxnRan7OPzSlRJWXsWbOQT_oOgDGjDnFQ1l2qJJu2NPKZa" target="_blank" rel="external">来自百度百科</a></p>
<h1 id="MD5withRSA-的使用场景"><a href="#MD5withRSA-的使用场景" class="headerlink" title="MD5withRSA 的使用场景"></a>MD5withRSA 的使用场景</h1><p>如果你在百度上搜索 MD5withRSA 恐怕搜到最多的就是关于建行支付的。对的，这个加密算法常用与支付阶段。主要用途是防篡改。一般来说传递明文 可能被黑客从传输阶段拦截，篡改，此时我们用私钥将MD5加密后的密文再加密与明文一起发送。服务器用公匙将密文解密此时得到md5的密文，然后将明文用md5加密得到密文，匹配这两个密文。如果一致则消息是未被篡改的。</p>
<h1 id="使用-BouncyCastle-Crypto-dll-演绎签名与验证签名"><a href="#使用-BouncyCastle-Crypto-dll-演绎签名与验证签名" class="headerlink" title="使用 BouncyCastle.Crypto.dll 演绎签名与验证签名"></a>使用 BouncyCastle.Crypto.dll 演绎签名与验证签名</h1><h2 id="加密支持列表"><a href="#加密支持列表" class="headerlink" title="加密支持列表"></a>加密支持列表</h2><p>Current feature list:</p>
<p>Generation and parsing of PKCS-12 files.<br>X.509: Generators and parsers for V1 and V3 certificates, V2 CRLs and attribute certificates.<br>PBE algorithms supported by PbeUtilities: PBEwithMD2andDES-CBC, PBEwithMD2andRC2-CBC, PBEwithMD5andDES-CBC, PBEwithMD5andRC2-CBC, PBEwithSHA1andDES-CBC, PBEwithSHA1andRC2-CBC, PBEwithSHA-1and128bitRC4, PBEwithSHA-1and40bitRC4, PBEwithSHA-1and3-keyDESEDE-CBC, PBEwithSHA-1and2-keyDESEDE-CBC, PBEwithSHA-1and128bitRC2-CBC, PBEwithSHA-1and40bitRC2-CBC, PBEwithHmacSHA-1, PBEwithHmacSHA-224, PBEwithHmacSHA-256, PBEwithHmacRIPEMD128, PBEwithHmacRIPEMD160, and PBEwithHmacRIPEMD256.<br>Signature algorithms supported by SignerUtilities: MD2withRSA, MD4withRSA, MD5withRSA, RIPEMD128withRSA, RIPEMD160withECDSA, RIPEMD160withRSA, RIPEMD256withRSA, SHA-1withRSA, SHA-224withRSA, SHA-256withRSAandMGF1, SHA-384withRSAandMGF1, SHA-512withRSAandMGF1, SHA-1withDSA, and SHA-1withECDSA.<br>Symmetric key algorithms: AES, Blowfish, Camellia, CAST5, CAST6, ChaCha, DES, DESede, GOST28147, HC-128, HC-256, IDEA, ISAAC, Noekeon, RC2, RC4, RC5-32, RC5-64, RC6, Rijndael, Salsa20, SEED, Serpent, Skipjack, TEA/XTEA, Threefish, Tnepres, Twofish, VMPC and XSalsa20.<br>Symmetric key modes: CBC, CFB, CTS, GOFB, OFB, OpenPGPCFB, and SIC (or CTR).<br>Symmetric key paddings: ISO10126d2, ISO7816d4, PKCS-5/7, TBC, X.923, and Zero Byte.<br>Asymmetric key algorithms: ElGamal, DSA, ECDSA, NaccacheStern and RSA (with blinding).<br>Asymmetric key paddings/encodings: ISO9796d1, OAEP, and PKCS-1.<br>AEAD block cipher modes: CCM, EAX, GCM and OCB.<br>Digests: GOST3411, Keccak, MD2, MD4, MD5, RIPEMD128, RIPEMD160, RIPEMD256, RIPEMD320, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA3, Tiger, and Whirlpool.<br>XOFs: SHAKE.<br>Signer mechanisms: DSA, ECDSA, ECGOST3410, ECNR, GOST3410, ISO9796d2, PSS, RSA, X9.31-1998.<br>Key Agreement: Diffie-Hellman, EC-DH, EC-MQV, J-PAKE, SRP-6a.<br>Macs: CBCBlockCipher, CFBBlockCipher, CMAC, GMAC, GOST28147, HMac, ISO9797 Alg. 3, Poly1305, SipHash, SkeinMac, VMPCMAC.<br>PBE generators: PKCS-12, and PKCS-5 - schemes 1 and 2.<br>OpenPGP (RFC 4880)<br>Cryptographic Message Syntax (CMS, RFC 3852), including streaming API.<br>Online Certificate Status Protocol (OCSP, RFC 2560).<br>Time Stamp Protocol (TSP, RFC 3161).<br>TLS/DTLS client/server up to version 1.2, with support for the most common ciphersuites and extensions, and many less common ones. Non-blocking API available.<br>Elliptic Curve Cryptography: support for generic F2m and Fp curves, high-performance custom implementations for many standardized curves.<br>Reading/writing of PEM files, including RSA and DSA keys, with a variety of encryptions.<br>PKIX certificate path validation</p>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> MD5withRSA Signing</span></div><div class="line"><span class="comment"><span class="doctag">///</span> https://www.vrast.cn</span></div><div class="line"><span class="comment"><span class="doctag">///</span> keyle_xiao 2017.1.12</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title">MD5withRSASigning</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> Encoding encoding = Encoding.UTF8;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">string</span> SignerSymbol = <span class="string">"MD5withRSA"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MD5withRSASigning</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MD5withRSASigning</span>(<span class="params">Encoding e, <span class="keyword">string</span> s</span>)</span></div><div class="line">	&#123;</div><div class="line">		encoding = e;</div><div class="line">		SignerSymbol = s;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> AsymmetricKeyParameter <span class="title">CreateKEY</span>(<span class="params"><span class="keyword">bool</span> isPrivate, <span class="keyword">string</span> key</span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">byte</span>[] keyInfoByte = Convert.FromBase64String(key);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (isPrivate)</div><div class="line">			<span class="keyword">return</span> PrivateKeyFactory.CreateKey(keyInfoByte);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> PublicKeyFactory.CreateKey(keyInfoByte);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Sign</span>(<span class="params"><span class="keyword">string</span> content, <span class="keyword">string</span> privatekey</span>)</span></div><div class="line">	&#123;</div><div class="line">		ISigner sig = SignerUtilities.GetSigner(SignerSymbol);</div><div class="line"></div><div class="line">		sig.Init(<span class="literal">true</span>, CreateKEY(<span class="literal">true</span>, privatekey));</div><div class="line"></div><div class="line">		<span class="keyword">var</span> bytes = encoding.GetBytes(content);</div><div class="line"></div><div class="line">		sig.BlockUpdate(bytes, <span class="number">0</span>, bytes.Length);</div><div class="line">		<span class="keyword">byte</span>[] signature = sig.GenerateSignature();</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">/* Base 64 encode the sig so its 8-bit clean */</span></div><div class="line">		<span class="keyword">var</span> signedString = Convert.ToBase64String(signature);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> signedString;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Verify</span>(<span class="params"><span class="keyword">string</span> content, <span class="keyword">string</span> signData, <span class="keyword">string</span> publickey</span>)</span></div><div class="line">	&#123;</div><div class="line">		ISigner signer = SignerUtilities.GetSigner(SignerSymbol);</div><div class="line"></div><div class="line">		signer.Init(<span class="literal">false</span>, CreateKEY(<span class="literal">false</span>, publickey));</div><div class="line"></div><div class="line">		<span class="keyword">var</span> expectedSig = Convert.FromBase64String(signData);</div><div class="line"></div><div class="line">		<span class="comment">/* Get the bytes to be signed from the string */</span></div><div class="line">		<span class="keyword">var</span> msgBytes = encoding.GetBytes(content);</div><div class="line"></div><div class="line">		<span class="comment">/* Calculate the signature and see if it matches */</span></div><div class="line">		signer.BlockUpdate(msgBytes, <span class="number">0</span>, msgBytes.Length);</div><div class="line">		<span class="keyword">return</span> signer.VerifySignature(expectedSig);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://www.bouncycastle.org/csharp/" target="_blank" rel="external">bouncycastle官网</a><br><a href="http://www.cnblogs.com/dj258/p/6049786.html#3589515" target="_blank" rel="external">C# 与JAVA 的RSA 加密解密交互，互通，C#使用BouncyCastle来实现私钥加密，公钥解密的方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本章记录关于Java MD5withRSA加密算法的C#实现。由于C#不提供MD5withRSA的内置实现，所以必须依赖其他的第三方库。这里提供一个简单的sample来演绎[bouncycastle]的加密库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C#" scheme="http://vrast.cn/categories/C/"/>
    
    
      <category term="MD5withRSA" scheme="http://vrast.cn/tags/MD5withRSA/"/>
    
  </entry>
  
  <entry>
    <title>一次加载所有Shader</title>
    <link href="http://vrast.cn/posts/8cb143d1/"/>
    <id>http://vrast.cn/posts/8cb143d1/</id>
    <published>2017-01-09T13:00:25.000Z</published>
    <updated>2017-01-12T09:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一次性加载所有的Shader.避免材质上的Shader丢失，5.X需要调用<code>Shader.WarmupAllShaders</code></p>
</blockquote>
<a id="more"></a>
<h1 id="ShaderVariantCollection-Document"><a href="#ShaderVariantCollection-Document" class="headerlink" title="ShaderVariantCollection Document"></a>ShaderVariantCollection Document</h1><p>Description</p>
<p>ShaderVariantCollection records which shader variants are actually used in each shader.</p>
<p>This is used for shader preloading (“warmup”), so that a game can make sure “actually required” shader variants are loaded at startup (or level load time), to avoid shader compilation related hiccups later on in the game.</p>
<p>In Unity, many shaders internally have multiple “variants”, to account for different light modes, lightmaps, shadows and so on. These variants are indentified by a shader pass type, and a set of shader keywords. See ShaderVariant.</p>
<p>Typical use of ShaderVariantCollection is to record the shader variants used during a play session from the editor (under Graphics Settings), save them out as an asset, and add to the list of preloaded shaders (again in Graphics Settings). Additionally, you could call WarmUp on a ShaderVariantCollection object manually.</p>
<p>ShaderVariantCollection generally replaces the old Shader.WarmupAllShaders function.</p>
<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>对于Unity4.x版本，Shader的AssetBundle加载后只需LoadAll即可完成所有Shader的加载和解析，但对于Unity5.x版本，除执行LoadAllAssets操作外，还需要进行Shader.WarmupAllShaders操作，因为在Unity5.x版本中，Shader的解析和CreateGPUProgram操作是分离的。 – <a href="http://blog.uwa4d.com/archives/LoadingPerformance_Shader.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">摘录自UWA Unity加载模块深度解析（Shader篇)</a></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://blog.csdn.net/ynnmnm/article/details/44674211" target="_blank" rel="external">Unity3D - 图形性能优化：优化着色器加载时间</a><br><a href="http://blog.uwa4d.com/archives/LoadingPerformance_Shader.html" target="_blank" rel="external">Unity加载模块深度解析（Shader篇)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一次性加载所有的Shader.避免材质上的Shader丢失，5.X需要调用&lt;code&gt;Shader.WarmupAllShaders&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="Shader" scheme="http://vrast.cn/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>MACOS开发环境配置</title>
    <link href="http://vrast.cn/posts/35d56e26/"/>
    <id>http://vrast.cn/posts/35d56e26/</id>
    <published>2017-01-05T06:43:07.000Z</published>
    <updated>2017-01-12T09:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里介绍了一些好用的插件 与 开发环境的配置。如果我发现还有什么好玩的会接着更新.</p>
</blockquote>
<a id="more"></a>
<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><p>好用插件管理工具，Homebrew的开发者现在为apple工作了，Xcode内建的Package Manager就是他写的。<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">链接附上🔗 </a></p>
<h1 id="Oh-my-zsh"><a href="#Oh-my-zsh" class="headerlink" title="Oh-my-zsh"></a>Oh-my-zsh</h1><p><a href="http://ohmyz.sh" target="_blank" rel="external">超级shell 高度定制你的terminal</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里介绍了一些好用的插件 与 开发环境的配置。如果我发现还有什么好玩的会接着更新.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MAC" scheme="http://vrast.cn/categories/MAC/"/>
    
    
      <category term="MAC" scheme="http://vrast.cn/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>告别2016</title>
    <link href="http://vrast.cn/posts/fe76973f/"/>
    <id>http://vrast.cn/posts/fe76973f/</id>
    <published>2016-12-31T06:56:05.000Z</published>
    <updated>2016-12-31T08:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2016年的最后一天，总想写点什么来记录下。📝  2016 有未来得及做完成的事情，也有遗憾的事。</p>
</blockquote>
<a id="more"></a>
<h1 id="我的2016"><a href="#我的2016" class="headerlink" title="我的2016"></a>我的2016</h1><p>2015年来现在这家公司,转眼也一年过去了，整整又是一年，到现在甚至有种生活步入正轨的错觉，其实真实的情况是该吃吃该喝喝，该开玩笑的时候绝对不假正经。这样也好 也不好。好在没什么人事之间的矛盾，不好在久而久之就像那温水里的青蛙。原因是外面的形势也不好。谁也不知道未来的手游圈还不好好混。</p>
<p>2016.10月4日，完成了人生中第一件大事，古人云：成家立业。那意思就是先要结婚成家然后才能明白自己要努力干出一番事业。爱人 家庭 是我前进的动力。目标是要有的，然后就是不顾一切的去实现他了。我老婆前一段认真的说道：”如果30岁之前买不起上海的房，那就跟我去重庆!”。我把这句话记在这里，在我30岁以前肯定会给你买套大房子😄  </p>
<p>2016.11月参加了国家成人高考，如愿进入上外。The Limits Of Your Language Are The Limits Of Your World . </p>
<p>还有什么事呢，我还真想不到了。应该都是一些不重要的事吧。值得记录下来的东西还真是不多。</p>
<h1 id="学会了什么"><a href="#学会了什么" class="headerlink" title="学会了什么"></a>学会了什么</h1><p>我看到过一个笑话是这样讲的，我完成了去年实现的所有目标，就是最后爱吹牛的毛病没有改掉。我的2016没有什么很具体的学习到的东西，还是在积累中。远未达到量变促成质变的境地。换句话说：我走在我的路上了。</p>
<h1 id="得到了什么"><a href="#得到了什么" class="headerlink" title="得到了什么"></a>得到了什么</h1><p>经历这一年的时间，明确了我应该达到的3年目标,8年目标。另外别人拥有的并非就是自己追求的东西，我亦不会羡慕。活成自己是我对自己2017年的要求。</p>
<h1 id="有什么遗憾"><a href="#有什么遗憾" class="headerlink" title="有什么遗憾"></a>有什么遗憾</h1><pre><code>惫懒的习惯浪费了2016年的大半美好时光。明明可以做一些有意义的事。最后一无所获。
</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体上来看，2013 - 2014 - 2015 - 2016 四年里，兜兜转转还是最后找到自己今后要走的路。时间一去不复返，在这里立下2017年的目标</p>
<ul>
<li>2017年 有一个好作息习惯 晚上11:30 之前睡觉 早7:30之前起来</li>
<li>2017年 词汇过2w</li>
<li>做个独立开发者 </li>
<li>坚持学习</li>
<li>坚持写博客</li>
<li>拒绝慵懒</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2016年的最后一天，总想写点什么来记录下。📝  2016 有未来得及做完成的事情，也有遗憾的事。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://vrast.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="None" scheme="http://vrast.cn/tags/None/"/>
    
  </entry>
  
  <entry>
    <title>使用Terminal写Hexo</title>
    <link href="http://vrast.cn/posts/a02a67d7/"/>
    <id>http://vrast.cn/posts/a02a67d7/</id>
    <published>2016-12-31T02:39:52.000Z</published>
    <updated>2016-12-31T06:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前写博文都是用Terminal命令生成md,文件然后通过sublimetext编辑文章,昨天偶见同事用VIM编辑代码十分的6,惊为天人,随后便有了这一篇记录博文。</p>
</blockquote>
<a id="more"></a>
<p><img src="/uploads/QQ20161231-0@2x.jpg" alt="iTerm2 + ZSH + solarized themes + vim"></p>
<blockquote>
<p>本文写的比较入门仅介绍写markdown所需要的一些基本快捷键,熟练之后基本上可以用vim全程写文。</p>
</blockquote>
<h1 id="Terminal常用快捷键"><a href="#Terminal常用快捷键" class="headerlink" title="Terminal常用快捷键"></a>Terminal常用快捷键</h1><ul>
<li>Conrol + A/E 在Console状态下移到行首与行末</li>
<li>Ctrl + u 清除当前行</li>
<li>Ctrl + k 清除当前至行末</li>
<li>Ctrl + l == Clear == 清屏</li>
</ul>
<h1 id="Vim常用快捷键"><a href="#Vim常用快捷键" class="headerlink" title="Vim常用快捷键"></a>Vim常用快捷键</h1><h2 id="Normal状态下的文本编辑"><a href="#Normal状态下的文本编辑" class="headerlink" title="Normal状态下的文本编辑"></a>Normal状态下的文本编辑</h2><h3 id="光标的转跳"><a href="#光标的转跳" class="headerlink" title="光标的转跳"></a>光标的转跳</h3><ol>
<li>G 至文末/gg 到文首</li>
<li>$/^ 光标移动到行尾/行首</li>
<li>Shift + 上下/左右 上下翻页,左右移动光标<br>3.1 w/b 前/后 移动光标(同上)</li>
<li>h/j/k/l 左／下/上／右移动光标</li>
</ol>
<h3 id="格式缩进"><a href="#格式缩进" class="headerlink" title="格式缩进"></a>格式缩进</h3><ol>
<li>Shift + &gt;/&lt; 右/左缩进</li>
</ol>
<h3 id="关于Copy-Paste-Undo-Delete"><a href="#关于Copy-Paste-Undo-Delete" class="headerlink" title="关于Copy/Paste/Undo/Delete"></a>关于Copy/Paste/Undo/Delete</h3><ol>
<li>v行选中/Ctrl+v列选中</li>
<li>y/yy 复制当前/复制整行</li>
<li>p 粘贴</li>
<li>u 撤销 /  Ctrl + r 反撤销 </li>
<li>d/dd 删除当前/删除整行(存剪切板)</li>
</ol>
<h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><ol>
<li>在当前文档中搜索光标所在</li>
<li>使用/ + 关键词搜索，使用n/N 后/前搜索</li>
</ol>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ol>
<li>j/J 移动到下一行/合并当前与下一行(移除换行符)</li>
</ol>
<h2 id="从Normal状态-进入编辑状态"><a href="#从Normal状态-进入编辑状态" class="headerlink" title="从Normal状态 进入编辑状态"></a>从Normal状态 进入编辑状态</h2><ol>
<li>s替换当前光标所在字符进入编辑</li>
<li>i插入到光标所在字符之前进入编辑</li>
</ol>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol>
<li><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#commentform" target="_blank" rel="external">Vim使用笔记 - 博客园</a> </li>
<li><a href="http://python-web-guide.readthedocs.io/zh/latest/devtools/vim.html" target="_blank" rel="external">vim 快速入门</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前写博文都是用Terminal命令生成md,文件然后通过sublimetext编辑文章,昨天偶见同事用VIM编辑代码十分的6,惊为天人,随后便有了这一篇记录博文。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Terminal" scheme="http://vrast.cn/categories/Terminal/"/>
    
    
      <category term="VIM" scheme="http://vrast.cn/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>AB热更新脚本信息无法获取(勘误)</title>
    <link href="http://vrast.cn/posts/fec7c50a/"/>
    <id>http://vrast.cn/posts/fec7c50a/</id>
    <published>2016-12-21T03:19:24.000Z</published>
    <updated>2016-12-22T06:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天遇到一个问题，热更新 Unity3D Prefab ，prefab上的附加脚本信息丢失(5.X API)，然后引发出了有趣的小故事～</p>
</blockquote>
<a id="more"></a>
<h1 id="BuildPipeline-BuildAssetBundles-Build包之后-加载的prefab上脚本丢失？"><a href="#BuildPipeline-BuildAssetBundles-Build包之后-加载的prefab上脚本丢失？" class="headerlink" title="BuildPipeline.BuildAssetBundles  Build包之后  加载的prefab上脚本丢失？"></a>BuildPipeline.BuildAssetBundles  Build包之后  加载的prefab上脚本丢失？</h1><p><img src="/uploads/QQ20161221-3@2x.jpg" alt="案例 Prefab"></p>
<p><img src="/uploads/BED55101-4E2C-472D-B09E-973776B3EB9D.jpg" alt="案例 打包脚本"></p>
<blockquote>
<p>manifest 文件上有脚本的关联信息，猜测是因为 改变了脚本的状态 导致找不到脚本。(一个错误的猜测)</p>
</blockquote>
<h1 id="测试-一个错误的测试"><a href="#测试-一个错误的测试" class="headerlink" title="测试(一个错误的测试)"></a>测试(一个错误的测试)</h1><ul>
<li>就是打包一个不暴露变量的脚本上去，看看获取ab包的时候能否自动找到本地的脚本<br><img src="/uploads/AF401BA4-BFE3-40AC-9A8C-CC007537AF75.jpg" alt="打包结果"><br>manifest 文件上 是可以找到两个脚本对应的guid。这里是对应的上的，但是get ab包的时候仍然找不到脚本 ？？</li>
</ul>
<h1 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h1><p>今天晚上重新看了这个问题，发现是由于打包的时候<code>重名文件引起的！</code>这里直接推翻了之前所有的猜测。</p>
<h1 id="勘误测试"><a href="#勘误测试" class="headerlink" title="勘误测试"></a>勘误测试</h1><p><img src="/uploads/QQ20161221-1@2x.jpg" alt="文件结构"></p>
<p>打包代码如下</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> UnityEditor;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ABBuilder</span> : <span class="title">Editor</span></div><div class="line">&#123;</div><div class="line">	[MenuItem(<span class="string">"Editor/导出ab"</span>)]</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BudidCurrent</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		BuildPipeline.BuildAssetBundles(<span class="string">"Assets"</span>, BuildAssetBundleOptions.None, BuildTarget.iOS);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附加在prefab之上的测试脚本，本测试目的是测试 testStr 的debug输出是否正常。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> showLog : MonoBehaviour</div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="built_in">string</span> testStr = <span class="string">"xiaonian"</span>;</div><div class="line">	<span class="comment">// Use this for initialization</span></div><div class="line">	<span class="function">IEnumerator <span class="title">Start</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="function">yield <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span><span class="params">(<span class="number">1f</span>)</span></span>;</div><div class="line">			Debug.Log(testStr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Update is called once per frame</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AssetBundle的加载如下</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.IO;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AB</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">	<span class="function">IEnumerator <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">2</span></span>)</span>;</div><div class="line">		LoadAB();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadAB</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">var</span> bts = File.ReadAllBytes((Application.dataPath + <span class="string">"/testkeyle"</span>));</div><div class="line"></div><div class="line">		<span class="keyword">var</span> ab = AssetBundle.LoadFromMemory(bts);</div><div class="line">		<span class="keyword">var</span> obj = ab.LoadAsset&lt;GameObject&gt;(<span class="string">"Cube"</span>);</div><div class="line">		Instantiate(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20161221-2@2x.jpg" alt="测试结果 正常输出"></p>
<h1 id="用这段代码演示这个错误的判断"><a href="#用这段代码演示这个错误的判断" class="headerlink" title="用这段代码演示这个错误的判断"></a>用这段代码演示这个错误的判断</h1><p><img src="/uploads/QQ20161221-0@2x.jpg" alt="文件结构"><br><img src="/uploads/QQ20161221-4@2x.jpg" alt="生成的manifest信息"><br><img src="/uploads/QQ20161221-3@2x.jpg" alt="测试结果 加载了重名的空预制体"></p>
<h2 id="这里可以猜想-是否Unity3d是遍历生成的信息-找到一个-同名的然后就return出去了-？"><a href="#这里可以猜想-是否Unity3d是遍历生成的信息-找到一个-同名的然后就return出去了-？" class="headerlink" title="这里可以猜想 是否Unity3d是遍历生成的信息 找到一个 同名的然后就return出去了 ？"></a>这里可以猜想 是否Unity3d是遍历生成的信息 找到一个 同名的然后就return出去了 ？</h2><p><img src="/uploads/QQ20161221-5@2x.jpg" alt="将A文件夹换到最后"><br>这里需要将原来生成的AB包相关信息全部删除，否则只会更新 manifest 文件 ！<br><img src="/uploads/QQ20161221-6@2x.jpg" alt="重新生成的manifest信息与AB包"><br><img src="/uploads/QQ20161221-7@2x.jpg" alt="测试结果 正常的预制体"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果AB包中存在重名的文件 AssetBundle 在加载的时候会顺序查找当前AB包中的文件 找到第一个同名资源就会返回该资源！</p>
<h1 id="就这样结束了吗-新的问题！伴随着解决旧问题-又被发现了-！"><a href="#就这样结束了吗-新的问题！伴随着解决旧问题-又被发现了-！" class="headerlink" title="就这样结束了吗  新的问题！伴随着解决旧问题 又被发现了 ！"></a>就这样结束了吗  新的问题！伴随着解决旧问题 又被发现了 ！</h1><h2 id="too-young-too-native"><a href="#too-young-too-native" class="headerlink" title="too young too native"></a>too young too native</h2><h1 id="又是一个演示"><a href="#又是一个演示" class="headerlink" title="又是一个演示"></a>又是一个演示</h1><p>我在主场景手动拖放了一个Cube，然后通过AB加载除了一个新的 Cube(Clone)</p>
<p><img src="/uploads/5CCE21BA-FEF8-4333-8C76-1D9F89D395B1.jpg" alt="新的问题~"></p>
<p>他俩的材质应该是一样的！但是此处显示居然不一致。通过AB加载出来的prefab材质 拖动数值居然不能改变显示效果。</p>
<h2 id="这个问题我还在查"><a href="#这个问题我还在查" class="headerlink" title="这个问题我还在查"></a>这个问题我还在查</h2><p>现在打包到真机看看结果<br><img src="/uploads/QQ20161222-0@2x.jpg" alt="新的问题~"></p>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>发布到真机发现一切正常 ！<br><img src="/uploads/702E9B339B6CEA87BB44ACA6FBABCD56.jpg" alt="我做了一些代码上的修改 然后打包到真机环境"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天遇到一个问题，热更新 Unity3D Prefab ，prefab上的附加脚本信息丢失(5.X API)，然后引发出了有趣的小故事～&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="AssetBundle" scheme="http://vrast.cn/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>UNITY3D中的宏定义</title>
    <link href="http://vrast.cn/posts/e5d2512b/"/>
    <id>http://vrast.cn/posts/e5d2512b/</id>
    <published>2016-12-08T15:11:24.000Z</published>
    <updated>2016-12-08T15:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文介绍UNITY3D常用的宏命令以及如何定义一个宏。</p>
</blockquote>
<a id="more"></a>
<h1 id="常用的平台"><a href="#常用的平台" class="headerlink" title="常用的平台"></a>常用的平台</h1><p><img src="/uploads/8E256D56-9F58-43AA-B6F4-C2598A06B243.jpg" alt="常用的平台"></p>
<h1 id="定义宏"><a href="#定义宏" class="headerlink" title="定义宏"></a>定义宏</h1><h2 id="添加预编译指令-宏"><a href="#添加预编译指令-宏" class="headerlink" title="添加预编译指令(宏)"></a>添加预编译指令(宏)</h2><p>添加一个名为Test的宏 此时这段代码是无法执行的<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> Test</span></div><div class="line">    <span class="comment">//.. you code here</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使定义的宏可用"><a href="#使定义的宏可用" class="headerlink" title="使定义的宏可用"></a>使定义的宏可用</h2><p>找到 <code>Build Setting &gt; PlayerSetting &gt;当前平台 &gt; Scripting Define Symbols </code> 添加 Test 即可。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html" target="_blank" rel="external">UNITY3D 官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文介绍UNITY3D常用的宏命令以及如何定义一个宏。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="Define" scheme="http://vrast.cn/tags/Define/"/>
    
  </entry>
  
  <entry>
    <title>AssetBundle生成配置文件关系分析</title>
    <link href="http://vrast.cn/posts/c13fff2a/"/>
    <id>http://vrast.cn/posts/c13fff2a/</id>
    <published>2016-12-08T08:11:01.000Z</published>
    <updated>2016-12-08T15:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>UNITY3D VERSION 5 新版本AB工具 在生产 AB 包的时候会生成 manifest 文件。这些文件有什么联系呢 ？通过测试 我们来一探究竟～</p>
</blockquote>
<a id="more"></a>
<h1 id="UNITY3D-AB新功能"><a href="#UNITY3D-AB新功能" class="headerlink" title="UNITY3D AB新功能"></a>UNITY3D AB新功能</h1><ol>
<li>你可以在 UNITY3D 生成 AB 包的指定目录下，找到一个与 AB 包相同的文件，然后我们加载这个 AB 包便可以获取当前目录下所有的依赖项目。下面的一个案例中，我们从 iOS 当前的目录 AB 包中直接获取到了<code>mapbehaviourmonster_fire_2</code>文件的哈希值 当然也可以获取所有文件的哈希值。这个哈希值我想我会用来校验文件是否被篡改。</li>
<li>你可以在 AB 生成的 manifest 文件中轻松的获取到 CRC 文件校验码 ，如果你并没有修改当前 AB 包的文件，当前 AB 包再次打包就会跳过当前文件。</li>
<li>你在当前 AB 的 manifest 文件中可以找到依赖项的完整路径信息，当然你在目录文件 AB 中同样可以找到 只是这个路径不是完整的。</li>
</ol>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>mapbehaviourmonster_fire_2 文件的 manifest 信息如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ManifestFileVersion</span>: <span class="number">0</span></div><div class="line"><span class="attribute">CRC</span>: <span class="number">3977712109</span></div><div class="line"><span class="attribute">Hashes</span>:</div><div class="line">  <span class="attribute">AssetFileHash</span>:</div><div class="line">    <span class="attribute">serializedVersion</span>: <span class="number">2</span></div><div class="line">    <span class="attribute">Hash</span>: <span class="number">6</span>ecd135fec1799a7a296d2ec71e12356</div><div class="line">  <span class="attribute">TypeTreeHash</span>:</div><div class="line">    <span class="attribute">serializedVersion</span>: <span class="number">2</span></div><div class="line">    <span class="attribute">Hash</span>: <span class="number">1033</span>bf7ddfd4c6d43e7a6382c0a0a61a</div><div class="line"><span class="attribute">HashAppended</span>: <span class="number">0</span></div><div class="line"><span class="attribute">ClassTypes</span>:</div><div class="line">- <span class="attribute">Class</span>: <span class="number">49</span></div><div class="line">  <span class="attribute">Script</span>: &#123;<span class="attribute">instanceID</span>: <span class="number">0</span>&#125;</div><div class="line"><span class="attribute">Assets</span>:</div><div class="line">- Assets/Resources/Config/MapBehaviourMonster_Fire_2.txt</div><div class="line"><span class="attribute">Dependencies</span>: []</div></pre></td></tr></table></figure></p>
<p>我们在此处 加载了 iOS(也就是当前目录自动生成的AB包)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> path = Path.Combine(Application.streamingAssetsPath, Utility.GetPlatformName());</div><div class="line"><span class="keyword">var</span> bt = File.ReadAllBytes(Path.Combine(path, <span class="string">"iOS"</span>));</div><div class="line"></div><div class="line">AssetBundle ab = AssetBundle.LoadFromMemory(bt);</div><div class="line">AssetBundleManifest mainfet = ab.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">"AssetBundleManifest"</span>);</div><div class="line"></div><div class="line">Debug.Log(mainfet.GetAssetBundleHash(<span class="string">"mapbehaviourmonster_fire_2"</span>));</div></pre></td></tr></table></figure></p>
<p>测试输出结果如下：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>ecd135fec1799a7a296d2ec<span class="number">71e12356</span></div></pre></td></tr></table></figure></p>
<h1 id="更多的内存测试"><a href="#更多的内存测试" class="headerlink" title="更多的内存测试"></a>更多的内存测试</h1><p>我也是在晚上搜到这篇文章的他反复做了几个读取释放与资源内存方面的测试感兴趣的可以看看<br><a href="https://segmentfault.com/a/1190000004335280" target="_blank" rel="external">unity3d 关于AssetBundle的一些处理细节</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;UNITY3D VERSION 5 新版本AB工具 在生产 AB 包的时候会生成 manifest 文件。这些文件有什么联系呢 ？通过测试 我们来一探究竟～&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="AssetBundle" scheme="http://vrast.cn/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D coroutines in detail</title>
    <link href="http://vrast.cn/posts/937d6de4/"/>
    <id>http://vrast.cn/posts/937d6de4/</id>
    <published>2016-12-08T02:21:19.000Z</published>
    <updated>2016-12-08T15:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>coroutines的技术细节 节选自 <a href="http://stackoverflow.com/questions/12932306/how-does-startcoroutine-yield-return-pattern-really-work-in-unity" target="_blank" rel="external">How does StartCoroutine / yield return pattern really work in Unity? -stackoverflow</a></p>
</blockquote>
<a id="more"></a>
<p>Many processes in games take place over the course of multiple frames. You’ve got ‘dense’ processes, like pathfinding, which work hard each frame but get split across multiple frames so as not to impact the framerate too heavily. You’ve got ‘sparse’ processes, like gameplay triggers, that do nothing most frames, but occasionally are called upon to do critical work. And you’ve got assorted processes between the two.</p>
<p>Whenever you’re creating a process that will take place over multiple frames – without multithreading – you need to find some way of breaking the work up into chunks that can be run one-per-frame. For any algorithm with a central loop, it’s fairly obvious: an A<em> pathfinder, for example, can be structured such that it maintains its node lists semi-permanently, processing only a handful of nodes from the open list each frame, instead of trying to do all the work in one go. There’s some balancing to be done to manage latency – after all, if you’re locking your framerate at 60 or 30 frames per second, then your process will only take 60 or 30 steps per second, and that might cause the process to just take too long overall. A neat design might offer the smallest possible unit of work at one level – e.g. process a single A</em> node – and layer on top a way of grouping work together into larger chunks – e.g. keep processing A* nodes for X milliseconds. (Some people call this ‘timeslicing’, though I don’t).</p>
<p>Still, allowing the work to be broken up in this way means you have to transfer state from one frame to the next. If you’re breaking an iterative algorithm up, then you’ve got to preserve all the state shared across iterations, as well as a means of tracking which iteration is to be performed next. That’s not usually too bad – the design of an ‘A* pathfinder class’ is fairly obvious – but there are other cases, too, that are less pleasant. Sometimes you’ll be facing long computations that are doing different kinds of work from frame to frame; the object capturing their state can end up with a big mess of semi-useful ‘locals,’ kept for passing data from one frame to the next. And if you’re dealing with a sparse process, you often end up having to implement a small state machine just to track when work should be done at all.</p>
<p>Wouldn’t it be neat if, instead of having to explicitly track all this state across multiple frames, and instead of having to multithread and manage synchronization and locking and so on, you could just write your function as a single chunk of code, and mark particular places where the function should ‘pause’ and carry on at a later time?</p>
<p>Unity – along with a number of other environments and languages – provides this in the form of Coroutines.</p>
<p>How do they look? In “Unityscript” (Javascript):<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">LongComputation</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(someCondition)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Do a chunk of work */</span></div><div class="line"></div><div class="line">        <span class="comment">// Pause here and carry on next frame</span></div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">In C<span class="meta">#:</span></div><div class="line"><span class="function">IEnumerator <span class="title">LongComputation</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(someCondition)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Do a chunk of work */</span></div><div class="line"></div><div class="line">        <span class="comment">// Pause here and carry on next frame</span></div><div class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>How do they work? Let me just say, quickly, that I don’t work for Unity Technologies. I’ve not seen the Unity source code. I’ve never seen the guts of Unity’s coroutine engine. However, if they’ve implemented it in a way that is radically different from what I’m about to describe, then I’ll be quite surprised. If anyone from UT wants to chime in and talk about how it actually works, then that’d be great.</p>
<p>The big clues are in the C# version. Firstly, note that the return type for the function is IEnumerator. And secondly, note that one of the statements is yield return. This means that yield must be a keyword, and as Unity’s C# support is vanilla C# 3.5, it must be a vanilla C# 3.5 keyword. Indeed, here it is in MSDN – talking about something called ‘iterator blocks.’ So what’s going on?</p>
<p>Firstly, there’s this IEnumerator type. The IEnumerator type acts like a cursor over a sequence, providing two significant members: Current, which is a property giving you the element the cursor is presently over, and MoveNext(), a function that moves to the next element in the sequence. Because IEnumerator is an interface, it doesn’t specify exactly how these members are implemented; MoveNext() could just add one toCurrent, or it could load the new value from a file, or it could download an image from the Internet and hash it and store the new hash in Current… or it could even do one thing for the first element in the sequence, and something entirely different for the second. You could even use it to generate an infinite sequence if you so desired. MoveNext() calculates the next value in the sequence (returning false if there are no more values), and Current retrieves the value it calculated.</p>
<p>Ordinarily, if you wanted to implement an interface, you’d have to write a class, implement the members, and so on. Iterator blocks are a convenient way of implementing IEnumerator without all that hassle – you just follow a few rules, and the IEnumerator implementation is generated automatically by the compiler.</p>
<p>An iterator block is a regular function that (a) returns IEnumerator, and (b) uses the yield keyword. So what does the yield keyword actually do? It declares what the next value in the sequence is – or that there are no more values. The point at which the code encounters a yield return X or yield break is the point at which IEnumerator.MoveNext() should stop; a yield return X causes MoveNext() to return true andCurrent to be assigned the value X, while a yield break causes MoveNext() to return false.</p>
<p>Now, here’s the trick. It doesn’t have to matter what the actual values returned by the sequence are. You can call MoveNext() repeatly, and ignore Current; the computations will still be performed. Each time MoveNext() is called, your iterator block runs to the next ‘yield’ statement, regardless of what expression it actually yields. So you can write something like:<br>IEnumerator TellMeASecret()<br>{<br>  PlayAnimation(“LeanInConspiratorially”);<br>  while(playingAnimation)<br>    yield return null;</p>
<p>  Say(“I stole the cookie from the cookie jar!”);<br>  while(speaking)<br>    yield return null;</p>
<p>  PlayAnimation(“LeanOutRelieved”);<br>  while(playingAnimation)<br>    yield return null;<br>}<br>and what you’ve actually written is an iterator block that generates a long sequence of null values, but what’s significant is the side-effects of the work it does to calculate them. You could run this coroutine using a simple loop like this:<br>IEnumerator e = TellMeASecret();<br>while(e.MoveNext()) { }<br>Or, more usefully, you could mix it in with other work:<br>IEnumerator e = TellMeASecret();<br>while(e.MoveNext())<br>{<br>  // If they press ‘Escape’, skip the cutscene<br>  if(Input.GetKeyDown(KeyCode.Escape)) { break; }<br>}<br>It’s all in the timing As you’ve seen, each yield return statement must provide an expression (like null) so that the iterator block has something to actually assign to IEnumerator.Current. A long sequence of nulls isn’t exactly useful, but we’re more interested in the side-effects. Aren’t we?</p>
<p>There’s something handy we can do with that expression, actually. What if, instead of just yielding null and ignoring it, we yielded something that indicated when we expect to need to do more work? Often we’ll need to carry straight on the next frame, sure, but not always: there will be plenty of times where we want to carry on after an animation or sound has finished playing, or after a particular amount of time has passed. Those while(playingAnimation) yield return null; constructs are bit tedious, don’t you think?</p>
<p>Unity declares the YieldInstruction base type, and provides a few concrete derived types that indicate particular kinds of wait. You’ve got WaitForSeconds, which resumes the coroutine after the designated amount of time has passed. You’ve got WaitForEndOfFrame, which resumes the coroutine at a particular point later in the same frame. You’ve got the Coroutine type itself, which, when coroutine A yields coroutine B, pauses coroutine A until after coroutine B has finished.</p>
<p>What does this look like from a runtime point of view? As I said, I don’t work for Unity, so I’ve never seen their code; but I’d imagine it might look a little bit like this:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">List&lt;IEnumerator&gt; unblockedCoroutines;</div><div class="line">List&lt;IEnumerator&gt; shouldRunNextFrame;</div><div class="line">List&lt;IEnumerator&gt; shouldRunAtEndOfFrame;</div><div class="line">SortedList&lt;<span class="keyword">float</span>, IEnumerator&gt; shouldRunAfterTimes;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>(IEnumerator coroutine <span class="keyword">in</span> unblockedCoroutines)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!coroutine.MoveNext())</div><div class="line">        <span class="comment">// This coroutine has finished</span></div><div class="line">        <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!coroutine.Current <span class="keyword">is</span> YieldInstruction)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// This coroutine yielded null, or some other value we don't understand; run it next frame.</span></div><div class="line">        shouldRunNextFrame.Add(coroutine);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(coroutine.Current <span class="keyword">is</span> WaitForSeconds)</div><div class="line">    &#123;</div><div class="line">        WaitForSeconds wait = (WaitForSeconds)coroutine.Current;</div><div class="line">        shouldRunAfterTimes.Add(Time.time + wait.duration, coroutine);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">coroutine.Current <span class="keyword">is</span> WaitForEndOfFrame</span>)</span></div><div class="line">    &#123;</div><div class="line">        shouldRunAtEndOfFrame.Add(coroutine);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="comment">/* similar stuff for other YieldInstruction subtypes */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">unblockedCoroutines = shouldRunNextFrame;</div></pre></td></tr></table></figure></p>
<p>It’s not difficult to imagine how more YieldInstruction subtypes could be added to handle other cases – engine-level support for signals, for example, could be added, with a WaitForSignal(“SignalName”)YieldInstruction supporting it. By adding more YieldInstructions, the coroutines themselves can become more expressive – yield return new WaitForSignal(“GameOver”) is nicer to read thanwhile(!Signals.HasFired(“GameOver”)) yield return null, if you ask me, quite apart from the fact that doing it in the engine could be faster than doing it in script.</p>
<p>A couple of non-obvious ramifications There’s a couple of useful things about all this that people sometimes miss that I thought I should point out.</p>
<p>Firstly, yield return is just yielding an expression – any expression – and YieldInstruction is a regular type. This means you can do things like:<br>YieldInstruction y;<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(something)</div><div class="line"> y = <span class="literal">null</span>;</div><div class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">somethingElse</span>)</span></div><div class="line"> y = <span class="keyword">new</span> WaitForEndOfFrame();</div><div class="line"><span class="keyword">else</span></div><div class="line"> y = <span class="keyword">new</span> WaitForSeconds(<span class="number">1.0</span>f);</div><div class="line"></div><div class="line"><span class="keyword">yield</span> <span class="keyword">return</span> y;</div></pre></td></tr></table></figure></p>
<p>The specific lines yield return new WaitForSeconds(), yield return new WaitForEndOfFrame(), etc, are common, but they’re not actually special forms in their own right.</p>
<p>Secondly, because these coroutines are just iterator blocks, you can iterate over them yourself if you want – you don’t have to have the engine do it for you. I’ve used this for adding interrupt conditions to a coroutine before:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function">IEnumerator <span class="title">DoSomething</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">IEnumerator <span class="title">DoSomethingUnlessInterrupted</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  IEnumerator e = DoSomething();</div><div class="line">  <span class="keyword">bool</span> interrupted = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">while</span>(!interrupted)</div><div class="line">  &#123;</div><div class="line">    e.MoveNext();</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> e.Current;</div><div class="line">    interrupted = HasBeenInterrupted();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Thirdly, the fact that you can <span class="keyword">yield</span> <span class="keyword">on</span> other coroutines can sort of allow you to implement your own YieldInstructions, albeit not <span class="keyword">as</span> performantly <span class="keyword">as</span> <span class="keyword">if</span> they were implemented <span class="keyword">by</span> the engine. For example:</div><div class="line"><span class="function">IEnumerator <span class="title">UntilTrueCoroutine</span>(<span class="params">Func fn</span>)</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">while</span>(!fn()) <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Coroutine <span class="title">UntilTrue</span>(<span class="params">Func fn</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> StartCoroutine(UntilTrueCoroutine(fn));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">IEnumerator <span class="title">SomeTask</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">  <span class="function"><span class="keyword">yield</span> return <span class="title">UntilTrue</span>(<span class="params">(</span>) </span>=&gt; _lives &lt; <span class="number">3</span>);</div><div class="line">  <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>however, I wouldn’t really recommend this – the cost of starting a Coroutine is a little heavy for my liking.</p>
<p>Conclusion I hope this clarifies a little some of what’s really happening when you use a Coroutine in Unity. C#’s iterator blocks are a groovy little construct, and even if you’re not using Unity, maybe you’ll find it useful to take advantage of them in the same way.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;coroutines的技术细节 节选自 &lt;a href=&quot;http://stackoverflow.com/questions/12932306/how-does-startcoroutine-yield-return-pattern-really-work-in-unity&quot;&gt;How does StartCoroutine / yield return pattern really work in Unity? -stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="coroutines" scheme="http://vrast.cn/tags/coroutines/"/>
    
  </entry>
  
  <entry>
    <title>AI接口梳理</title>
    <link href="http://vrast.cn/posts/6aa8a811/"/>
    <id>http://vrast.cn/posts/6aa8a811/</id>
    <published>2016-12-06T15:02:53.000Z</published>
    <updated>2017-01-05T07:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于GOAP目标导向型AI以前没有自己写过 所以本篇更新的会比较慢，现在正慢慢理清思路往下写，本篇是个人代码阅读笔记 更新中…<br>2016.12.6 更新StateDictionary／State 部分分析</p>
</blockquote>
<a id="more"></a>
<h1 id="阅读经验-💡"><a href="#阅读经验-💡" class="headerlink" title="阅读经验 💡"></a>阅读经验 💡</h1><p>阅读每个文件夹的时候，问自己几个问题</p>
<ul>
<li>与AIAction的关系 ?</li>
<li>与AIGoals的关系 ?</li>
<li>与AIMemory的关系 ?</li>
<li>与AISensors的关系 ?</li>
<li>与AISystem的关系 ?</li>
</ul>
<blockquote>
<p>笔记部分</p>
</blockquote>
<h1 id="Goal-Oriented-Action-Planning-GOAP"><a href="#Goal-Oriented-Action-Planning-GOAP" class="headerlink" title="Goal-Oriented Action Planning (GOAP)"></a>Goal-Oriented Action Planning (GOAP)</h1><p>面向目标的行动规划</p>
<h1 id="AIBrain"><a href="#AIBrain" class="headerlink" title="AIBrain"></a>AIBrain</h1><p>AIBrain.cs AI的大脑，大脑会知道当前AI的一切状态;</p>
<h2 id="AIBrain-lt-AIStateSystem-Interface"><a href="#AIBrain-lt-AIStateSystem-Interface" class="headerlink" title="AIBrain &lt;- AIStateSystem Interface"></a>AIBrain &lt;- AIStateSystem Interface</h2><p>当前 AI Agent 所处的状态。动画的开始结束，更新函数被 AIBrain 高层面统一调用。</p>
<h2 id="AIBrain-lt-AISensor-Interface"><a href="#AIBrain-lt-AISensor-Interface" class="headerlink" title="AIBrain &lt;- AISensor Interface"></a>AIBrain &lt;- AISensor Interface</h2><p>约定AI Sensor模版是可以被序列化的支持在Unity3d中使用ScriptableTool操作。为了方便模版的批量定制</p>
<h1 id="StateDictionary"><a href="#StateDictionary" class="headerlink" title="StateDictionary"></a>StateDictionary</h1><p>封装一个 key-value ,里面无意义代码也比较多。根本上就是处理key-value的对比，合并重写，初始化的快捷操作<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; conditions;</div></pre></td></tr></table></figure></p>
<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>统一调用所有的 AIStateSystem ，先是State基类 作为统一调用的入口而存在，图二通过方法侵入，设置当前状态。还是忍不住截了张图，这设计太经典了。打出一套combo连招～<br><img src="/uploads/QQ20161206-0@2x.jpg" alt="图一 State基类"><br><img src="/uploads/QQ20161206-1@2x.jpg" alt="图二 分别表示三种基础状态"><br>忍不住要说说这种设计的好处，隐藏了具体实现细节，而且只需要重写相应的代码即可修改代码执行之前的判断。</p>
<h1 id="Checkers"><a href="#Checkers" class="headerlink" title="Checkers"></a>Checkers</h1><p>优化基础代码<br><img src="/uploads/QQ20161206-2@2x.jpg" alt="图一 Checkers类"></p>
<h1 id="AIAction-Interface"><a href="#AIAction-Interface" class="headerlink" title="AIAction Interface"></a>AIAction Interface</h1><ol>
<li>具体行为的执行者 </li>
<li>计算当前节点消耗 [CalculateCost]</li>
<li>AIAction可以得到一切计算所需要的数据，有最具体的数据处理逻辑</li>
<li>preConditions AI能被执行的前提条件，只有这个条件列表都被满足才能执行这个AI行为</li>
<li>postEffects 当前行为结束[IsCompleted(AIBrain)]之后 将要抛出这个变更过的条件列表，给AIBrain</li>
<li>提供函数给Planner校验是否当前行为可以被添加到计划中[CanBeAddedToPlan]</li>
<li>[JustBeforePlan] 一个钩子函数，如果有什么需要预处理的可以提前处理。</li>
<li>[GetRelated] 也是比较重要的一个函数，获取关联的函数</li>
</ol>
<h1 id="Planner"><a href="#Planner" class="headerlink" title="Planner"></a>Planner</h1><ol>
<li>计划所有目标的可行性</li>
<li>给当前脑中的所有goal排序 </li>
<li></li>
</ol>
<p><a href="http://alumni.media.mit.edu/~jorkin/goap.html" target="_blank" rel="external">GOAP参考文档</a><br><a href="https://gamedevelopment.tutsplus.com/tutorials/goal-oriented-action-planning-for-a-smarter-ai--cms-20793" target="_blank" rel="external">GOAP Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于GOAP目标导向型AI以前没有自己写过 所以本篇更新的会比较慢，现在正慢慢理清思路往下写，本篇是个人代码阅读笔记 更新中…&lt;br&gt;2016.12.6 更新StateDictionary／State 部分分析&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="INTENSE项目源码分析" scheme="http://vrast.cn/categories/INTENSE%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="AI" scheme="http://vrast.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>U3D代码片段赏析</title>
    <link href="http://vrast.cn/posts/a5028a57/"/>
    <id>http://vrast.cn/posts/a5028a57/</id>
    <published>2016-12-03T15:22:09.000Z</published>
    <updated>2017-01-05T07:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇分享一些有意思的代码片段 ~</p>
</blockquote>
<a id="more"></a>
<h1 id="Designing-a-Jump-in-Unity"><a href="#Designing-a-Jump-in-Unity" class="headerlink" title="Designing a Jump in Unity"></a><a href="http://www.gamasutra.com/blogs/DanielFineberg/20150825/244650/Designing_a_Jump_in_Unity.php" target="_blank" rel="external">Designing a Jump in Unity</a></h1><p>随着 jumpTime 时间延长 proportionCompleted 值变小，thisFrameJumpVector 插值向量越大。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">IEnumerator <span class="title">JumpRoutine</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    rigidbody.velocity = Vector2.zero;</div><div class="line">    <span class="keyword">float</span> timer = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(jumpButtonPressed &amp;&amp; timer &lt; jumpTime)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Calculate how far through the jump we are as a percentage</span></div><div class="line">        <span class="comment">//apply the full jump force on the first frame, then apply less force</span></div><div class="line">        <span class="comment">//each consecutive frame</span></div><div class="line">        </div><div class="line">        <span class="keyword">float</span> proportionCompleted = timer / jumpTime;</div><div class="line">        Vector2 thisFrameJumpVector = Vector2.Lerp(jumpVector, Vector2.zero, proportionCompleted);</div><div class="line">        rigidbody.AddForce(thisFrameJumpVector);</div><div class="line">        timer += Time.deltaTime;</div><div class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    jumping = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="TimeClass"><a href="#TimeClass" class="headerlink" title="TimeClass"></a>TimeClass</h1><ul>
<li>Time.time:[只读]表示从游戏开发到现在的时间，会随着游戏的暂停而停止计算。</li>
<li>Time.timeSinceLevelLoad:[只读]表示从当前Scene开始到目前为止的时间，也会随着暂停操作而停止。</li>
<li>Time.fixedTime:[只读]表示以秒计游戏开始的时间，固定时间以定期间隔更新[相当于fixedDeltaTime] 直到达到time属性。</li>
<li>Time.fixedDeltaTime:表示以秒计间隔，在物理和其他固定帧率进行更新，在Edit/ProjectSettings/Time的Fixed Timestep可以自行设置。</li>
<li>Time.maximumDeltaTime:一帧能获得的最长时间。物理和其他固定帧速率更新(类似MonoBehaviour FixedUpdate)。</li>
<li>Time.SmoothDeltaTime:[只读]表示一个平稳的deltaTime，根据前 N帧的时间加权平均的值。</li>
<li>Time.timeScale:时间缩放，默认值为1。若设置小于1表示时间减慢。若设置大于1,表示时间加快。若设置为0 则暂停。可以用来加速/减速/暂停游戏，非常有用。</li>
<li>Time.frameCount:[只读]总帧数</li>
<li>Time.realtimeSinceStartup:[只读]表示自游戏开始后的总时间，即使暂停也会不断的增加。</li>
<li>Time.captureFramerate:表示设置每秒的帧率，然后不考虑真实时间。</li>
<li>Time.unscaledDeltaTime:[只读]不考虑timescale时候与deltaTime相同，若timescale被设置，则无效。</li>
<li>Time.unscaledTime:[只读]不考虑timescale时候与time相同，若timescale被设置，则无效。</li>
</ul>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇分享一些有意思的代码片段 ~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UNITY3D" scheme="http://vrast.cn/categories/UNITY3D/"/>
    
    
      <category term="CODE" scheme="http://vrast.cn/tags/CODE/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio生成jar包</title>
    <link href="http://vrast.cn/posts/bfe68343/"/>
    <id>http://vrast.cn/posts/bfe68343/</id>
    <published>2016-12-03T13:14:09.000Z</published>
    <updated>2017-01-12T15:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当你在Unity3D开发的时候需要一个Android Plugin的时候回来看看这个文章吧，本篇介绍如何使用Android Studio生成jar包(MacOS)。</p>
</blockquote>
<a id="more"></a>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><ol>
<li>请确保本地有 Android SDK,如无 <a href="http://vrast.cn/posts/9d8752cb/">请参见 Gradle环境配置一文</a></li>
<li>确保gradle环境配置完毕 <a href="http://vrast.cn/posts/9d8752cb/">请参见 Gradle环境配置一文</a></li>
</ol>
<h1 id="什么是jar包"><a href="#什么是jar包" class="headerlink" title="什么是jar包 ?"></a>什么是jar包 ?</h1><p>JAR（Java ARchive，Java 归档）是一种与平台无关的文件格式，可将多个文件合成一个文件。可以简单的看作类似zip的压缩包，里面存放的是代码与项目资源。<br>更详细的介绍在这里 <a href="http://www.ibm.com/developerworks/cn/java/j-jar/" target="_blank" rel="external">JAR 文件揭密 -来自IBM公司官网</a> 下面做一些jar的特性摘要：</p>
<p>JAR 文件格式提供了许多优势和功能，其中很多是传统的压缩格式如 ZIP 或者 TAR 所没有提供的。它们包括：</p>
<ul>
<li>安全性。可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。</li>
<li>减少下载时间。如果一个 applet 捆绑到一个 JAR 文件中，那么浏览器就可以在一个 HTTP 事务中下载这个 applet 的类文件和相关的资源，而不是对每一个文件打开一个新连接。</li>
<li>压缩。JAR 格式允许您压缩文件以提高存储效率。</li>
<li>传输平台扩展。Java 扩展框架 (Java Extensions Framework) 提供了向 Java 核心平台添加功能的方法，这些扩展是用 JAR 文件打包的 (Java 3D 和 JavaMail 就是由 Sun 开发的扩展例子 )。</li>
<li>包密封。存储在 JAR 文件中的包可以选择进行 密封，以增强版本一致性和安全性。密封一个包意味着包中的所有类都必须在同一 JAR 文件中找到。</li>
<li>包版本控制。一个 JAR 文件可以包含有关它所包含的文件的数据，如厂商和版本信息。</li>
<li>可移植性。处理 JAR 文件的机制是 Java 平台核心 API 的标准部分。</li>
</ul>
<h1 id="Eclipse平台打包-jar-的方式"><a href="#Eclipse平台打包-jar-的方式" class="headerlink" title="Eclipse平台打包 jar 的方式"></a>Eclipse平台打包 jar 的方式</h1><ol>
<li><p>自动化打jar包方法<br><a href="http://stackoverflow.com/questions/1062941/build-project-into-a-jar-automatically-in-eclipse" target="_blank" rel="external">Build project into a JAR automatically in Eclipse -来自stackoverflow</a></p>
</li>
<li><p>手动导出</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Choose Export &gt; Java &gt; JAR file </div><div class="line"><span class="bullet">2. </span>选中需要导出的文件即可</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="使用Android-Studio导出jar包"><a href="#使用Android-Studio导出jar包" class="headerlink" title="使用Android Studio导出jar包"></a>使用Android Studio导出jar包</h1><p>Android Studio只能间接导出jar包，对此我深表遗憾，它需要新建一个android studio的空项目，然后 添加一个名为 Android Library 的库。最后将这个库导出为jar文件。这里着重说明几个我遇到的问题，</p>
<ul>
<li>需要删除test project也就是测试工程，并且在Gradle中删除测试项目的编译命令 </li>
<li>导出的代码是整个 Library 的代码</li>
</ul>
<h2 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h2><ol>
<li><p>下一步下一步默认即可，注意此处 你的Application Name需要大写开头<br><img src="/uploads/QQ20161203-0@2x.jpg" alt="创建工程"></p>
</li>
<li><p>此处我使用的 MyPlugunJar 作为 Andorid Library(类库)名<br><img src="/uploads/QQ20161203-1@2x.jpg" alt="创建Android Library"></p>
</li>
</ol>
<p><img src="/uploads/QQ20161203-5@2x.jpg" alt="添加一个测试用的 MainActivity.java"></p>
<ol>
<li>删除测试工程<br><img src="/uploads/AFF4FDDB-BA8D-47B8-978A-04A84C1F9D39.jpg" alt="打开Moudle 设置"></li>
</ol>
<p><img src="/uploads/QQ20161203-2@2x.jpg" alt="依次删除 app/MyPlugunJar的依赖项"></p>
<p><img src="/uploads/70EAC071-2BCC-444F-BD37-A43DB14E4745.jpg" alt="依次删除 测试项目"></p>
<p>这一步需要注意一下 如果是 Build Unity3D 使用的jar包 是不需要引用 <code>com.android.support:appcompat-v7:22.2.0</code> 这个项目的，可以适当的予以删除。</p>
<ol>
<li>添加自动构建代码<br>选中app的Gradle,添加如下代码</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.0'</span></div><div class="line"></div><div class="line">    <span class="comment">//添加编译的类库</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':myplugunjar'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选中myplugunjar的Gradle,添加如下代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> makeJar(type: <span class="keyword">Copy</span>) &#123;</div><div class="line">    <span class="comment">//删除存在的</span></div><div class="line">    <span class="keyword">delete</span> <span class="string">'build/libs/mysdk.jar'</span></div><div class="line">    <span class="comment">//打包这个里面的文件</span></div><div class="line">    <span class="keyword">from</span>(<span class="string">'build/intermediates/bundles/release/'</span>)</div><div class="line">    <span class="comment">//放到这个目录</span></div><div class="line">    <span class="keyword">into</span>(<span class="string">'build/libs/'</span>)</div><div class="line">    <span class="comment">//将classes.jar放入build/libs/目录下</span></div><div class="line">    <span class="comment">//include ,exclude参数来设置过滤</span></div><div class="line">    <span class="comment">//这里只需要包含classes.jar这个文件</span></div><div class="line">    <span class="keyword">include</span>(<span class="string">'classes.jar'</span>)</div><div class="line">    <span class="comment">//重命名</span></div><div class="line">    rename (<span class="string">'classes.jar'</span>, <span class="string">'mysdk.jar'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">makeJar.dependsOn(build)</div></pre></td></tr></table></figure>
<p><img src="/uploads/QQ20161203-3@2x.jpg" alt="添加自动构建代码"></p>
<ol>
<li>编译，并且获取jar包</li>
</ol>
<p><img src="/uploads/QQ20161203-4@2x.jpg" alt="切换到app项目目录"></p>
<p>编译指令如下<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gradle makeJar</span></div></pre></td></tr></table></figure></p>
<p><img src="/uploads/QQ20161203-6@2x.jpg" alt="最终生成的文件"></p>
<p><img src="/uploads/QQ20161203-8@2x.jpg" alt="解压这个文件,查看是否正确"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://blog.csdn.net/ta893115871/article/details/46955791/" target="_blank" rel="external">该文章还介绍了打包资源文件到jar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当你在Unity3D开发的时候需要一个Android Plugin的时候回来看看这个文章吧，本篇介绍如何使用Android Studio生成jar包(MacOS)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://vrast.cn/categories/Android-Studio/"/>
    
    
      <category term="jar" scheme="http://vrast.cn/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>ADB环境配置以及常用命令</title>
    <link href="http://vrast.cn/posts/e3476f51/"/>
    <id>http://vrast.cn/posts/e3476f51/</id>
    <published>2016-12-03T10:24:49.000Z</published>
    <updated>2016-12-04T06:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文描述ADB在MAC上的配置过程，以及常用的Command(ADB装x指南).更科学的Android SDK使用。</p>
</blockquote>
<a id="more"></a>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><ol>
<li>请确保本地有 Android SDK,如无 <a href="http://vrast.cn/posts/9d8752cb/">请参见 Gradle环境配置一文</a></li>
<li>确保 SDK 中有 platform-tools,以下是我的配置路径</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> keyle@keyles-MacBook-Pro  ~/Library/Android/sdk/platform-tools  ls -<span class="selector-tag">a</span></div><div class="line">.                 adb               fastboot          sqlite3</div><div class="line">..                api               hprof-conv        systrace</div><div class="line"><span class="selector-class">.DS_Store</span>         dmtracedump       package<span class="selector-class">.xml</span></div><div class="line">NOTICE<span class="selector-class">.txt</span>        etc1tool          source.properties</div></pre></td></tr></table></figure>
<h2 id="配置MAC环境"><a href="#配置MAC环境" class="headerlink" title="配置MAC环境"></a>配置MAC环境</h2><p>打开terminal,在<code>~</code>路径下输入下面命令</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>此命令写文本</div><div class="line">vim .bash_profile</div><div class="line"><span class="regexp">//</span>进入编辑模式 粘贴如下配置</div><div class="line">export PATH=<span class="variable">$PATH</span>:~<span class="regexp">/Library/</span>Android<span class="regexp">/sdk/</span>platform-tools</div><div class="line"><span class="regexp">//</span>键入:wq 结束编辑,返回后键入如下代码 完成配置</div><div class="line">source .bash_profile</div></pre></td></tr></table></figure>
<h1 id="关于ADB你不得不知道的8个命令-The-Most-Common-ADB-Commands-You-Must-Know-译文"><a href="#关于ADB你不得不知道的8个命令-The-Most-Common-ADB-Commands-You-Must-Know-译文" class="headerlink" title="关于ADB你不得不知道的8个命令 The Most Common ADB Commands You Must Know 译文"></a>关于ADB你不得不知道的8个命令 <a href="https://www.maketecheasier.com/common-adb-commands/" target="_blank" rel="external">The Most Common ADB Commands You Must Know 译文</a></h1><p>ADB对于Andorid实在是Debug的桥梁啊，它允许你使用你的电脑控制你的手机。这种情况下你想在桌面上给你的手机安装APP，你就该用ADB了。ADB可以干很多类似事儿，比如说装APP,懂点使用ADB命令的知识是非常有益的(利于装x)，你可以不碰手机能干老多事儿了，在下文，我们例举了常见的可以在操作手机的ADB指令。<br>ADB stands for Android Debug Bridge, and it allows you to communicate with your Android device using your computer. For instance, if you wish to install an app on your device right from your desktop, you can do so using ADB. There is a lot more you can do with ADB than just installing an app. Having knowledge of some of the most used ADB commands is really beneficial, as it will let you perform a number of actions on your device without even touching it. Here, we have compiled some of the common commands that you can use with ADB to perform actions on your device.</p>
<ol>
<li>Reboot your Device 重启手机</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb reboot</span></div></pre></td></tr></table></figure>
<ol>
<li>Reboot into Recovery 重启进入Recovery模式</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb reboot recovery</span></div></pre></td></tr></table></figure>
<ol>
<li>Reboot into Bootloader Mode 重启进入Bootloader模式</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb reboot bootloader</span></div></pre></td></tr></table></figure>
<p>这里我想提醒看本文的朋友，如果不懂Bootloader模式是什么就不要进去了，可能会把手机变成 “真.砖”.<br>Bootloader是嵌入式系统在加电后执行的第一段代码，在它完成CPU和相关硬件的初始化之后，再将操作系统映像或固化的嵌入式应用程序装在到内存中然后跳转到操作系统所在的空间，启动操作系统运行.<a href="http://baike.baidu.com/link?url=grtUF08lHN4fVUlzG2SfFAb6GvWzP_TwOnJB2RfSZaSE8GS-t1_4qY0lVtNn1dVUDZxsS79BqN-FQmIsvqQND6fC7g63eDkE3MUFMC-K2Uy" target="_blank" rel="external">-来自百度百科的一段介绍</a></p>
<ol>
<li>Reboot into Fastboot 重启进入Fastboot模式</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb reboot fastboot</span></div></pre></td></tr></table></figure>
<ol>
<li>Send File to your Device 给手机发送文件</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb <span class="keyword">push</span> <span class="keyword">Source</span> Destination</div></pre></td></tr></table></figure>
<p>上面的命令支持你发送文件到设备上去，你只需要将文件的源路径写在命令的Source参数上和你想发送的目标参数填写完毕。<br>The above command lets you send files to your device. You just need to specify the source location of the file in the source argument in the command and the destination where you want to send your file.</p>
<ol>
<li>Get File from your Device 从手机获取文件</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb pull FileLocation Destination</span></div></pre></td></tr></table></figure>
<p>此命令支持你从手机拉取数据，换句话说，从手机接收文件。只需要填写设备上的文件路径与电脑上的目录即可正常运行。<br>It will let you pull, or in other words, receive a file from your device. Just specify the file location on your device and the destination in the command, and it should do the job for you.</p>
<ol>
<li>Install an App on your Device 安装APK</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb <span class="keyword">install</span> APKLocation</div></pre></td></tr></table></figure>
<p>这条命令支持你从电脑安装手机APP,你只需要填写APK的特殊路径，他就会安装你选中的APK.<br>What this command does is let you install an app on your device right from your computer. You just need to specify the APK location in the command, and it will install the selected app on your device.</p>
<ol>
<li>Remount the System 重装系统</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adb remount</span></div></pre></td></tr></table></figure>
<p>如果你想重新挂载你设备的系统分区，可以用上面提到的命令<br>In case you want to remount the entire system of your device, you can issue the command mentioned above.<br><code>adb remount</code>命令主要是 重新挂载系统分区，使系统分区重新可写(读写权限)</p>
<p>Conclusion 结论 略..<br>These were the most common ADB commands you should know if you have an Android device and you often connect it to your computer. It will save you some time that you will otherwise spend doing tasks manually.</p>
<p>Just having knowledge of some of the commands given above would prove to be really beneficial to you in the future. As if you ever wish to reboot your device into a specific mode or just want to install an app right off your computer, you will be able to do so by just issuing a single line of command from the Command Prompt Window</p>
<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><img src="/uploads/QQ20161204-0@2x.jpg" alt="安装与卸载APK"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文描述ADB在MAC上的配置过程，以及常用的Command(ADB装x指南).更科学的Android SDK使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://vrast.cn/categories/Android/"/>
    
    
      <category term="ADB" scheme="http://vrast.cn/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>Gradle环境配置</title>
    <link href="http://vrast.cn/posts/9d8752cb/"/>
    <id>http://vrast.cn/posts/9d8752cb/</id>
    <published>2016-12-02T14:47:39.000Z</published>
    <updated>2016-12-02T15:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>从Android Studio出发，从零开始认识 Gradle(项目构建工具)<br><a href="https://www.zhihu.com/question/30432152" target="_blank" rel="external">如何通俗地理解 Gradle? -来自知乎</a></p>
</blockquote>
<a id="more"></a>
<h1 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h1><p>国内的环境你也知道，此处推荐 <a href="http://www.android-studio.org" target="_blank" rel="external">Android Studio中文社区</a>，这里几乎能下到所有Android开发所必须的东西。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="拷贝路径"><a href="#拷贝路径" class="headerlink" title="拷贝路径"></a>拷贝路径</h2><p>请找到Android Studio安装目录. 此处我使用的是 gradle-3.0<br><code>/Applications/Android Studio.app/Contents/gradle/gradle-3.0/</code></p>
<h3 id="没有gradle-3-0？"><a href="#没有gradle-3-0？" class="headerlink" title="没有gradle-3.0？"></a>没有gradle-3.0？</h3><p>下载完成需要解压到 <code>/Applications/Android Studio.app/Contents/gradle/{这里}</code><br><a href="http://gradle.android-studio.org" target="_blank" rel="external">Gradle下载-百度网盘地址</a></p>
<h2 id="配置MAC环境"><a href="#配置MAC环境" class="headerlink" title="配置MAC环境"></a>配置MAC环境</h2><p>打开terminal,在<code>~</code>路径下输入下面命令</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//此命令写文本</span></div><div class="line">vim .bash_profile</div><div class="line"><span class="comment">//进入编辑模式 粘贴如下配置</span></div><div class="line">GRADLE_HOME=<span class="regexp">/Applications/</span>Android\ Studio.app<span class="regexp">/Contents/</span>gradle<span class="regexp">/gradle-3.0/</span>;</div><div class="line">export GRADLE_HOME</div><div class="line">export PATH=<span class="string">$PATH:</span>$GRADLE_HOME/bin</div><div class="line"><span class="comment">//键入:wq 结束编辑,返回后键入如下代码 完成配置</span></div><div class="line">source .bash_profile</div></pre></td></tr></table></figure>
<h2 id="配置Android-Studio环境"><a href="#配置Android-Studio环境" class="headerlink" title="配置Android Studio环境"></a>配置Android Studio环境</h2><p>在 Preferences 中搜索 Gradle 更改本地路径即可。</p>
<h1 id="查看当前-Gradle-版本号"><a href="#查看当前-Gradle-版本号" class="headerlink" title="查看当前 Gradle 版本号"></a>查看当前 Gradle 版本号</h1><p>Console中键入 <code>gradle -version</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">------------------------------------------------------------</span></div><div class="line"><span class="selector-tag">Gradle</span> 3<span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="selector-tag">Build</span> <span class="selector-tag">time</span>:   2016<span class="selector-tag">-08-15</span> 13<span class="selector-pseudo">:15</span><span class="selector-pseudo">:01</span> <span class="selector-tag">UTC</span></div><div class="line"><span class="selector-tag">Revision</span>:     <span class="selector-tag">ad76ba00f59ecb287bd3c037bd25fc3df13ca558</span></div><div class="line"></div><div class="line"><span class="selector-tag">Groovy</span>:       2<span class="selector-class">.4</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">Ant</span>:          <span class="selector-tag">Apache</span> <span class="selector-tag">Ant</span>(<span class="selector-tag">TM</span>) <span class="selector-tag">version</span> 1<span class="selector-class">.9</span><span class="selector-class">.6</span> <span class="selector-tag">compiled</span> <span class="selector-tag">on</span> <span class="selector-tag">June</span> 29 2015</div><div class="line"><span class="selector-tag">JVM</span>:          1<span class="selector-class">.8</span><span class="selector-class">.0_40</span> (<span class="selector-tag">Oracle</span> <span class="selector-tag">Corporation</span> 25<span class="selector-class">.40-b25</span>)</div><div class="line"><span class="selector-tag">OS</span>:           <span class="selector-tag">Mac</span> <span class="selector-tag">OS</span> <span class="selector-tag">X</span> 10<span class="selector-class">.12</span><span class="selector-class">.1</span> <span class="selector-tag">x86_64</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从Android Studio出发，从零开始认识 Gradle(项目构建工具)&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/30432152&quot;&gt;如何通俗地理解 Gradle? -来自知乎&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://vrast.cn/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://vrast.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Unity3d判断资源是否是文件夹</title>
    <link href="http://vrast.cn/posts/58b26bad/"/>
    <id>http://vrast.cn/posts/58b26bad/</id>
    <published>2016-11-28T03:16:32.000Z</published>
    <updated>2016-11-28T03:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>判断当前选中资源是否是文件夹</p>
</blockquote>
<a id="more"></a>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> Retrieves selected folder on Project view.</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetSelectedPathOrFallback</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> path = <span class="string">"Assets"</span>;</div><div class="line">  </div><div class="line">    <span class="keyword">foreach</span> (UnityEngine.Object obj <span class="keyword">in</span> Selection.GetFiltered(<span class="keyword">typeof</span>(UnityEngine.Object), SelectionMode.Assets))</div><div class="line">    &#123;</div><div class="line">        path = AssetDatabase.GetAssetPath(obj);</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(path) &amp;&amp; File.Exists(path))</div><div class="line">        &#123;</div><div class="line">            path = Path.GetDirectoryName(path);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> path;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> Recursively gather all files under the given path including all its subfolders.</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> IEnumerable&lt;<span class="keyword">string</span>&gt; <span class="title">GetFiles</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></div><div class="line">&#123;</div><div class="line">    Queue&lt;<span class="keyword">string</span>&gt; queue = <span class="keyword">new</span> Queue&lt;<span class="keyword">string</span>&gt;();</div><div class="line">    queue.Enqueue(path);</div><div class="line">    <span class="keyword">while</span> (queue.Count &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        path = queue.Dequeue();</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">string</span> subDir <span class="keyword">in</span> Directory.GetDirectories(path))</div><div class="line">            &#123;</div><div class="line">                queue.Enqueue(subDir);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (System.Exception ex)</div><div class="line">        &#123;</div><div class="line">            Debug.LogError(ex.Message);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">string</span>[] files = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            files = Directory.GetFiles(path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (System.Exception ex)</div><div class="line">        &#123;</div><div class="line">            Debug.LogError(ex.Message);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.Length; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> files[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// You can either filter files to get only neccessary files by its file extension using LINQ.</span></div><div class="line"><span class="comment">// It excludes .meta files from all the gathers file list.</span></div><div class="line"><span class="keyword">var</span> assetFiles = GetFiles(GetSelectedPathOrFallback()).Where(s =&gt; s.Contains(<span class="string">".meta"</span>) == <span class="literal">false</span>);</div><div class="line">  </div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> f <span class="keyword">in</span> assetFiles)</div><div class="line">&#123;</div><div class="line">  Debug.Log(<span class="string">"Files: "</span> + f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考链接<br><a href="http://answers.unity3d.com/questions/472808/how-to-get-the-current-selected-folder-of-project.html" target="_blank" rel="external">How to get the current selected folder of &quot;Project&quot; Window🔗</a><br><a href="http://answers.unity3d.com/questions/47029/get-folder-from-selection-array.html" target="_blank" rel="external">get folder from selection array🔗</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;判断当前选中资源是否是文件夹&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="http://vrast.cn/categories/Unity3D/"/>
    
    
      <category term="Unity3D编辑器" scheme="http://vrast.cn/tags/Unity3D%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>消息通知模型</title>
    <link href="http://vrast.cn/posts/a9143383/"/>
    <id>http://vrast.cn/posts/a9143383/</id>
    <published>2016-11-23T13:56:19.000Z</published>
    <updated>2016-11-23T14:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本章节讲述消息通知模型在TPS项目中的使用，这种模型常见于项目中，表现多为Observer模式;Key-Value触发器模式; 文章末我会列出自己写的基于事件触发的模型,支持多种类型消息传递。</p>
</blockquote>
<a id="more"></a>
<h1 id="INTENSE的消息系统设计"><a href="#INTENSE的消息系统设计" class="headerlink" title="INTENSE的消息系统设计"></a>INTENSE的消息系统设计</h1><p>举个例子，在 ThrowingEvents.cs 脚本中，有预先暴露的Event接口，观察事件触发时便会通知其他注册的事件。</p>
<ul>
<li>不使用单例,当前消息系统并不是，也就意味着每次需要初始化一个新的消息系统</li>
<li>保持隔离性，INTENSE的消息系统设计就是每个不同类型的消息系统都会相互隔离。使用不同类型进行区分</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码片段</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThrowingEvents</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//···</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">SingleThrowParamHandler</span>(<span class="params">Exploder exp</span>)</span>;</div><div class="line"></div><div class="line">    <span class="comment">//···</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">event</span> SingleThrowParamHandler onThrowableExit;</div><div class="line"></div><div class="line">    <span class="comment">//···</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InvokeThrowableExit</span>(<span class="params">Exploder exp</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (onThrowableExit != <span class="literal">null</span>)</div><div class="line">            onThrowableExit(exp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前消息在 Canvas3D.cs 脚本中被注册</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Canvas3D</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//···</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//···</span></div><div class="line">        player.SmbThrow.Events.onThrowableExit += OnThrowableExit;</div><div class="line">        <span class="comment">//···</span></div><div class="line">    &#125;        </div><div class="line">    <span class="comment">//···      </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnThrowableExit</span>(<span class="params">Exploder exp</span>)</span></div><div class="line">    &#123;</div><div class="line">        SetThrowableImage(player.SmbThrow.GetThrowableSprite());</div><div class="line">        SetThrowableName(player.SmbThrow.GetThrowableName());</div><div class="line">        ThrowableCountTexter(player.SmbThrow.GetThrowableCount());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前消息(事件)在 ThrowCSMB.cs 脚本中被触发</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThrowCSMB</span> : <span class="title">CustomPlayerSystemSMB</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//···</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ThrowCExploderClone</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (cExploderClone)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//···</span></div><div class="line">            Events.InvokeOnThrow(cExploderClone);</div><div class="line">            <span class="comment">//···</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当这三个脚本运作起来的效果就是 玩家投掷-&gt;UI改变，此处有一个东西需要注意一下 就是 注册的先后顺序。</p>
<h1 id="Event调用的先后顺序-先入先出"><a href="#Event调用的先后顺序-先入先出" class="headerlink" title="Event调用的先后顺序 先入先出"></a>Event调用的先后顺序 先入先出</h1><p>If I set up multiple event handlers, like so:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_webservice.RetrieveDataCompleted += ProcessData1;</div><div class="line">_webservice.RetrieveDataCompleted += ProcessData2;</div></pre></td></tr></table></figure>
<p>The answer will be specific to the RetrieveDataCompleted event.<br> If it has the default backing store of a multi-cast delegate, then yes “they run in the same thread and sequentially in the order that are registered”.<br> <a href="http://stackoverflow.com/questions/1645478/order-of-event-handler-execution" target="_blank" rel="external">Event在同一个线程内先注册的事件先被调用 - Stack Overflow FAQ</a></p>
<h1 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h1><embed src="http://www.tudou.com/v/N0zqkp5U-eo/&bid=05&resourceId=0_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400">

<p><a href="http://git.oschina.net/keyle/SmartNotificationFramework" target="_blank" rel="external">我个人写的消息通知模型源码，附带单元测试。</a></p>
<p><a href="http://git.oschina.net/keyle/SmartNotificationFramework/blob/master/SourceCode/TestCode/Demo.cs?dir=0&amp;filepath=SourceCode%2FTestCode%2FDemo.cs&amp;oid=703770de1ecdac0bbdf77dce2f6ec171c6a34af1&amp;sha=ba3aca46471c783b2320dac16056f5b4e70616dd" target="_blank" rel="external">核心部分举例</a> ，框架核心就是<code>RegisterEvent，UnregisterEvent</code>两个方法的包装。所有的消息被维护到具体的几个dictionary中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本章节讲述消息通知模型在TPS项目中的使用，这种模型常见于项目中，表现多为Observer模式;Key-Value触发器模式; 文章末我会列出自己写的基于事件触发的模型,支持多种类型消息传递。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="INTENSE项目源码分析" scheme="http://vrast.cn/categories/INTENSE%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Observer" scheme="http://vrast.cn/tags/Observer/"/>
    
  </entry>
  
</feed>
